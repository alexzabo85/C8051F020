C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 1   


C51 COMPILER V9.55, COMPILATION OF MODULE PROJECT
OBJECT MODULE PLACED IN project.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\c51.exe project.c DB OE BR INCDIR(C:\SiLabs\MCU\Inc) OR SB CD LC NOAREGS LARGE

line level    source

   1                  #include "header.h"
   1      =1  #ifndef __C8051F020__
   2      =1  #define __C8051F020__
   3      =1  
   4      =1  
   5      =1  #include "C8051F020.h"
   1      =2  /*---------------------------------------------------------------------------
   2      =2  ;
   3      =2  ;
   4      =2  ;
   5      =2  ;
   6      =2  ;       FILE NAME       : C8051F020_V1.h
   7      =2  ;       TARGET MCUs     : C8051F020, 'F021, 'F022, 'F023
   8      =2  ;       DESCRIPTION     : Register/bit definitions for the C8051F02x product family.
   9      =2  ;
  10      =2  ;       REVISION 1.1
  11      =2  ;
  12      =2  ;---------------------------------------------------------------------------*/
  13      =2  
  14      =2  #ifndef C8051F020_DEFS_H
  15      =2  #define C8051F020_DEFS_H
  16      =2  
  17      =2  /*  BYTE Registers  */
  18      =2  sfr P0       =  0x80;   /* PORT 0                                                  */
  19      =2  sfr SP       =  0x81;   /* STACK POINTER                                           */
  20      =2  sfr DPL      =  0x82;   /* DATA POINTER - LOW BYTE                                 */
  21      =2  sfr DPH      =  0x83;   /* DATA POINTER - HIGH BYTE                                */
  22      =2  sfr P4       =  0x84;   /* PORT 4                                                                                                                                 */
  23      =2  sfr P5       =  0x85;   /* PORT 5                                                  */
  24      =2  sfr P6       =  0x86;   /* PORT 6                                                                                                                                 */
  25      =2  sfr PCON     =  0x87;   /* POWER CONTROL                                           */
  26      =2  sfr TCON     =  0x88;   /* TIMER CONTROL                                           */
  27      =2  sfr TMOD     =  0x89;   /* TIMER MODE                                              */
  28      =2  sfr TL0      =  0x8A;   /* TIMER 0 - LOW BYTE                                      */
  29      =2  sfr TL1      =  0x8B;   /* TIMER 1 - LOW BYTE                                      */
  30      =2  sfr TH0      =  0x8C;   /* TIMER 0 - HIGH BYTE                                     */
  31      =2  sfr TH1      =  0x8D;   /* TIMER 1 - HIGH BYTE                                     */
  32      =2  sfr CKCON    =  0x8E;   /* CLOCK CONTROL                                           */
  33      =2  sfr PSCTL    =  0x8F;   /* PROGRAM STORE R/W CONTROL                               */
  34      =2  sfr P1       =  0x90;   /* PORT 1                                                  */
  35      =2  sfr TMR3CN   =  0x91;   /* TIMER 3 CONTROL                                         */
  36      =2  sfr TMR3RLL  =  0x92;   /* TIMER 3 RELOAD REGISTER - LOW BYTE                      */
  37      =2  sfr TMR3RLH  =  0x93;   /* TIMER 3 RELOAD REGISTER - HIGH BYTE                     */
  38      =2  sfr TMR3L    =  0x94;   /* TIMER 3 - LOW BYTE                                      */
  39      =2  sfr TMR3H    =  0x95;   /* TIMER 3 - HIGH BYTE                                     */
  40      =2  sfr P7           =  0x96;   /* PORT 7                                                  */
  41      =2  sfr SCON0    =  0x98;   /* SERIAL PORT 0 CONTROL                                   */
  42      =2  sfr SBUF0    =  0x99;   /* SERIAL PORT 0 BUFFER                                    */
  43      =2  sfr SPI0CFG  =  0x9A;   /* SERIAL PERIPHERAL INTERFACE 0 CONFIGURATION             */
  44      =2  sfr SPI0DAT  =  0x9B;   /* SERIAL PERIPHERAL INTERFACE 0 DATA                      */
  45      =2  sfr ADC1     =  0x9C;   /* ADC 1 DATA                                              */
  46      =2  sfr SPI0CKR  =  0x9D;   /* SERIAL PERIPHERAL INTERFACE 0 CLOCK RATE CONTROL        */
  47      =2  sfr CPT0CN   =  0x9E;   /* COMPARATOR 0 CONTROL                                    */
  48      =2  sfr CPT1CN   =  0x9F;   /* COMPARATOR 1 CONTROL                                    */
  49      =2  sfr P2       =  0xA0;   /* PORT 2                                                  */
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 2   

  50      =2  sfr EMI0TC   =  0xA1;   /* EMIF TIMING CONTROL                                     */
  51      =2  sfr EMI0CF   =  0xA3;   /* EXTERNAL MEMORY INTERFACE (EMIF) CONFIGURATION          */
  52      =2  sfr P0MDOUT  =  0xA4;   /* PORT 0 OUTPUT MODE CONFIGURATION                        */
  53      =2  sfr P1MDOUT  =  0xA5;   /* PORT 1 OUTPUT MODE CONFIGURATION                        */
  54      =2  sfr P2MDOUT  =  0xA6;   /* PORT 2 OUTPUT MODE CONFIGURATION                        */
  55      =2  sfr P3MDOUT  =  0xA7;   /* PORT 3 OUTPUT MODE CONFIGURATION                        */
  56      =2  sfr IE       =  0xA8;   /* INTERRUPT ENABLE                                        */
  57      =2  sfr SADDR0   =  0xA9;   /* SERIAL PORT 0 SLAVE ADDRESS                             */
  58      =2  sfr ADC1CN   =  0xAA;   /* ADC 1 CONTROL                                           */
  59      =2  sfr ADC1CF   =  0xAB;   /* ADC 1 ANALOG MUX CONFIGURATION                          */
  60      =2  sfr AMX1SL   =  0xAC;   /* ADC 1 ANALOG MUX CHANNEL SELECT                         */
  61      =2  sfr P3IF     =  0xAD;   /* PORT 3 EXTERNAL INTERRUPT FLAGS                         */
  62      =2  sfr SADEN1   =  0xAE;   /* SERIAL PORT 1 SLAVE ADDRESS MASK                        */
  63      =2  sfr EMI0CN   =  0xAF;   /* EXTERNAL MEMORY INTERFACE CONTROL                       */
  64      =2  sfr P3       =  0xB0;   /* PORT 3                                                  */
  65      =2  sfr OSCXCN   =  0xB1;   /* EXTERNAL OSCILLATOR CONTROL                             */
  66      =2  sfr OSCICN   =  0xB2;   /* INTERNAL OSCILLATOR CONTROL                             */
  67      =2  sfr P74OUT   =  0xB5;   /* PORTS 4 - 7 OUTPUT MODE                                 */
  68      =2  sfr FLSCL    =  0xB6;   /* FLASH MEMORY TIMING PRESCALER                           */
  69      =2  sfr FLACL    =  0xB7;   /* FLASH ACESS LIMIT                                       */
  70      =2  sfr IP       =  0xB8;   /* INTERRUPT PRIORITY                                      */
  71      =2  sfr SADEN0   =  0xB9;   /* SERIAL PORT 0 SLAVE ADDRESS MASK                        */
  72      =2  sfr AMX0CF   =  0xBA;   /* ADC 0 MUX CONFIGURATION                                 */
  73      =2  sfr AMX0SL   =  0xBB;   /* ADC 0 MUX CHANNEL SELECTION                             */
  74      =2  sfr ADC0CF   =  0xBC;   /* ADC 0 CONFIGURATION                                     */
  75      =2  sfr P1MDIN   =  0xBD;   /* PORT 1 INPUT MODE                                       */
  76      =2  sfr ADC0L    =  0xBE;   /* ADC 0 DATA - LOW BYTE                                   */
  77      =2  sfr ADC0H    =  0xBF;   /* ADC 0 DATA - HIGH BYTE                                  */
  78      =2  sfr SMB0CN   =  0xC0;   /* SMBUS 0 CONTROL                                         */
  79      =2  sfr SMB0STA  =  0xC1;   /* SMBUS 0 STATUS                                          */
  80      =2  sfr SMB0DAT  =  0xC2;   /* SMBUS 0 DATA                                            */
  81      =2  sfr SMB0ADR  =  0xC3;   /* SMBUS 0 SLAVE ADDRESS                                   */
  82      =2  sfr ADC0GTL  =  0xC4;   /* ADC 0 GREATER-THAN REGISTER - LOW BYTE                  */
  83      =2  sfr ADC0GTH  =  0xC5;   /* ADC 0 GREATER-THAN REGISTER - HIGH BYTE                 */
  84      =2  sfr ADC0LTL  =  0xC6;   /* ADC 0 LESS-THAN REGISTER - LOW BYTE                     */
  85      =2  sfr ADC0LTH  =  0xC7;   /* ADC 0 LESS-THAN REGISTER - HIGH BYTE                    */
  86      =2  sfr T2CON    =  0xC8;   /* TIMER 2 CONTROL                                         */
  87      =2  sfr T4CON    =  0xC9;   /* TIMER 4 CONTROL                                         */
  88      =2  sfr RCAP2L   =  0xCA;   /* TIMER 2 CAPTURE REGISTER - LOW BYTE                     */
  89      =2  sfr RCAP2H   =  0xCB;   /* TIMER 2 CAPTURE REGISTER - HIGH BYTE                    */
  90      =2  sfr TL2      =  0xCC;   /* TIMER 2 - LOW BYTE                                      */
  91      =2  sfr TH2      =  0xCD;   /* TIMER 2 - HIGH BYTE                                     */
  92      =2  sfr SMB0CR   =  0xCF;   /* SMBUS 0 CLOCK RATE                                      */
  93      =2  sfr PSW      =  0xD0;   /* PROGRAM STATUS WORD                                     */
  94      =2  sfr REF0CN   =  0xD1;   /* VOLTAGE REFERENCE 0 CONTROL                             */
  95      =2  sfr DAC0L    =  0xD2;   /* DAC 0 REGISTER - LOW BYTE                               */
  96      =2  sfr DAC0H    =  0xD3;   /* DAC 0 REGISTER - HIGH BYTE                              */
  97      =2  sfr DAC0CN   =  0xD4;   /* DAC 0 CONTROL                                           */
  98      =2  sfr DAC1L    =  0xD5;   /* DAC 1 REGISTER - LOW BYTE                               */
  99      =2  sfr DAC1H    =  0xD6;   /* DAC 1 REGISTER - HIGH BYTE                              */
 100      =2  sfr DAC1CN   =  0xD7;   /* DAC 1 CONTROL                                           */
 101      =2  sfr PCA0CN   =  0xD8;   /* PCA 0 COUNTER CONTROL                                   */
 102      =2  sfr PCA0MD   =  0xD9;   /* PCA 0 COUNTER MODE                                      */
 103      =2  sfr PCA0CPM0 =  0xDA;   /* CONTROL REGISTER FOR PCA 0 MODULE 0                     */
 104      =2  sfr PCA0CPM1 =  0xDB;   /* CONTROL REGISTER FOR PCA 0 MODULE 1                     */
 105      =2  sfr PCA0CPM2 =  0xDC;   /* CONTROL REGISTER FOR PCA 0 MODULE 2                     */
 106      =2  sfr PCA0CPM3 =  0xDD;   /* CONTROL REGISTER FOR PCA 0 MODULE 3                     */
 107      =2  sfr PCA0CPM4 =  0xDE;   /* CONTROL REGISTER FOR PCA 0 MODULE 4                     */
 108      =2  sfr ACC      =  0xE0;   /* ACCUMULATOR                                             */
 109      =2  sfr XBR0     =  0xE1;   /* DIGITAL CROSSBAR CONFIGURATION REGISTER 0               */
 110      =2  sfr XBR1     =  0xE2;   /* DIGITAL CROSSBAR CONFIGURATION REGISTER 1               */
 111      =2  sfr XBR2     =  0xE3;   /* DIGITAL CROSSBAR CONFIGURATION REGISTER 2               */
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 3   

 112      =2  sfr RCAP4L   =  0xE4;   /* TIMER 4 CAPTURE REGISTER - LOW BYTE                     */
 113      =2  sfr RCAP4H   =  0xE5;   /* TIMER 4 CAPTURE REGISTER - HIGH BYTE                    */
 114      =2  sfr EIE1     =  0xE6;   /* EXTERNAL INTERRUPT ENABLE 1                             */
 115      =2  sfr EIE2     =  0xE7;   /* EXTERNAL INTERRUPT ENABLE 2                             */
 116      =2  sfr ADC0CN   =  0xE8;   /* ADC 0 CONTROL                                           */
 117      =2  sfr PCA0L    =  0xE9;   /* PCA 0 TIMER - LOW BYTE                                  */
 118      =2  sfr PCA0CPL0 =   0xEA;   /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 0 - LOW BYTE  */
 119      =2  sfr PCA0CPL1 =   0xEB;   /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 1 - LOW BYTE  */
 120      =2  sfr PCA0CPL2 =   0xEC;   /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 2 - LOW BYTE  */
 121      =2  sfr PCA0CPL3 =   0xED;   /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 3 - LOW BYTE  */
 122      =2  sfr PCA0CPL4 =   0xEE;   /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 4 - LOW BYTE  */
 123      =2  sfr RSTSRC   =   0xEF;   /* RESET SOURCE                                            */
 124      =2  sfr B        =   0xF0;   /* B REGISTER                                              */
 125      =2  sfr SCON1    =  0xF1;   /* SERIAL PORT 1 CONTROL                                   */
 126      =2  sfr SBUF1    =  0xF2;   /* SERAIL PORT 1 DATA                                      */
 127      =2  sfr SADDR1   =  0xF3;   /* SERAIL PORT 1                                           */
 128      =2  sfr TL4      =  0xF4;   /* TIMER 4 DATA - LOW BYTE                                 */
 129      =2  sfr TH4      =  0xF5;   /* TIMER 4 DATA - HIGH BYTE                                */
 130      =2  sfr EIP1     =   0xF6;   /* EXTERNAL INTERRUPT PRIORITY REGISTER 1                  */
 131      =2  sfr EIP2     =   0xF7;   /* EXTERNAL INTERRUPT PRIORITY REGISTER 2                  */
 132      =2  sfr SPI0CN   =   0xF8;   /* SERIAL PERIPHERAL INTERFACE 0 CONTROL                   */
 133      =2  sfr PCA0H    =   0xF9;          /* PCA 0 TIMER - HIGH BYTE                                 */
 134      =2  sfr PCA0CPH0 =   0xFA;          /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 0 - HIGH BYTE */
 135      =2  sfr PCA0CPH1 =   0xFB;          /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 1 - HIGH BYTE */
 136      =2  sfr PCA0CPH2 =   0xFC;          /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 2 - HIGH BYTE */
 137      =2  sfr PCA0CPH3 =   0xFD;          /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 3 - HIGH BYTE */
 138      =2  sfr PCA0CPH4 =   0xFE;          /* CAPTURE/COMPARE REGISTER FOR PCA 0 MODULE 4 - HIGH BYTE */
 139      =2  sfr WDTCN    =   0xFF;          /* WATCHDOG TIMER CONTROL                                  */
 140      =2  
 141      =2  
 142      =2  /*  BIT Registers  */
 143      =2  
 144      =2  /*  TCON  0x88 */
 145      =2  sbit TF1   = TCON ^ 7;              /* TIMER 1 OVERFLOW FLAG      */
 146      =2  sbit TR1   = TCON ^ 6;              /* TIMER 1 ON/OFF CONTROL     */
 147      =2  sbit TF0   = TCON ^ 5;              /* TIMER 0 OVERFLOW FLAG      */
 148      =2  sbit TR0   = TCON ^ 4;              /* TIMER 0 ON/OFF CONTROL     */
 149      =2  sbit IE1   = TCON ^ 3;              /* EXT. INTERRUPT 1 EDGE FLAG */
 150      =2  sbit IT1   = TCON ^ 2;              /* EXT. INTERRUPT 1 TYPE      */
 151      =2  sbit IE0   = TCON ^ 1;              /* EXT. INTERRUPT 0 EDGE FLAG */
 152      =2  sbit IT0   = TCON ^ 0;              /* EXT. INTERRUPT 0 TYPE      */
 153      =2  
 154      =2  /*  SCON0  0x98 */
 155      =2  sbit SM00  = SCON0 ^ 7;             /* SERIAL MODE CONTROL BIT 0           */
 156      =2  sbit SM10  = SCON0 ^ 6;             /* SERIAL MODE CONTROL BIT 1           */
 157      =2  sbit SM20  = SCON0 ^ 5;             /* MULTIPROCESSOR COMMUNICATION ENABLE */
 158      =2  sbit REN0  = SCON0 ^ 4;             /* RECEIVE ENABLE                      */
 159      =2  sbit TB80  = SCON0 ^ 3;             /* TRANSMIT BIT 8                      */
 160      =2  sbit RB80  = SCON0 ^ 2;             /* RECEIVE BIT 8                       */
 161      =2  sbit TI0   = SCON0 ^ 1;             /* TRANSMIT INTERRUPT FLAG             */
 162      =2  sbit RI0   = SCON0 ^ 0;             /* RECEIVE INTERRUPT FLAG              */
 163      =2  
 164      =2  /*  IE  0xA8 */
 165      =2  sbit EA    = IE ^ 7;                /* GLOBAL INTERRUPT ENABLE      */
 166      =2  sbit ET2   = IE ^ 5;                /* TIMER 2 INTERRUPT ENABLE     */
 167      =2  sbit ES0   = IE ^ 4;                /* UART0 INTERRUPT ENABLE       */
 168      =2  sbit ET1   = IE ^ 3;                /* TIMER 1 INTERRUPT ENABLE     */
 169      =2  sbit EX1   = IE ^ 2;                /* EXTERNAL INTERRUPT 1 ENABLE  */
 170      =2  sbit ET0   = IE ^ 1;                /* TIMER 0 INTERRUPT ENABLE     */
 171      =2  sbit EX0   = IE ^ 0;                /* EXTERNAL INTERRUPT 0 ENABLE  */
 172      =2  
 173      =2  /*  IP  0xB8 */
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 4   

 174      =2  sbit PT2   = IP ^ 5;                /* TIMER 2 PRIORITY                                 */
 175      =2  sbit PS0   = IP ^ 4;                /* SERIAL PORT PRIORITY                             */
 176      =2  sbit PT1   = IP ^ 3;                /* TIMER 1 PRIORITY                                 */
 177      =2  sbit PX1   = IP ^ 2;                /* EXTERNAL INTERRUPT 1 PRIORITY    */
 178      =2  sbit PT0   = IP ^ 1;                /* TIMER 0 PRIORITY                                 */
 179      =2  sbit PX0   = IP ^ 0;                /* EXTERNAL INTERRUPT 0 PRIORITY    */
 180      =2  
 181      =2  /* SMB0CN 0xC0 */
 182      =2  sbit BUSY     =   SMB0CN ^ 7;       /* SMBUS 0 BUSY                    */
 183      =2  sbit ENSMB    =   SMB0CN ^ 6;       /* SMBUS 0 ENABLE                  */
 184      =2  sbit STA      =   SMB0CN ^ 5;       /* SMBUS 0 START FLAG              */
 185      =2  sbit STO      =   SMB0CN ^ 4;       /* SMBUS 0 STOP FLAG               */
 186      =2  sbit SI       =   SMB0CN ^ 3;       /* SMBUS 0 INTERRUPT PENDING FLAG  */
 187      =2  sbit AA       =   SMB0CN ^ 2;       /* SMBUS 0 ASSERT/ACKNOWLEDGE FLAG */
 188      =2  sbit SMBFTE   =   SMB0CN ^ 1;       /* SMBUS 0 FREE TIMER ENABLE       */
 189      =2  sbit SMBTOE   =   SMB0CN ^ 0;       /* SMBUS 0 TIMEOUT ENABLE          */
 190      =2  
 191      =2  /*  T2CON  0xC8 */
 192      =2  sbit TF2   = T2CON ^ 7;             /* TIMER 2 OVERFLOW FLAG        */
 193      =2  sbit EXF2  = T2CON ^ 6;             /* EXTERNAL FLAG                */
 194      =2  sbit RCLK0 = T2CON ^ 5;             /* UART0 RX CLOCK SOURCE        */
 195      =2  sbit TCLK0 = T2CON ^ 4;             /* UART0 TX CLOCK SOURCE        */
 196      =2  sbit EXEN2 = T2CON ^ 3;             /* TIMER 2 EXTERNAL ENABLE FLAG */
 197      =2  sbit TR2   = T2CON ^ 2;             /* TIMER 2 ON/OFF CONTROL       */
 198      =2  sbit CT2   = T2CON ^ 1;             /* TIMER OR COUNTER SELECT      */
 199      =2  sbit CPRL2 = T2CON ^ 0;             /* CAPTURE OR RELOAD SELECT     */
 200      =2  
 201      =2  /*  PSW  */
 202      =2  sbit CY    = PSW ^ 7;               /* CARRY FLAG              */
 203      =2  sbit AC    = PSW ^ 6;               /* AUXILIARY CARRY FLAG    */
 204      =2  sbit F0    = PSW ^ 5;               /* USER FLAG 0             */
 205      =2  sbit RS1   = PSW ^ 4;               /* REGISTER BANK SELECT 1  */
 206      =2  sbit RS0   = PSW ^ 3;               /* REGISTER BANK SELECT 0  */
 207      =2  sbit OV    = PSW ^ 2;               /* OVERFLOW FLAG           */
 208      =2  sbit F1    = PSW ^ 1;               /* USER FLAG 1             */
 209      =2  sbit P     = PSW ^ 0;               /* ACCUMULATOR PARITY FLAG */
 210      =2  
 211      =2  /* PCA0CN D8H */
 212      =2  sbit CF    =   PCA0CN ^ 7;          /* PCA 0 COUNTER OVERFLOW FLAG   */
 213      =2  sbit CR    =   PCA0CN ^ 6;          /* PCA 0 COUNTER RUN CONTROL BIT */
 214      =2  sbit CCF4  =   PCA0CN ^ 4;          /* PCA 0 MODULE 4 INTERRUPT FLAG */
 215      =2  sbit CCF3  =   PCA0CN ^ 3;          /* PCA 0 MODULE 3 INTERRUPT FLAG */
 216      =2  sbit CCF2  =   PCA0CN ^ 2;          /* PCA 0 MODULE 2 INTERRUPT FLAG */
 217      =2  sbit CCF1  =   PCA0CN ^ 1;          /* PCA 0 MODULE 1 INTERRUPT FLAG */
 218      =2  sbit CCF0  =   PCA0CN ^ 0;          /* PCA 0 MODULE 0 INTERRUPT FLAG */
 219      =2  
 220      =2  /* ADC0CN E8H */
 221      =2  sbit AD0EN     =   ADC0CN ^ 7;      /* ADC 0 ENABLE                              */
 222      =2  sbit AD0TM     =   ADC0CN ^ 6;      /* ADC 0 TRACK MODE                          */
 223      =2  sbit AD0INT    =   ADC0CN ^ 5;      /* ADC 0 CONVERISION COMPLETE INTERRUPT FLAG */
 224      =2  sbit AD0BUSY   =   ADC0CN ^ 4;      /* ADC 0 BUSY FLAG                           */
 225      =2  sbit AD0CM1    =   ADC0CN ^ 3;      /* ADC 0 START OF CONVERSION MODE BIT 1      */
 226      =2  sbit AD0CM0    =   ADC0CN ^ 2;      /* ADC 0 START OF CONVERSION MODE BIT 0      */
 227      =2  sbit AD0WINT   =   ADC0CN ^ 1;      /* ADC 0 WINDOW COMPARE INTERRUPT FLAG       */
 228      =2  sbit AD0LJST   =   ADC0CN ^ 0;      /* ADC 0 RIGHT JUSTIFY DATA BIT              */
 229      =2  
 230      =2  /* SPI0CN F8H */
 231      =2  sbit SPIF     =   SPI0CN ^ 7;       /* SPI 0 INTERRUPT FLAG                     */
 232      =2  sbit WCOL     =   SPI0CN ^ 6;       /* SPI 0 WRITE COLLISION FLAG       */
 233      =2  sbit MODF     =   SPI0CN ^ 5;       /* SPI 0 MODE FAULT FLAG            */
 234      =2  sbit RXOVRN   =   SPI0CN ^ 4;       /* SPI 0 RX OVERRUN FLAG            */
 235      =2  sbit TXBSY    =   SPI0CN ^ 3;       /* SPI 0 TX BUSY FLAG                       */
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 5   

 236      =2  sbit SLVSEL   =   SPI0CN ^ 2;       /* SPI 0 SLAVE SELECT                       */
 237      =2  sbit MSTEN    =   SPI0CN ^ 1;       /* SPI 0 MASTER ENABLE                      */
 238      =2  sbit SPIEN    =   SPI0CN ^ 0;       /* SPI 0 SPI ENABLE                         */
 239      =2  
 240      =2  
 241      =2  sfr16 ADC0     = 0xbe;                 // ADC0 data
 242      =2  sfr16 TMR2     = 0xcc;                 // Timer2
 243      =2  sfr16 TMR4     = 0xf4;                 // Timer4 TL4,TH4
 244      =2  sfr16 RCAP4    = 0xe4;                 // Timer4 capture/reload
 245      =2  
 246      =2  // sfr16 DPTR           =0x82
 247      =2  
 248      =2  sfr16 DP       = 0x82;                    // data pointer
 249      =2  sfr16 TMR3RL   = 0x92;                    // Timer3 reload value
 250      =2  sfr16 TMR3     = 0x94;                    // Timer3 counter
 251      =2  sfr16 ADC0GT   = 0xc4;                    // ADC0 greater than window
 252      =2  sfr16 ADC0LT   = 0xc6;                    // ADC0 less than window
 253      =2  sfr16 RCAP2    = 0xca;                    // Timer2 capture/reload
 254      =2  
 255      =2  sfr16 DAC0     = 0xd2;                    // DAC0 data
 256      =2  sfr16 DAC1     = 0xd5;                    // DAC1 data
 257      =2  
 258      =2  
 259      =2  
 260      =2  #endif
   6      =1  
   7      =1  
   8      =1  
   9      =1  #define NULL                    0               
  10      =1  #define SYSCLK                  22118400L       //22.1184Mhz
  11      =1  #define SARCLK                  2500000L        //2.5Mhz  
  12      =1  // #define T4CLK                        10000L          //hz T=100us
  13      =1  #define T4CLK                   22118L          //1000[hz]
  14      =1  #define BAUDRATE                230400L                 //uart   clock frequency [bps]
  15      =1  // #define BAUDRATE             115200L                 //uart   clock frequency [bps]
  16      =1  #define INTERRUPT_TIMER4        16      //interrupt index
  17      =1  #define INTERRUPT_TIMER2        5       //interrupt index
  18      =1  #define INTERRUPT_TIMER1        3       //interrupt index
  19      =1  
  20      =1  #define FALSE   0 
  21      =1  #define TRUE    1
  22      =1  
  23      =1  
  24      =1  #define MAX_DIGITAL_PINS        48              //digital output
  25      =1  
  26      =1  #define DIG_PORT_0      P4      //[00..07]MOLEX_P70/P72 Digital OUT
  27      =1  #define DIG_PORT_1      P5      //[08..15]MOLEX_P71/P73 Digital OUT
  28      =1  #define DIG_PORT_2      P3      //[16..23]DIP SWITCH Digital IN
  29      =1  #define DIG_PORT_3      P2      //[24..31]MOLEX_P69 Digital IN
  30      =1  #define DIG_PORT_4      P6      //[32..39]MOLEX_P63 Digital IN
  31      =1  #define DIG_PORT_5      P7      //[40..47]MOLEX_P68 Digital IN
  32      =1  #define DIG_PORT_x      P0      //[??..??]MOLEX_P68 Digital IN
  33      =1  
  34      =1  #define ADDRESS_PORT    P3
  35      =1  
  36      =1  
  37      =1  
  38      =1  // sbit UART_READ_DISABLE               =       P0^2;                           //read enable(active low) max3086 only for GPRIO
  39      =1  // sbit UART_WRITE_ENABLE               =       P0^3;                           //write enable(active high) max3086 only for GPRIO
  40      =1  // sbit DHT22_LINE                              =       P0^3;                           //write enable(active high) max3086 only for GPRIO
  41      =1  
  42      =1  
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 6   

  43      =1  
  44      =1  #define BYTELOW(v)   (*(((unsigned char *) (&v) + 1)))
  45      =1  #define BYTEHIGH(v)  (*((unsigned char *) (&v)))
  46      =1  
  47      =1  
  48      =1  
  49      =1  //GPRIO SETUP::::::::::::::::::::::::::::::::::::
  50      =1  
  51      =1  //old configurations
  52      =1  // #define PORT_IN_P69                          P2      [0..7]  
  53      =1  // P3 definition see DEBBUG section
  54      =1  // #define PORT_IN_DIP_SWITCH           P3
  55      =1  // #define PORT_OUT_P70                         P4                                      
  56      =1  // #define PORT_OUT_P71                         P5                              
  57      =1  // #define PORT_IN_P63                          P6      [8..15]                 
  58      =1  // #define PORT_IN_P68                          P7      [16..23]                //rotation switches port        
  59      =1  
  60      =1  //C8051F020KIT SETUP::::::::::::::::::::::::::::
  61      =1  /*
  62      =1  #define MAX_DOUT_PINS   16      //digital output
  63      =1  #define MAX_DIN_PINS    24      //digital output
  64      =1  #define DIN_PORT_0      P2      //MOLEX_P69
  65      =1  #define DIN_PORT_1      P3      //DIP SWITCH
  66      =1  #define DIN_PORT_2      P6      //MOLEX_P63
  67      =1  #define DIN_PORT_3      P7      //MOLEX_P68
  68      =1  #define DOUT_PORT_0     P4      //MOLEX_P70/P72
  69      =1  #define DOUT_PORT_1     P5      //MOLEX_P71/P73
  70      =1  #define DOUT_PORT_2     P5
  71      =1  #define DOUT_PORT_3     P5
  72      =1  #define ADDRESS_PORT    P3
  73      =1  sbit    UART_READ_DISABLE               =       P0^2;   //read max3086 enable(active low)
  74      =1  sbit    UART_WRITE_ENABLE               =       P0^3;   //write max3086 enable(active high)
  75      =1  */
  76      =1  //C8051F020KIT SETUP::::::::::::::::::::::::::::
  77      =1  
  78      =1  
  79      =1  
  80      =1  // rx string  "<aa,bb,cc,dd,ee,ff,..>"
  81      =1  #define RX_BUFFER_SIZE  16
  82      =1  #define TX_BUFFER_SIZE  16
  83      =1  #define RX_START_FRAME  '>'             //pc(tx)->mcu(rx)
  84      =1  #define RX_STOP_FRAME   10              //'\n'
  85      =1  // #define RX_STOP_FRAME        '>'             //pc(tx)->mcu(rx)
  86      =1  #define TX_START_FRAME  '#'             //pc(rx)<-mcu(tx)
  87      =1  #define TX_STOP_FRAME   10              //'\n'
  88      =1  // #define TX_STOP_FRAME        '}'             //pc(rx)<-mcu(tx)
  89      =1  
  90      =1  /*var128 is a variables array of 128 bytes which is a buffer for scratch pad memory area*/
  91      =1          
  92      =1  #define VAR128_VADDR    0               
  93      =1  #define VAR128_SN_0             1               
  94      =1  #define VAR128_SN_1             2       
  95      =1  #define VAR128_SN_2             3
  96      =1  #define VAR128_SN_3             4
  97      =1  
  98      =1  
  99      =1  //P0 uart and other io
 100      =1  //P1 ADC1(x8)+ADC0(x8)+DAC(x2)  //16 ain , 2 aout
 101      =1  //P2 GPIO in                                    //24 din
 102      =1  //P3 GPIO in
 103      =1  //P4 GPIO in
 104      =1  //P5 GPIO out                                   //24 dout
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 7   

 105      =1  //P6 GPIO out
 106      =1  //P7 GPIO out
 107      =1  // #define LOWBYTE(v)   ((unsigned char) (v))
 108      =1  // #define HIGHBYTE(v)  ((unsigned char) (((unsigned int) (v)) >> 8))
 109      =1  /*void test (void)  {
 110      =1          // unsigned int  x;
 111      =1          // unsigned char cl, ch;
 112      =1          // cl = LOWBYTE(x);
 113      =1          // ch = HIGHBYTE(x);
 114      =1  }*/
 115      =1  
 116      =1  
 117      =1  
 118      =1  /*void test1 (void)  {
 119      =1    BYTELOW(x) = BYTEHIGH(x);
 120      =1    BYTEHIGH (x) = 5;
 121      =1  }*/
 122      =1  
 123      =1  typedef unsigned char   u8;
 124      =1  typedef signed   char   s8;
 125      =1  typedef unsigned int    u16;
 126      =1  typedef signed   int    s16;
 127      =1  typedef unsigned long   u32;
 128      =1  typedef signed   long   s32;
 129      =1  
 130      =1  
 131      =1  typedef struct bufType{
 132      =1          u8 idx;
 133      =1          u8 size;
 134      =1          u8 sum;
 135      =1          u8 buf[32];
 136      =1          
 137      =1  }bufType;
 138      =1  typedef struct msgType{
 139      =1          u8 xor;
 140      =1          u8 size;
 141      =1          u8 addr;
 142      =1          u8 type;
 143      =1          u8 idx;
 144      =1          u8 val;
 145      =1          u8 t1;
 146      =1          u8 t2;
 147      =1  }msgType;
 148      =1  typedef struct timeType{
 149      =1          u16 us;
 150      =1          u16 ms;
 151      =1          u16 sec;
 152      =1  }timeType;
 153      =1  typedef struct timerType{
 154      =1          u16 ms;
 155      =1          u16     sec;
 156      =1  }timerType;
 157      =1  
 158      =1  
 159      =1  
 160      =1  
 161      =1  // typedef struct stageType{
 162      =1          // u8 mode;     //function
 163      =1          // u8 out;              //pointer for output (using u8 index)
 164      =1          // u8 in;               //pointer for input (using u8 index)
 165      =1          // u8 num;              //u8 variable
 166      =1          // u8 sec;              //time parameter in seconds
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 8   

 167      =1  // }stageType;
 168      =1  // typedef struct procType{     
 169      =1          // stageType stages[STAGES];
 170      =1          //// u8 title;
 171      =1          // u8                   idx_stage;      //pointing the next stage to execute
 172      =1          // u8                   idx_size;       //actual number of stages
 173      =1          // u8                   mode;
 174      =1          // timerType    timer;
 175      =1          // u8                   run;
 176      =1          
 177      =1  // }procType;
 178      =1  
 179      =1  
 180      =1  
 181      =1  /*##########################################################################*/
 182      =1  //variables:
 183      =1  
 184      =1  
 185      =1  
 186      =1  // sbit RE              =       P0^2;                           //read max3086 enable(active low)
 187      =1  // sbit DE              =       P0^3;                           //write max3086 enable(active high)
 188      =1  
 189      =1  // static u8 VIRTUAL_ADDRESS;
 190      =1  static bufType rx;
 191      =1  static msgType rxmsg;
 192      =1  static bufType tx;
 193      =1  static msgType txmsg;           
 194      =1  static timeType time;           
 195      =1  
 196      =1  
 197      =1  static u16 dout_timeout_sec[MAX_DIGITAL_PINS];
 198      =1  static u16 dout_timeout_ms[MAX_DIGITAL_PINS];
 199      =1  static u8 var128[128];
 200      =1  static bit flag_1sec;   //stores array of 40-bits 
 201      =1  // static u8 dht22[40]; //stores array of 40-bits 
 202      =1  
 203      =1  
 204      =1  
 205      =1  /*##########################################################################*/
 206      =1  // function prototypes:
 207      =1  
 208      =1  void Tx_init    ();
 209      =1  void Tx_set             (u8 i,u8 var);
 210      =1  void Rx_init    ();
 211      =1  void Loopback   ();
 212      =1  void SendConstMsg(u16 *pmsg);
 213      =1  
 214      =1  void Rxmsg_dout_wr      (/*rxmsg*/);
 215      =1  u16 Conv_u8_to_str      (u8 val);
 216      =1  u8      Conv_str_to_u8  (u16 str2);
 217      =1  u8      Conv_ascii_to_int               (u8 ch);
 218      =1  u8      Conv_int_to_ascii(u8 prm);      //low 4bit hex integer converted to string char, prm=[0x0..0xF]
 219      =1  u8      Rx_get_u8       (u8 i)  ;
 220      =1  
 221      =1  bit     get_din (u8 idx);
 222      =1  u16     get_ain (u8 ch,u8 gain);
 223      =1  void    set_aout(u8 ch, u16 val);
 224      =1  void    set_dout(u8 idx,u8 val);
 225      =1  void    set_dout_mode(u8 ch, u8 mode);
 226      =1  
 227      =1  void    ADC0_set_input_pair     (u8 ch,u8 val);
 228      =1  
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 9   

 229      =1  // FLASH read/write/erase routines
 230      =1  void FLASH_ByteWrite (u16 addr, u8 byte, bit SFLE);
 231      =1  u8       FLASH_ByteRead (u16 addr, bit SFLE);
 232      =1  void FLASH_PageErase (u16 addr, bit SFLE);
 233      =1  void FLASH_Save();
 234      =1  void FLASH_Load();
 235      =1  
 236      =1  
 237      =1  #endif
 238      =1  
 239      =1  
   2          
   3          
   4          
   5          
   6          
   7          /*##########################################################################*/// functions:
   8          
   9          void SendConstMsg(u16 *pmsg){   //send err_msg_x
  10   1              // long code * idata powtab;      /* ptr in idata to code long */
  11   1              u8 code * pmsg2=pmsg;                   //por to u8 in xdata
  12   1              // u8 code * xdata pmsg2=pmsg;                  //por to u8 in xdata
  13   1      
  14   1              Tx_init();      //resets tx_buffer[] and tx_idx
  15   1              if(pmsg2!=NULL){//copy from char[] in code 
  16   2                      while((pmsg2[tx.idx]!=0)&&(tx.idx<TX_BUFFER_SIZE-1)){
  17   3                              tx.buf[tx.idx+1]=pmsg2[tx.idx];
  18   3                              tx.idx++;
  19   3                      }               
  20   2                      tx.buf[++tx.idx]=TX_STOP_FRAME;
  21   2                      tx.buf[0]=TX_START_FRAME;
  22   2                      tx.size=tx.idx;
  23   2                      tx.idx=0;       //transmition will use tx.idx )in TI0 case
  24   2                      TI0=1;          //start transmition
  25   2              }
  26   1      }//SendConstMsg()
  27          
  28          void func101(){ //build str with time data to tx.buf
  29   1              Tx_init();      //resets tx_buffer[] and tx_idx 
  30   1              while((rx.buf[tx.idx]!=RX_STOP_FRAME)&&(tx.idx<TX_BUFFER_SIZE)){
  31   2                      tx.buf[tx.idx]=rx.buf[tx.idx];
  32   2                      tx.idx++;
  33   2              }//while()      
  34   1              tx.buf[tx.idx]=TX_STOP_FRAME;
  35   1              tx.buf[0]=TX_START_FRAME;
  36   1              tx.size=tx.idx+1;
  37   1              tx.idx=0;       //transmition will use tx.idx )in TI0 case
  38   1              TI0=1;          //start transmition
  39   1      
  40   1      }//func101()
  41          
  42          void Loopback(){//loop back input or send msg
  43   1              u8 i;
  44   1              Tx_init();      //resets tx_buffer[] and tx_idx 
  45   1              for(i=0;i<RX_BUFFER_SIZE;i++){
  46   2                      tx.buf[i]=rx.buf[i];
  47   2                      if(tx.buf[i]==RX_STOP_FRAME){
  48   3                              break;
  49   3                      }
  50   2              }
  51   1              tx.buf[i]=TX_STOP_FRAME;
  52   1              tx.buf[0]=TX_START_FRAME;
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 10  

  53   1              tx.size=i+1;
  54   1              tx.idx=0;       //transmition will use tx.idx )in TI0 case
  55   1              TI0=1;          //start transmition
  56   1      
  57   1      }//Loopback
  58                  
  59          void Rxmsg_dout_wr(/*rxmsg*/){
  60   1      
  61   1              if(rxmsg.idx<MAX_DIGITAL_PINS){         
  62   2                      dout_timeout_sec[rxmsg.idx]=((u16)rxmsg.t1)<<8;
  63   2                      dout_timeout_sec[rxmsg.idx]+=rxmsg.t2;  
  64   2                      set_dout(rxmsg.idx,rxmsg.val);  
  65   2              }
  66   1      }//Rxmsg_dout_wr()
  67                  
  68          u8      Rx_get_u8(u8 i){                                //returns "FF" ascii value from tx_buffer start at index
  69   1              
  70   1              return (Conv_ascii_to_int(rx.buf[i])<<4)+(Conv_ascii_to_int(rx.buf[i+1]));
  71   1      }
  72          
  73          void Tx_set(u8 i,u8 var){               //set tx.buf after converting u8 to "xx" str
  74   1              u16 prm=Conv_u8_to_str(var);    
  75   1              tx.buf[i]=BYTEHIGH(prm);
  76   1              tx.buf[i+1]=BYTELOW(prm);
  77   1      }
  78          
  79          u8      Conv_ascii_to_int(u8 ch){       //converts ascii['0',..'9','A',..'F'] to int[0..15], returns 0xff if failed
  80   1              
  81   1              if(ch>='0' && ch<='9'){
  82   2                      return ch-'0';
  83   2              }else if(ch>='A' && ch<='F'){
  84   2                      return (ch-'A'+10);             
  85   2              }else
  86   1                      return 0xff;
  87   1      }
  88          
  89          u8      Conv_int_to_ascii(u8 prm){      //low 4bit hex integer converted to string char, prm=[0x0..0xF]
  90   1              if(prm<10){     //prm=[0,1,2,..9]
  91   2                      prm+='0';
  92   2              }else{                  //prm=[0xA,0xB,0xC,..0xF]
  93   2                      prm+=('A'-10);
  94   2              }
  95   1              return prm;
  96   1      }
  97          
  98          u8      Conv_str_to_u8(u16 str2){       //inputs 2 ascii bytes outputs u8 integer (number2string)
  99   1              
 100   1              u16 str=str2;
 101   1              u8 ret=0;
 102   1              u8 prm1=BYTEHIGH(str);  //read 1st ascii
 103   1              u8 prm2=BYTELOW(str);   //read 2nd ascii
 104   1              
 105   1              prm1=Conv_ascii_to_int(prm1);
 106   1              prm2=Conv_ascii_to_int(prm2);
 107   1              
 108   1              ret=prm1<<4+prm2;
 109   1              return ret;
 110   1      }
 111          
 112          u16 Conv_u8_to_str(u8 val){             //input u8 value output 2 ascii bytes (number2string)
 113   1              u8 prm1=val&0x0f;
 114   1              u8 prm2=(val&0xf0)>>4;
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 11  

 115   1              u16 ret=0x0;
 116   1              
 117   1              // if(prm1<10){ //prm=[0,1,2,..9]
 118   1                      // prm1+='0';
 119   1              // }else{                       //prm=[0xA,0xB,0xC,..0xF]
 120   1                      // prm1+=('A'-10);
 121   1              // }
 122   1              prm1=Conv_int_to_ascii(prm1);
 123   1              prm2=Conv_int_to_ascii(prm2);
 124   1              
 125   1              // if(prm2>10){ //prm=[0xA,0xB,0xC,..0xF]
 126   1                      // prm2+=('A'-10);
 127   1              // }else{                       //prm=[0,1,2,..9]
 128   1                      // prm2+='0';
 129   1              // }
 130   1      
 131   1              BYTEHIGH(ret) = prm2;
 132   1              BYTELOW(ret) = prm1;
 133   1              
 134   1              return ret;
 135   1      }
 136          
 137          void Rx_init(void){
 138   1              
 139   1              for(rx.idx=0;rx.idx<RX_BUFFER_SIZE;rx.idx++){
 140   2                      rx.buf[rx.idx]=0;
 141   2              }
 142   1              rx.idx=0;
 143   1              // rxmsg.
 144   1      }
 145          
 146          void Tx_init(void){
 147   1              
 148   1              for(tx.idx=0;tx.idx<RX_BUFFER_SIZE;tx.idx++){
 149   2                      tx.buf[tx.idx]=0;
 150   2              }
 151   1              tx.idx=0;
 152   1      }
 153          
 154          void Buf_init(u16 *ptr){
 155   1              
 156   1              bufType xdata  *bufp=ptr; //point to bufType in xdata
 157   1              
 158   1              for(bufp->idx=0;bufp->idx<RX_BUFFER_SIZE;bufp->idx++){
 159   2                      bufp->buf[bufp->idx]=0;
 160   2              }
 161   1              bufp->idx=0;
 162   1      }
 163          
 164          
 165          void FLASH_PageErase (u16 addr, bit SFLE){
 166   1      //-----------------------------------------------------------------------------
 167   1      // FLASH_PageErase
 168   1      //-----------------------------------------------------------------------------
 169   1      //
 170   1      // This routine erases the FLASH page containing the linear FLASH address
 171   1      // <addr>.
 172   1      //
 173   1         bit EA_SAVE = EA;                   // preserve EA
 174   1         char xdata * data pwrite;           // FLASH write pointer
 175   1      
 176   1         EA = 0;                             // disable interrupts
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 12  

 177   1      
 178   1         pwrite = (char xdata *) addr;
 179   1      
 180   1         FLSCL |= 0x01;                      // enable FLASH writes/erases
 181   1         PSCTL |= 0x03;                      // PSWE = 1; PSEE = 1
 182   1      
 183   1         if (SFLE) {
 184   2            PSCTL |= 0x04;                   // set SFLE
 185   2         }
 186   1      
 187   1         *pwrite = 0;                        // initiate page erase
 188   1      
 189   1         if (SFLE) {
 190   2            PSCTL &= ~0x04;                  // clear SFLE
 191   2         }
 192   1      
 193   1         PSCTL &= ~0x03;                     // PSWE = 0; PSEE = 0
 194   1         FLSCL &= ~0x01;                     // disable FLASH writes/erases
 195   1      
 196   1         EA = EA_SAVE;                       // restore interrupts
 197   1      }
 198          
 199          void FLASH_ByteWrite(u16 addr,u8 byte, bit SFLE){
 200   1      //-----------------------------------------------------------------------------
 201   1      // FLASH_ByteWrite
 202   1      //-----------------------------------------------------------------------------
 203   1      //
 204   1      // This routine writes <byte> to the linear FLASH address <addr>.
 205   1      // Linear map is decoded as follows:
 206   1      // Linear Address       Device Address
 207   1      // ------------------------------------------------
 208   1      // 0x00000 - 0x0FFFF    0x0000 - 0xFFFF
 209   1      //
 210   1         bit EA_SAVE = EA;                   // preserve EA
 211   1         char xdata * data pwrite;           // FLASH write pointer
 212   1      
 213   1         EA = 0;                             // disable interrupts
 214   1      
 215   1         pwrite = (char xdata *) addr;
 216   1      
 217   1         FLSCL |= 0x01;                      // enable FLASH writes/erases
 218   1         PSCTL |= 0x01;                      // PSWE = 1
 219   1      
 220   1         if (SFLE) {
 221   2            PSCTL |= 0x04;                   // set SFLE
 222   2         }
 223   1      
 224   1         *pwrite = byte;                     // write the byte
 225   1      
 226   1         if (SFLE) {
 227   2            PSCTL &= ~0x04;                  // clear SFLE
 228   2         }
 229   1      
 230   1         PSCTL &= ~0x01;                     // PSWE = 0
 231   1         FLSCL &= ~0x01;                     // disable FLASH writes/erases
 232   1      
 233   1         EA = EA_SAVE;                       // restore interrupts
 234   1      }
 235          
 236          u8       FLASH_ByteRead (u16 addr,bit SFLE){
 237   1      //-----------------------------------------------------------------------------
 238   1      // FLASH_ByteRead
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 13  

 239   1      //-----------------------------------------------------------------------------
 240   1      //
 241   1      // This routine reads a <byte> from the linear FLASH address <addr>.
 242   1      //
 243   1         bit EA_SAVE = EA;                   // preserve EA
 244   1         u8 code * data pread;             // FLASH read pointer
 245   1         u8 byte;
 246   1      
 247   1         EA = 0;                             // disable interrupts
 248   1      
 249   1         pread = (u8 code *) addr;
 250   1      
 251   1         if (SFLE) {
 252   2            PSCTL |= 0x04;                   // set SFLE
 253   2         }
 254   1      
 255   1         byte = *pread;                      // read the byte
 256   1      
 257   1         if (SFLE) {
 258   2            PSCTL &= ~0x04;                  // clear SFLE
 259   2         }
 260   1      
 261   1         EA = EA_SAVE;                       // restore interrupts
 262   1      
 263   1         return byte;
 264   1      }
 265          
 266          void FLASH_Save(){
 267   1              
 268   1              u8 i;
 269   1              
 270   1              FLASH_PageErase(0,1);
 271   1              for(i=0;i<128;i++){
 272   2                      FLASH_ByteWrite(i,var128[i],1);
 273   2              }
 274   1              
 275   1      
 276   1      }
 277          
 278          void FLASH_Load(){
 279   1              u8 i;
 280   1              
 281   1              for(i=0;i<128;i++){
 282   2                      var128[i]=FLASH_ByteRead(i,1);
 283   2              }       
 284   1      }
 285          
 286          
 287          void ADC0_set_diff(u8 ch,u8 mode){//single-ended mode=0, differential mode=1
 288   1              u8 cnt;
 289   1              
 290   1              if((ch>=0)&&(ch<=7)){
 291   2                      switch(ch){
 292   3                              case 0:
 293   3                              case 1:
 294   3                                      if(!mode){AMX0CF&=~0x01;}       //Bit0=0: AIN0, AIN1 are independent single-ended inputs
 295   3                                      else{AMX0CF|=0x01;}             //Bit0=1: AIN0, AIN1 are (respectively) +, - differential input pair
 296   3                              break;
 297   3                              case 2:
 298   3                              case 3:
 299   3                                      if(!mode){AMX0CF&=~0x02;}       //Bit1=0: AIN2, AIN3 are independent single-ended inputs
 300   3                                      else{AMX0CF|=0x02;}             //Bit1=1: AIN2, AIN3 are (respectively) +, - differential input pair
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 14  

 301   3                              break;
 302   3                              case 4:
 303   3                              case 5:                 
 304   3                                      if(!mode){AMX0CF&=~0x04;}       //Bit2=0: AIN4, AIN5 are independent single-ended inputs
 305   3                                      else{AMX0CF|=0x04;}             //Bit2=1: AIN4, AIN5 are (respectively) +, - differential input pair                            
 306   3                              break;
 307   3                              case 6:
 308   3                              case 7:
 309   3                                      if(!mode){AMX0CF&=~0x08;}       //Bit3=0: AIN6, AIN7 are independent single-ended inputs
 310   3                                      else{AMX0CF|=0x08;}             //Bit3=1: AIN6, AIN7 are (respectively) +, - differential input pair                            
 311   3                              break;
 312   3                      }//switch(ch)   
 313   2              }//if((ch>=0)&&(cn<=7)){
 314   1      
 315   1              //set_dout(x,1) //test delay
 316   1              for(cnt=5;cnt;cnt--){}  //minimum settling time delay of 1[ns]
 317   1              //set_dout(x,0) //test delay
 318   1      }
 319          
 320          void set_dout(u8 idx,u8 val){//dout[0..23] *digital outputs     
 321   1              u8 bitmask;
 322   1              if(idx<MAX_DIGITAL_PINS){
 323   2                      if(idx>=0 && idx<=7){
 324   3                              // digital_port_conf|=(0x01<<0);        //set Digital port0 as dout 
 325   3                              bitmask=0x01<<(idx-0);          
 326   3                              if(val) {DIG_PORT_0 &= ~bitmask;}//set to GND
 327   3                              else    {DIG_PORT_0 |= bitmask;} //set to high-Z
 328   3                      }
 329   2                      else if(idx>=8 && idx<=15){
 330   3                              // digital_port_conf|=(0x01<<1);        //set Digital port1 as dout 
 331   3                              bitmask=0x01<<(idx-8);          
 332   3                              if(val) {DIG_PORT_1 &= ~bitmask;}//set to GND
 333   3                              else    {DIG_PORT_1 |=bitmask;} //set to high-Z
 334   3                      }
 335   2                      else if(idx>=16 && idx<=23){
 336   3                              // digital_port_conf|=(0x01<<2);        //set Digital port2 as dout 
 337   3                              bitmask=0x01<<(idx-16);         
 338   3                              if(val) {DIG_PORT_2 &= ~bitmask;}//set to GND
 339   3                              else    {DIG_PORT_2 |=bitmask;} //set to high-Z
 340   3                      }
 341   2                      else if(idx>=24 && idx<=31){
 342   3                              // digital_port_conf|=(0x01<<3);        //set Digital port3 as dout 
 343   3                              bitmask=0x01<<(idx-24);         
 344   3                              if(val) {DIG_PORT_3 &= ~bitmask;}//set to GND
 345   3                              else    {DIG_PORT_3 |=bitmask;} //set to high-Z
 346   3                      }
 347   2                      else if(idx>=32 && idx<=39){
 348   3                              // digital_port_conf|=(0x01<<4);        //set Digital port4 as dout                     
 349   3                              bitmask=0x01<<(idx-32);         
 350   3                              if(val) {DIG_PORT_4 &= ~bitmask;}//set to GND
 351   3                              else    {DIG_PORT_4 |=bitmask;} //set to high-Z
 352   3                      }
 353   2                      else if(idx>=40 && idx<=47){
 354   3                              // digital_port_conf|=(0x01<<5);        //set Digital port5 as dout                     
 355   3                              bitmask=0x01<<(idx-40);         
 356   3                              if(val) {DIG_PORT_5 &= ~bitmask;}//set to GND
 357   3                              else    {DIG_PORT_5 |=bitmask;} //set to high-Z
 358   3                      }
 359   2                      
 360   2                      
 361   2              }
 362   1      }//set_dout()
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 15  

 363          
 364          void set_aout(u8 ch, u16 val){
 365   1              
 366   1              u8 low  =BYTELOW(val);
 367   1              u8 high =0x0F&BYTEHIGH(val);
 368   1              
 369   1              switch(ch){
 370   2                      case 0: {//DAC0
 371   3                              DAC0L=low;
 372   3                              DAC0H=high;                     
 373   3                      }break;
 374   2                      case 1: {//DAC1
 375   3                              DAC1L=low;
 376   3                              DAC1H=high;                                                     
 377   3                      }break; 
 378   2              }
 379   1              
 380   1      }
 381          
 382          bit  get_din(u8 idx){   
 383   1              u8 bitmask;
 384   1              if(idx<MAX_DIGITAL_PINS){
 385   2                      if(idx>=0 && idx<=7){                   //DIG_PORT_0
 386   3                              // digital_port_conf&=~(0x01<<0);       //set Digital port0 as din                      
 387   3                              bitmask=0x01<<(idx-0);          
 388   3                              DIG_PORT_0=0x0; //discharge 
 389   3                              DIG_PORT_0=0xff;//return to open-drain
 390   3                              if(DIG_PORT_0&bitmask) { return 1;} 
 391   3                                      else {return 0;}
 392   3                      }
 393   2                      else if(idx>=8 && idx<=15){             //DIG_PORT_1
 394   3                              // digital_port_conf&=~(0x01<<1);       //set Digital port1 as din      
 395   3                              bitmask=0x01<<(idx-8);          
 396   3                              DIG_PORT_1=0x0; //discharge 
 397   3                              DIG_PORT_1=0xff;//return to open-drain
 398   3                              if(DIG_PORT_1&bitmask) { return 1;} 
 399   3                                      else {return 0;}
 400   3                      }
 401   2                      else if(idx>=16 && idx<=23){    //DIG_PORT_2
 402   3                              // digital_port_conf&=~(0x01<<2);       //set Digital port2 as din                      
 403   3                              bitmask=0x01<<(idx-16);         
 404   3                              DIG_PORT_2=0x0; //discharge 
 405   3                              DIG_PORT_2=0xff;//return to open-drain
 406   3                              if(DIG_PORT_2&bitmask) { return 1;} 
 407   3                                      else {return 0;}
 408   3                      }
 409   2                      else if(idx>=24 && idx<=31){    //DIG_PORT_3
 410   3                              // digital_port_conf&=~(0x01<<3);       //set Digital port3 as din                      
 411   3                              bitmask=0x01<<(idx-24);         
 412   3                              DIG_PORT_3=0x0; //discharge 
 413   3                              DIG_PORT_3=0xff;//return to open-drain
 414   3                              if(DIG_PORT_3&bitmask) { return 1;} 
 415   3                                      else {return 0;}
 416   3                      }
 417   2                      else if(idx>=32 && idx<=39){    //DIG_PORT_4
 418   3                              // digital_port_conf&=~(0x01<<4);       //set Digital port4 as din                      
 419   3                              bitmask=0x01<<(idx-32);         
 420   3                              DIG_PORT_4=0x0; //discharge 
 421   3                              DIG_PORT_4=0xff;//return to open-drain
 422   3                              if(DIG_PORT_4&bitmask) { return 1;} 
 423   3                                      else {return 0;}
 424   3                      }
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 16  

 425   2                      else if(idx>=40 && idx<=47){    //DIG_PORT_5
 426   3                              // digital_port_conf&=~(0x01<<5);       //set Digital port5 as din                                      
 427   3                              bitmask=0x01<<(idx-40);         
 428   3                              DIG_PORT_5=0x0; //discharge 
 429   3                              DIG_PORT_5=0xff;//return to open-drain
 430   3                              if(DIG_PORT_5&bitmask) { return 1;} 
 431   3                                      else {return 0;}
 432   3                      }
 433   2              }
 434   1              return 0;
 435   1      
 436   1      }//get_din()
 437          
 438          bit  get_dout(u8 idx){  
 439   1              u8 bitmask;
 440   1              if(idx<MAX_DIGITAL_PINS){
 441   2                      if(idx>=0 && idx<=7){                   //DIG_PORT_0
 442   3                              // digital_port_conf&=~(0x01<<0);       //set Digital port0 as din                      
 443   3                              bitmask=0x01<<(idx-0);          
 444   3                              // DIG_PORT_0=0x0;      //discharge 
 445   3                              // DIG_PORT_0=0xff;//return to open-drain
 446   3                              if(DIG_PORT_0&bitmask) { return 1;} 
 447   3                                      else {return 0;}
 448   3                      }
 449   2                      else if(idx>=8 && idx<=15){             //DIG_PORT_1
 450   3                              // digital_port_conf&=~(0x01<<1);       //set Digital port1 as din      
 451   3                              bitmask=0x01<<(idx-8);          
 452   3                              // DIG_PORT_1=0x0;      //discharge 
 453   3                              // DIG_PORT_1=0xff;//return to open-drain
 454   3                              if(DIG_PORT_1&bitmask) { return 1;} 
 455   3                                      else {return 0;}
 456   3                      }
 457   2                      else if(idx>=16 && idx<=23){    //DIG_PORT_2
 458   3                              // digital_port_conf&=~(0x01<<2);       //set Digital port2 as din                      
 459   3                              bitmask=0x01<<(idx-16);         
 460   3                              // DIG_PORT_2=0x0;      //discharge 
 461   3                              // DIG_PORT_2=0xff;//return to open-drain
 462   3                              if(DIG_PORT_2&bitmask) { return 1;} 
 463   3                                      else {return 0;}
 464   3                      }
 465   2                      else if(idx>=24 && idx<=31){    //DIG_PORT_3
 466   3                              // digital_port_conf&=~(0x01<<3);       //set Digital port3 as din                      
 467   3                              bitmask=0x01<<(idx-24);         
 468   3                              // DIG_PORT_3=0x0;      //discharge 
 469   3                              // DIG_PORT_3=0xff;//return to open-drain
 470   3                              if(DIG_PORT_3&bitmask) { return 1;} 
 471   3                                      else {return 0;}
 472   3                      }
 473   2                      else if(idx>=32 && idx<=39){    //DIG_PORT_4
 474   3                              // digital_port_conf&=~(0x01<<4);       //set Digital port4 as din                      
 475   3                              bitmask=0x01<<(idx-32);         
 476   3                              // DIG_PORT_4=0x0;      //discharge 
 477   3                              // DIG_PORT_4=0xff;//return to open-drain
 478   3                              if(DIG_PORT_4&bitmask) { return 1;} 
 479   3                                      else {return 0;}
 480   3                      }
 481   2                      else if(idx>=40 && idx<=47){    //DIG_PORT_5
 482   3                              // digital_port_conf&=~(0x01<<5);       //set Digital port5 as din                                      
 483   3                              bitmask=0x01<<(idx-40);         
 484   3                              // DIG_PORT_5=0x0;      //discharge 
 485   3                              // DIG_PORT_5=0xff;//return to open-drain
 486   3                              if(DIG_PORT_5&bitmask) { return 1;} 
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 17  

 487   3                                      else {return 0;}
 488   3                      }
 489   2              }
 490   1              return 0;
 491   1      
 492   1      }//get_din()
 493          
 494          u16  get_ain_adc0(u8 ch0,u8 gain){      //read adc0 channel
 495   1              u16 reg16=0L;
 496   1              // u8 i;
 497   1              // u16 timeout=1;
 498   1              // u8 low=0;
 499   1              // u8 high=0;
 500   1              ADC0CF = (SYSCLK/SARCLK) << 3;     // ADC conversion clock = 2.5MHz     
 501   1              ADC0CF |= gain;                     // PGA gain = 1 ( default)
 502   1              if((ch0>=0)&&(ch0<=8)){//configure analog input pair as single-ended or differential 
 503   2                      // AD0EN=1;     //enable adc0           
 504   2                      AMX0SL=ch0;             
 505   2                      AD0INT=0;
 506   2                      AD0INT=0;
 507   2                      // for(reg16=0;reg16<1000;i++); //delay
 508   2                      AD0BUSY=1;
 509   2                      // while(!AD0INT&&timeout++){};
 510   2                      while(!AD0INT){};
 511   2                      AD0INT=0;       
 512   2                      reg16=ADC0;             
 513   2                      // AD0EN=0;     //disable adc0
 514   2                      
 515   2              }//if((ch<=0)&&(cn<=7))
 516   1              return reg16;   
 517   1      }//get_ain_adc0()
 518          
 519          u8   get_ain_adc1(u8 ch1,u8 gain){      //read adc0 channel
 520   1              u16 reg16=0L;
 521   1              // u16 timeout=1;
 522   1              // u8 low=0;
 523   1              // u8 high=0;
 524   1              ADC1CF = (SYSCLK/SARCLK) << 3;     // ADC conversion clock = 2.5MHz     
 525   1              ADC1CF |= gain;                     // PGA gain = 1 ( default)  
 526   1              
 527   1              // sbit AD0EN     =   ADC0CN ^ 7;      /* ADC 0 ENABLE                              */
 528   1              // sbit AD0TM     =   ADC0CN ^ 6;      /* ADC 0 TRACK MODE                          */
 529   1              // sbit AD0INT    =   ADC0CN ^ 5;      /* ADC 0 CONVERISION COMPLETE INTERRUPT FLAG */
 530   1              // sbit AD0BUSY   =   ADC0CN ^ 4;      /* ADC 0 BUSY FLAG                           */
 531   1              // sbit AD0CM1    =   ADC0CN ^ 3;      /* ADC 0 START OF CONVERSION MODE BIT 1      */
 532   1              // sbit AD0CM0    =   ADC0CN ^ 2;      /* ADC 0 START OF CONVERSION MODE BIT 0      */
 533   1              // sbit AD0WINT   =   ADC0CN ^ 1;      /* ADC 0 WINDOW COMPARE INTERRUPT FLAG       */
 534   1              // sbit AD0LJST   =   ADC0CN ^ 0;      /* ADC 0 RIGHT JUSTIFY DATA BIT              */
 535   1      
 536   1              
 537   1              if((ch1>=0)&&(ch1<=7)){//only x8 single-ended 
 538   2      
 539   2                      // ADC1CN|=0x80;        //set adc1 enable
 540   2                      AMX1SL=ch1;
 541   2                      ADC1CN&=~0x30;  //ADC1INT=0  
 542   2                      ADC1CN&=~0x30;  //ADC1INT=0  
 543   2                      ADC1CN|=0x10;   //AD1BUSY=1
 544   2                      
 545   2                      
 546   2                      // while(!AD0INT&&timeout++){};
 547   2                      // while(!AD0INT){};
 548   2                      while(!(ADC1CN&0x30)){};
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 18  

 549   2                      // AD0INT=0;
 550   2                      ADC1CN&=~0x30;  //ADC1INT=0  
 551   2                      
 552   2                      // BYTEHIGH(reg16)=0x00;
 553   2                      BYTELOW(reg16)=ADC1;
 554   2                      
 555   2                      // AD0EN=0;     //disable adc0
 556   2                      // ADC1CN&=~0x80;       //set adc1 enable
 557   2                      
 558   2                      // set_aout(0,adc0);            
 559   2                      // low=((unsigned char) (((unsigned int) (adc0)) >> 8));
 560   2                      // high=((unsigned char) (adc0));                               
 561   2                      // low=BYTELOW(adc0);
 562   2                      // high=BYTEHIGH(adc0);
 563   2                      // BYTEHIGH(adc0)=      ((unsigned char) (((unsigned int) (ADC0)) >> 8));
 564   2                      // BYTELOW(adc0)        =       ((unsigned char) (ADC0));
 565   2              }//if((ch<=0)&&(cn<=7))
 566   1              return reg16;   
 567   1      }//get_ain_adc0()
 568          
 569          u16  get_ain(u8 ch,u8 gain){
 570   1              u16 reg16=0L;
 571   1              
 572   1              if(ch>=0&&ch<=8){       //read adc0.x as single-ended analog input
 573   2                      ADC0_set_diff(ch,FALSE);
 574   2                      reg16=get_ain_adc0(ch,gain);
 575   2              }
 576   1              else if (ch==9){        //read AIN0-AIN1 (ADC0) as differential analog input
 577   2                      ch=0;
 578   2                      ADC0_set_diff(ch,TRUE); 
 579   2                      reg16=get_ain_adc0(ch,gain);
 580   2              }
 581   1              else if (ch==10){       //read AIN2-AIN3 (ADC0) as differential analog input
 582   2                      ch=2;
 583   2                      ADC0_set_diff(ch,TRUE); 
 584   2                      reg16=get_ain_adc0(ch,gain);
 585   2              }
 586   1              else if (ch==11){       //read AIN4-AIN5 (ADC0) as differential analog input
 587   2                      ch=4;
 588   2                      ADC0_set_diff(4,TRUE);  
 589   2                      reg16=get_ain_adc0(ch,gain);
 590   2              }
 591   1              else if (ch==12){       //read AIN6-AIN7 (ADC0) as differential analog input
 592   2                      ch=6;
 593   2                      ADC0_set_diff(6,TRUE);
 594   2                      reg16=get_ain_adc0(ch,gain);            
 595   2              }
 596   1              else if (ch>=13&&ch<=20){       //read AIN[0..7] (ADC1), single-ended
 597   2                      ch-=13; 
 598   2                      reg16=get_ain_adc1(ch,gain);
 599   2                              
 600   2              }
 601   1              else{
 602   2                      return 0xFFFF;
 603   2              }
 604   1              
 605   1              return reg16;
 606   1      }
 607          
 608          void set_pwm(u8 ch, u16 dc){//set pca0 variable - will update PCA0 on ISR
 609   1      
 610   1              switch(ch){
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 19  

 611   2                      case 0:{
 612   3                              // CR = 1;      // Start PCA counter
 613   3                              // pca0 = 65536 - (65536/100)*dc;       
 614   3                              // PCA0CPL0 = (dc & 0x00FF);
 615   3                              PCA0CPL0 = 0;
 616   3                              // PCA0CPH0 = (dc & 0xFF00)>>8;
 617   3                              PCA0CPH0 = 0;
 618   3                      }break;
 619   2                      case 1:{
 620   3                              // CR = 1;      // Start PCA counter
 621   3                              // pca0 = 65536 - (65536/100)*dc;       
 622   3                              // PCA0CPL1 = (dc & 0x00FF);
 623   3                              PCA0CPL1 = 0;
 624   3                              // PCA0CPH1 = (dc & 0xFF00)>>8;
 625   3                              PCA0CPH1 = 0;
 626   3                      }break;
 627   2                      case 2:{
 628   3                              CR = 1; // Start PCA counter
 629   3                              // pca0 = 65536 - (65536/100)*dc;       
 630   3                              PCA0CPL2 = (dc & 0x00FF);
 631   3                              PCA0CPH2 = (dc & 0xFF00)>>8;
 632   3                      }break;
 633   2      
 634   2                      }
 635   1      
 636   1              
 637   1      }
 638          
 639          
 640          
 641          
 642          /*##########################################################################*/// main
 643          
 644          void Main (void){               
 645   1              u16 i;
 646   1              
 647   1      
 648   1              // set_dout(8,0);
 649   1              
 650   1              {//initialization section
 651   2      
 652   2                      {//WatchDog Disable
 653   3                                      EA=0;
 654   3                                      WDTCN=0xDE;
 655   3                                      WDTCN=0xAD;
 656   3                      }
 657   2                      
 658   2                      {//XOSC
 659   3                              OSCXCN = 0x67;                          //XOSC Mode=Crystal oscillator mode, freq>6.7 MHZ 
 660   3                              
 661   3                              for(i=2000; i>0 ;i--);          //1ms delay(2MHZ Clock)
 662   3                                      
 663   3                              while(!(OSCXCN & 0x80));        //poll XTLVLD=>'1'              
 664   3                              OSCICN =0x08;                           //Clock Select = external osc
 665   3                      }       
 666   2                              
 667   2                      {//timers
 668   3                      
 669   3                              // TIMER3 - for dht22 and int_0 
 670   3                              // TMR3=TMR3RL=0;
 671   3                              // TMR3CN=0x00; 
 672   3                              // TMR3CN=0x04; //run timer3 when from inside int0 
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 20  

 673   3                              
 674   3                              
 675   3                              //TIMER4 - general clock, Timer4_ISR            
 676   3                              TMR4=RCAP4=-22118;      //0x5666        //1ms cycle
 677   3                              // TMR4=RCAP4=-SYSCLK/T4CLK;
 678   3                              CKCON|=0x40;                                            //set T4M=1 (timer4 is timer function and uses system clk)
 679   3                              
 680   3                              T4CON|=0x04; //set TR4 bit - start timer4
 681   3      
 682   3                              //TIMER1 - clock for uart0 
 683   3                      
 684   3                              CKCON|=0x10;                                            //set T1M=1 (timer1 uses system clk)                    
 685   3                              TMOD |=0x20;                                            //timer1 mode2 - 8bit autoreload .              
 686   3                              TH1=-SYSCLK/16L/BAUDRATE;                       // TH1=-12;                     
 687   3                              TL1=TH1;                                                        //reload                
 688   3                              TR1=1;                                                          //run timer1    
 689   3                      }
 690   2                      
 691   2                      {//UART0
 692   3                              //(2^SMOD0/32)*(SYSCLK*12^(T1M-1))/(256-TH1)
 693   3                              //TH1==256-(SYSCLK/16L)/BAUDRATE)
 694   3                              // T2CON &=~0x30;                       //set timer1 as a source clock (default)
 695   3                              PCON  |= 0x80;                          //set SMOD0=1, baud rate generator clock devider is 16
 696   3                              SCON0=0x50;                             //mode1: 8-Bit UART, Variable Baud Rate.
 697   3                              // UART_READ_DISABLE=UART_WRITE_ENABLE=FALSE;   //enable read
 698   3                              Rx_init();
 699   3                              Tx_init();
 700   3                              
 701   3                      }//UART0
 702   2                      
 703   2                      {//PORTS
 704   3                      
 705   3                      
 706   3                              // #define PORT_IN_P69                  P2              
 707   3                              // #define PORT_IN_DIP_SWITCH   P3
 708   3                              // #define PORT_OUT_P70                 P4                                      
 709   3                              // #define PORT_OUT_P71                 P5                              
 710   3                              // #define PORT_IN_P63                  P6                              
 711   3                              // #define PORT_IN_P68                  P7                      //rotation switches port        
 712   3      
 713   3                              
 714   3                              // P0MDOUT |=0x0d;                              //P0.0(TX0),P0.2(RE_),P0.3(DE) are push-pull. support GPRIO boards
 715   3                              // P0MDOUT =0x0d;                               //P0.0(TX0),P0.2(RE_),P0.3(DE) are push-pull. support GPRIO boards
 716   3                              P0MDOUT |= 0x01;                    // Set TX0(P0.0) port pin to push-pull
 717   3                      
 718   3                              //analog inputs P1(ADC1)
 719   3                              
 720   3                              P1MDOUT=0x0;    //set open-drain mode on P1
 721   3                              P1MDIN=0x0;             //set analog input mode
 722   3                              
 723   3                              // P1MDOUT |= 0x40;    //Enable P1.6 (LED) as push-pull output.                                 
 724   3                              //*digital inputs P3,P6,P7
 725   3                              //*digital outputs P2,P4,P5                     
 726   3                              // P2MDOUT=0x0; //set open-drain mode on P2
 727   3                              // P2MDOUT|=0x01;       //set P2.0 push-pull others are open-drain,  DIG_PORT_3 [24..31]
 728   3                              P3MDOUT=0x0;    //set open-drain mode on P3
 729   3                              P74OUT=0x00;    //set open-drain mode on P4,P5,P6,P7 
 730   3                              
 731   3                              P2=0xff;
 732   3                              P3=0xff;
 733   3                              P4=0xff;
 734   3                              P5=0xff;
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 21  

 735   3                              P6=0xff;
 736   3                              P7=0xff;                        
 737   3                              
 738   3                      }//PORTS
 739   2                      
 740   2                      {//PCA
 741   3                              // PCA0CN = 0x00;                      // Stop counter; clear all flags
 742   3                              // PCA0CPM0 = 0x00;                    // Module 0 = 16-bit PWM mode and in datasheet Table 23.2 -  pag
             -e 252 xxx
 743   3                              // PCA0CPM1 = 0x00;                    // Module 0 = 16-bit PWM mode and in datasheet Table 23.2 -  pag
             -e 252 xxx
 744   3                              // PCA0CPM2 = 0xC2;                    // Module 0 = 16-bit PWM mode and in datasheet Table 23.2 -  pag
             -e 252
 745   3                              // PCA0CPM3 = 0xC2;                    // Module 0 = 16-bit PWM mode and in datasheet Table 23.2 -  pag
             -e 252
 746   3                              // PCA0CPM4 = 0xC2;                    // Module 0 = 16-bit PWM mode and in datasheet Table 23.2 -  pag
             -e 252
 747   3                              
 748   3                              //// pca0 = 65536 - (65536 * 0.5);
 749   3                              //// PCA0CPL0 = (pca0 & 0x00FF);
 750   3                              //// PCA0CPH0 = (pca0 & 0xFF00)>>8;
 751   3                              
 752   3                              // pca0 = 0;
 753   3                              // PCA0CPL0 = 0;
 754   3                              // PCA0CPH0 = 0;
 755   3                              // PCA0CPL1 = 0;
 756   3                              // PCA0CPH1 = 0;
 757   3                              // PCA0CPL2 = 0;
 758   3                              // PCA0CPH2 = 0;
 759   3                              // PCA0CPL3 = 0;
 760   3                              // PCA0CPH3 = 0;
 761   3                              // PCA0CPL4 = 0;
 762   3                              // PCA0CPH4 = 0;
 763   3                              
 764   3                              
 765   3                              // CR = 1;      // Start PCA counter
 766   3                              
 767   3                      }//PCA
 768   2                      
 769   2                      {//INT0
 770   3                              // IT0=1;       //int_0 edge triggered interrupt in TCON register
 771   3                              // EX0=1;       //int_0 interrupt enabled       
 772   3                              
 773   3                      }//INT0
 774   2                              
 775   2                      {//cross-bar
 776   3                              XBR0=0x04;      //route TX0,RX0 to P0.0, P0.1   //ENABLED FOR C8051F020                 
 777   3                              // XBR1=0x04;   //route INT0 to P0.2
 778   3                              
 779   3                              // XBR0=0x24;   //route TX0,RX0 to P0.0, P0.1 + CEX0 , CEX1 for PCA0    
 780   3                              // XBR0=0x1C;   //route TX0,RX0 to P0.0, P0.1 + CEX0 , CEX1 and CEX2 (for PCA0)  to  P0.2, P0.3, P0.4   //
             -DISABLED FOR GPRIO
 781   3                              // XBR1=0x14;   //route INT0,INT1 to P0.4,P0.5 
 782   3                              // XBR1=0x04;   //route INT0 to P0.4  
 783   3                              // XBR2=0x40;   //enable cross-bar,enable week-pull-ups.        
 784   3                              XBR2=0xC0;      //enable cross-bar,disable week-pull-ups.       
 785   3                              
 786   3                              //enable PCA0 pins 
 787   3                              
 788   3                              // XBR2=0x40;   //enable cross-bar and week-pull-ups.   
 789   3                              
 790   3                      }/*cross-bar*/          
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 22  

 791   2                      
 792   2                      {//ADC[0..1] 
 793   3                              ADC0CN=0x80;    //set adc0 enable
 794   3                              ADC1CN=0x80;    //set adc1 enable
 795   3                              // ADC0CN = 0x00;               //00: ADC0 disabled(enabled when read), conversion initiated on AD0BUSY
 796   3                              REF0CN=0x07;            //VREF0 must externally connect to VREF , BIASE=REFBE=TEMPE='1' ,ADC[0..1] voltage refere
             -nce from VREF[0..1] pin accordingly.
 797   3                              ADC0CF = (SYSCLK/SARCLK) << 3;     // ADC conversion clock = 2.5MHz
 798   3                              ADC0CF |= 0x00;                     // PGA gain = 1 (default)
 799   3                              ADC1CF=0xfa;
 800   3                              // ADC1CF=(SYSCLK/SARCLK)<<3;
 801   3                              // ADC0CF=(31)<<3;
 802   3                              
 803   3                              // for(i=0;i<8;i++){
 804   3                                      // ADC0_set_diff(i,TRUE);//set to differential
 805   3                              // }
 806   3                              
 807   3                      }//ADC[0..1]
 808   2                      
 809   2                      {//DAC0,DAC1
 810   3                              
 811   3                              
 812   3                              
 813   3                              DAC0L=0x0;
 814   3                              DAC0H=0x0;      //set output when write DAC0H
 815   3                              DAC0CN=0x80;    
 816   3                              
 817   3                              DAC1L=0x0;
 818   3                              DAC1H=0x0;      //set output when write DAC0H
 819   3                              DAC1CN=0x80;
 820   3                              
 821   3      
 822   3                      }//DAC[0..1]
 823   2              
 824   2                      {//clock init
 825   3                              time.us=0L;
 826   3                              time.ms=0L;
 827   3                              time.sec=0x0L;
 828   3                              
 829   3                              for(i=0;i<MAX_DIGITAL_PINS;i++){
 830   4                                      dout_timeout_sec[i]=0;
 831   4                              }
 832   3                      }
 833   2              
 834   2                      {//Interrupts and CPU stack 
 835   3                              SP=0x30;        //stack initiale offset
 836   3                              
 837   3                              PS0=1;          //uart ISR gets high priority
 838   3                              ES0=1;          //uart0_enable_interrupt
 839   3                              EIE2|=0X04;     //ENABLE timer4 INTERRUPT
 840   3                              EA=1;
 841   3                      }       
 842   2      
 843   2                      {//FLASH
 844   3                              FLASH_Load();
 845   3                      }               
 846   2                      
 847   2                      // rxmsg.
 848   2                      
 849   2              }//initialization section
 850   1              
 851   1      
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 23  

 852   1              // EX0=1;       //int_0 interrupt enabled               
 853   1              // X0=1;
 854   1              // for(i=0;i<10000;i++);
 855   1              // X0=0;
 856   1      
 857   1              
 858   1              // WDTCN=0xAD;
 859   1              // WDTCN=0xFF;
 860   1      
 861   1              while(1){
 862   2                      WDTCN=0xAD;
 863   2                      if(flag_1sec){
 864   3                              flag_1sec=0;
 865   3                      }       
 866   2                      // Motor();     
 867   2              }//main loop
 868   1      }
 869          
 870          
 871          
 872          
 873          
 874          
 875          
 876          /*##########################################################################*/// interrupts
 877          
 878          void Timer4     (void)  interrupt 16    using 3         {/*general clock 1khz,T=1ms, function_duration~0.1[ms] */
 879   1              u8 i;
 880   1      
 881   1              T4CON&=~0x80;   //clear TF4 interrupt flag
 882   1      
 883   1              WDTCN=0xAD;
 884   1              WDTCN=0xFF;
 885   1              
 886   1              {//time_test=90us 
 887   2                      time.ms++;                      
 888   2                      for(i=0;i<MAX_DIGITAL_PINS;i++){        //process dout timeout 
 889   3                              if(dout_timeout_sec[i]>0){              //check if digital pin have a timeout counter
 890   4                                      dout_timeout_ms[i]++;
 891   4                                      if(dout_timeout_ms[i]>999){
 892   5                                              dout_timeout_ms[i]=0;
 893   5                                              dout_timeout_sec[i]--;
 894   5                                              if(dout_timeout_sec[i]==0){
 895   6                                                      set_dout(i,FALSE);      //set digital pin to high-z (OFF)
 896   6                                              }                               
 897   5                                      }       
 898   4                              }
 899   3                      }
 900   2                      if(time.ms>999){                //increas timer_sec
 901   3                              time.ms=0;              
 902   3                              time.sec++;
 903   3                              flag_1sec=1;
 904   3                      }
 905   2              }
 906   1              
 907   1              
 908   1      
 909   1              
 910   1      }//Timer4_ISR (void)
 911          
 912          
 913          void Uart0              (void)  interrupt 4     using 2         {
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 24  

 914   1      
 915   1              u8 ch;
 916   1              u16 val_16;
 917   1              u8 i;
 918   1              u8 val;
 919   1              bit rx_finish=0;        //msg recieved flag <AABB..>
 920   1              
 921   1              u8 tmp_1;
 922   1              u8 tmp_2;
 923   1              u8 tmp_3;
 924   1              u8 tmp_4;
 925   1              
 926   1              EA=0;
 927   1              // set_dout(8,1);
 928   1              if(RI0){        
 929   2                      RI0=0;                  //reset interrupt bit
 930   2                      ch=SBUF0;               //copy register         
 931   2                      if((rx.idx>0)&&(rx.idx<RX_BUFFER_SIZE)&&((ch>='0'&&ch<='9')||(ch>='A'&&ch<='F'))){      //detect valid char
 932   3                              rx.buf[rx.idx++]=ch;    
 933   3                      }       
 934   2                      else if(ch==RX_START_FRAME){                    //detect rx_frame START 
 935   3                              Rx_init();                                                      //init rx_buffer pointer&rx_idx
 936   3                              rx.buf[0]=RX_START_FRAME;               //read char into rx_buffer and increament pointer
 937   3                              rx.idx=1;
 938   3                      }                       
 939   2                      else if(ch==RX_STOP_FRAME && 4<rx.idx && rx.idx<RX_BUFFER_SIZE){//detect END verify error rx_idx minmimu
             -m char =4  <aabb>                     
 940   3                              // rxmsg.xor=rx.buf[3]; //start xoring from address offset 3  <AABBCCDD..>
 941   3                              // for(i=4;i<=rx.idx;i++){ //continue xoring until rx.idx from offset 4
 942   3                                      // rxmsg.xor^=rx.buf[i];}
 943   3                              // if(rxmsg.xor==Rx_get_u8(1)){ //xor test <xx...>
 944   3                                      // rx.buf[rx.idx++]=RX_STOP_FRAME;      
 945   3                                      // rxmsg.size=rx.size=rx.idx;
 946   3                                      // rx_finish=1;
 947   3                              // }
 948   3                              // else{//xor test failed
 949   3                                      // Rx_init();
 950   3                              // }    
 951   3                              rx.sum=Rx_get_u8(rx.idx-2);
 952   3                              rx.buf[rx.idx++]=RX_STOP_FRAME;
 953   3                              rx.size=rx.idx;
 954   3                              val=0;
 955   3                              
 956   3                              for(i=1;i<rx.size-3;i++){
 957   4                                      val+=rx.buf[i];
 958   4                              }
 959   3                              
 960   3                              rx_finish=1;            
 961   3                      }
 962   2                      else{//xor test failed
 963   3                              Rx_init();
 964   3                      }
 965   2                      
 966   2              }//if(RI0)
 967   1      
 968   1              if(TI0){
 969   2                      TI0=0;
 970   2                      if( tx.idx<TX_BUFFER_SIZE && tx.buf[tx.idx]!=NULL ){
 971   3                              // UART_READ_DISABLE=UART_WRITE_ENABLE=TRUE;    //enable write
 972   3                              SBUF0=tx.buf[tx.idx++];         //send char
 973   3                      }
 974   2                      else{
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 25  

 975   3                              // RE=DE=0;     //max3086_enable_read
 976   3                              // UART_READ_DISABLE=UART_WRITE_ENABLE=FALSE;   //enable read
 977   3                      }
 978   2              }//if(TI0)
 979   1              
 980   1              if(rx_finish){  
 981   2                      rx_finish=0;
 982   2                      rxmsg.addr=Rx_get_u8(1); //addr index   <AABB..>
 983   2                      rxmsg.type=Rx_get_u8(3);        //type index <AABB..>
 984   2                      
 985   2                      
 986   2                      // tmp_1=rxmsg.addr==ADDRESS_PORT?1:0;
 987   2                      // tmp_2=rxmsg.addr==VIRTUAL_ADDRESS?1:0;
 988   2                      // tmp_3=0x80==ADDRESS_PORT?1:0;
 989   2      
 990   2                      
 991   2                      // if((rxmsg.addr==ADDRESS_PORT || 0x80==ADDRESS_PORT)&&ADDRESS_PORT || (rxmsg.addr==VIRTUAL_ADDRESS)&&V
             -IRTUAL_ADDRESS){      //rx_msg_address
 992   2              
 993   2                      // if(VIRTUAL_ADDRESS?(rxmsg.addr==VIRTUAL_ADDRESS || 0xFF==VIRTUAL_ADDRESS):(rxmsg.addr==ADDRESS_PORT))
             -{        //rx_msg_address
 994   2                      // if((rxmsg.addr==ADDRESS_PORT)){      //rx_msg_address
 995   2                      // if(ADDRESS_PORT==0x80?rxmsg.addr==VIRTUAL_ADDRESS:rxmsg.addr==ADDRESS_PORT){ //read virtual address O
             -NLY IF phisical address == 0x80
 996   2                      // if(ADDRESS_PORT==0x80?(rxmsg.addr==var128[VAR128_VADDR]||var128[VAR128_VADDR]==0xff):rxmsg.addr==ADDR
             -ESS_PORT){
 997   2                      if((rxmsg.addr==var128[VAR128_VADDR])||(var128[VAR128_VADDR]==0xff)){
 998   3                              switch(rxmsg.type){     //rx_msg_type
 999   4                                      case 0xBB :{    //loop-back             <AABB...>               
1000   5                                              Loopback();//copy rx to tx 
1001   5                                      }break;                 
1002   4                                      case 0x11 :{    //set dout              <AA11aabbccdd>          
1003   5                                              if(rx.size==14){                                                                
1004   6                                              rxmsg.idx=Rx_get_u8(5);         //dout(aa)
1005   6                                              rxmsg.val=Rx_get_u8(7);         //value(bb)
1006   6                                              rxmsg.t1=Rx_get_u8(9);          //timer_high(cc)
1007   6                                              rxmsg.t2=Rx_get_u8(11);         //timer_low(dd)
1008   6                                              // Rxmsg_dout_wr:::::::::::::::::::
1009   6                                              if(rxmsg.idx<MAX_DIGITAL_PINS){         
1010   7                                                      dout_timeout_sec[rxmsg.idx]=((u16)rxmsg.t1)<<8;
1011   7                                                      dout_timeout_sec[rxmsg.idx]+=rxmsg.t2;  
1012   7                                                      dout_timeout_ms[rxmsg.idx]=0;   
1013   7                                                      set_dout(rxmsg.idx,rxmsg.val);  
1014   7                                              }
1015   6                                              // Rxmsg_dout_wr:::::::::::::::::::
1016   6                                              // Rxmsg_dout_wr();                             
1017   6                                              Loopback();                             //copy rx to tx         
1018   6                                              }
1019   5                                              
1020   5                                      }break;                                                 
1021   4                                      case 0x13 :{    //get_ain               <AA13aabb> -> {qqww}
1022   5                                              if(rx.size==10){                                                                
1023   6                                                      rxmsg.idx       =Rx_get_u8(5);          //(aa)  analog input
1024   6                                                      rxmsg.t1        =Rx_get_u8(7);          //(bb)  analog gain1(000),2(001),4(010),8(011),16(10x),0.5(11x)
1025   6                                                      val_16          =get_ain(rxmsg.idx,rxmsg.t1);
1026   6                                                      val_16          =get_ain(rxmsg.idx,rxmsg.t1);
1027   6                                                      
1028   6                                                      Tx_init();      //resets tx_buffer[] and tx_idx 
1029   6                                                      Rx_init();      //resets tx_buffer[] and tx_idx 
1030   6                                                      Tx_set(1,BYTEHIGH(val_16));     //qq
1031   6                                                      Tx_set(3,BYTELOW(val_16));      //ww                    
1032   6                                                      tx.buf[5]=TX_STOP_FRAME;
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 26  

1033   6                                                      tx.buf[0]=TX_START_FRAME;
1034   6                                                      tx.size=6;
1035   6                                                      tx.idx=0;       //transmition will use tx.idx )in TI0 case
1036   6                                                      TI0=1;          //start transmition                                     
1037   6                                              }
1038   5      
1039   5                                      }break;                                 
1040   4                                      case 0x14 :{    //get_din               <AA14aa> -> {qq}
1041   5                                                                              // read_ain()
1042   5                                                                              // convert_to_ascii()
1043   5                                                                              // send_string()
1044   5                                              if(rx.size==8){                                                         
1045   6                                                      rxmsg.idx       =Rx_get_u8(5);          //digital input(aa)
1046   6      
1047   6                                                      if(get_din(rxmsg.idx)){
1048   7                                                              val=0x01;
1049   7                                                      }
1050   6                                                      else{
1051   7                                                              val=0x00;
1052   7                                                      }
1053   6                                                      
1054   6                                                      Tx_init();      //resets tx_buffer[] and tx_idx 
1055   6                                                      tx.buf[0]=TX_START_FRAME;
1056   6                                                      Tx_set(1,*(&val));              //qq                                                                                            
1057   6                                                      tx.buf[3]=TX_STOP_FRAME;
1058   6                                                      tx.size=4;
1059   6                                                      tx.idx=0;       //transmition will use tx.idx )in TI0 case
1060   6                                                      TI0=1;          //start transmition                                     
1061   6                                              }                               
1062   5                                      }break;                                 
1063   4                                      case 0x15 :{    //set_aout              <AA15aabbcc> 
1064   5                                              if(rx.size==12){                                                                
1065   6                                                      rxmsg.idx                       =Rx_get_u8(5);          //analog output(aa)
1066   6                                                      BYTEHIGH(val_16)        =Rx_get_u8(7);          //analog high register 0x[0..F](bb)
1067   6                                                      BYTELOW(val_16)         =Rx_get_u8(9);          //analog low register 0x[0..FF](ccc)
1068   6                                                      
1069   6                                                      set_aout(rxmsg.idx,val_16);
1070   6                                                      
1071   6                                                      Tx_init();      //resets tx_buffer[] and tx_idx 
1072   6                                                      Tx_set(1,BYTEHIGH(val_16));     //qq
1073   6                                                      Tx_set(3,BYTELOW(val_16));      //ww                    
1074   6                                                      tx.buf[5]=TX_STOP_FRAME;
1075   6                                                      tx.buf[0]=TX_START_FRAME;
1076   6                                                      tx.size=6;
1077   6                                                      tx.idx=0;       //transmition will use tx.idx )in TI0 case
1078   6                                                      TI0=1;          //start transmition                                     
1079   6                                              }
1080   5      
1081   5                                      }break;
1082   4                                      case 0x16 :{    //get_digital ports <AA16> -> {kkllmmnnoopp}                                                    
1083   5                                              if(rx.size==6){                                                                 
1084   6                                                      Tx_init();      //resets tx_buffer[] and tx_idx 
1085   6                                                      tx.buf[0]=TX_START_FRAME;
1086   6                                                      
1087   6                                                      // DIG_PORT_0=0x0;
1088   6                                                      // DIG_PORT_0=0xff;
1089   6                                                      Tx_set(1,DIG_PORT_0);           //kk:DIG_PORT_0
1090   6                                                      // DIG_PORT_1=0x0;
1091   6                                                      // DIG_PORT_1=0xff;
1092   6                                                      Tx_set(3,DIG_PORT_1);           //ll:DIG_PORT_1
1093   6                                                      // DIG_PORT_2=0x0;
1094   6                                                      // DIG_PORT_2=0xff;
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 27  

1095   6                                                      Tx_set(5,DIG_PORT_2);           //mm:DIG_PORT_2
1096   6                                                      // DIG_PORT_3=0x0;
1097   6                                                      // DIG_PORT_3=0xff;
1098   6                                                      Tx_set(7,DIG_PORT_3);           //nn::DIG_PORT_3
1099   6                                                      // DIG_PORT_4=0x0;
1100   6                                                      // DIG_PORT_4=0xff;
1101   6                                                      Tx_set(9,DIG_PORT_4);           //oo::DIG_PORT_4
1102   6                                                      // DIG_PORT_5=0x0;
1103   6                                                      // DIG_PORT_5=0xff;
1104   6                                                      Tx_set(11,DIG_PORT_5);          //pp::DIG_PORT_5
1105   6                                                      
1106   6                                                      // Tx_set(13,digital_port_conf);        //qq::DIG_PORT_5
1107   6                                                      
1108   6                                                      tx.buf[13]=TX_STOP_FRAME;
1109   6                                                      tx.size=14;
1110   6                                                      tx.idx=0;       //transmition will use tx.idx )in TI0 case
1111   6                                                      TI0=1;          //start transmition                                     
1112   6                                              }                               
1113   5                                      }break; 
1114   4                                      case 0x17 :{    //set_virtual_address           <AA17bb\n -> {AA17bb\n                                                          
1115   5                                              if(rx.size==8){ 
1116   6                                                      var128[VAR128_VADDR]=Rx_get_u8(5);              //value_u8(bb)
1117   6                                                      FLASH_Save();
1118   6                                                      Loopback();                             //copy rx to tx 
1119   6                                                      // Tx_init();   //resets tx_buffer[] and tx_idx 
1120   6                                                      // tx.buf[0]=TX_START_FRAME;
1121   6                                                      // Tx_set(1,DOUT_PORT_0);               //ww                                                                                            
1122   6                                                      // Tx_set(3,DOUT_PORT_1);               //xx                                                                                            
1123   6                                                      // Tx_set(5,DOUT_PORT_2);               //yy                                                                                            
1124   6                                                      // Tx_set(7,DOUT_PORT_3);               //zz                                                                                            
1125   6                                                      // tx.buf[9]=TX_STOP_FRAME;
1126   6                                                      // tx.size=10;
1127   6                                                      // tx.idx=0;    //transmition will use tx.idx )in TI0 case
1128   6                                                      // TI0=1;               //start transmition                                     
1129   6                                              }//if(rx.size==10)                              
1130   5                                      }break;                                 
1131   4                                      case 0x18 :{    //set_serial number             <AA18bbccddee\n -> {AA18bbccddee\n
1132   5                                              if(rx.size==14){        
1133   6                                                      var128[VAR128_SN_0]=Rx_get_u8(5);               //value_u8(bb)
1134   6                                                      var128[VAR128_SN_1]=Rx_get_u8(7);               //value_u8(cc)
1135   6                                                      var128[VAR128_SN_2]=Rx_get_u8(9);               //value_u8(dd)
1136   6                                                      var128[VAR128_SN_3]=Rx_get_u8(11);              //value_u8(ee)
1137   6                                                      FLASH_Save();
1138   6                                                      Loopback();                             //copy rx to tx 
1139   6                                                      // Tx_init();   //resets tx_buffer[] and tx_idx 
1140   6                                                      // tx.buf[0]=TX_START_FRAME;
1141   6                                                      // Tx_set(1,DOUT_PORT_0);               //ww                                                                                            
1142   6                                                      // Tx_set(3,DOUT_PORT_1);               //xx                                                                                            
1143   6                                                      // Tx_set(5,DOUT_PORT_2);               //yy                                                                                            
1144   6                                                      // Tx_set(7,DOUT_PORT_3);               //zz                                                                                            
1145   6                                                      // tx.buf[9]=TX_STOP_FRAME;
1146   6                                                      // tx.size=10;
1147   6                                                      // tx.idx=0;    //transmition will use tx.idx )in TI0 case
1148   6                                                      // TI0=1;               //start transmition                                     
1149   6                                              }//if(rx.size==10)                              
1150   5                                      }break;                                 
1151   4                                      case 0x19 :{    //get_serial number             <AA19\n -> {bbccddee\n
1152   5                                              if(rx.size==6){ 
1153   6                                                      Tx_init();      //resets tx_buffer[] and tx_idx 
1154   6                                                      tx.buf[0]=TX_START_FRAME;
1155   6                                                      Tx_set(1,var128[VAR128_SN_0]);          //value_u8(bb)
1156   6                                                      Tx_set(3,var128[VAR128_SN_1]);          //value_u8(cc)
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 28  

1157   6                                                      Tx_set(5,var128[VAR128_SN_2]);          //value_u8(dd)
1158   6                                                      Tx_set(7,var128[VAR128_SN_3]);          //value_u8(ee)
1159   6                                                      
1160   6                                                      tx.buf[9]=TX_STOP_FRAME;
1161   6                                                      tx.size=10;
1162   6                                                      tx.idx=0;       //transmition will use tx.idx )in TI0 case
1163   6                                                      TI0=1;          //start transmition             
1164   6                                                      // FLASH_Save();
1165   6                                                      // Loopback();                          //copy rx to tx 
1166   6                                                      // Tx_init();   //resets tx_buffer[] and tx_idx 
1167   6                                                      // tx.buf[0]=TX_START_FRAME;
1168   6                                                      // Tx_set(1,DOUT_PORT_0);               //ww                                                                                            
1169   6                                                      // Tx_set(3,DOUT_PORT_1);               //xx                                                                                            
1170   6                                                      // Tx_set(5,DOUT_PORT_2);               //yy                                                                                            
1171   6                                                      // Tx_set(7,DOUT_PORT_3);               //zz                                                                                            
1172   6                                                      // tx.buf[9]=TX_STOP_FRAME;
1173   6                                                      // tx.size=10;
1174   6                                                      // tx.idx=0;    //transmition will use tx.idx )in TI0 case
1175   6                                                      // TI0=1;               //start transmition                                     
1176   6                                              }//if(rx.size==10)                              
1177   5                                      }break;                         
1178   4                                      case 0x20 :{    //set time.sec  <AA20aabbccdd>  
1179   5                                              if(rx.size==14){        
1180   6                                              
1181   6                                                      time.sec=0;
1182   6      
1183   6                                                      //read value from msg 
1184   6                                                      tmp_1=(u8)Rx_get_u8(5);
1185   6                                                      tmp_2=(u8)Rx_get_u8(7);
1186   6                                                      tmp_3=(u8)Rx_get_u8(9);
1187   6                                                      tmp_4=(u8)Rx_get_u8(11);                                                
1188   6                                                      
1189   6                                                      //set clock
1190   6                                                      time.sec=0x0L;
1191   6                                                      time.sec+=(tmp_1+0x0000L)<<24;
1192   6                                                      time.sec+=(tmp_2+0x0000L)<<16;
1193   6                                                      time.sec+=(tmp_3+0x0000L)<<8;
1194   6                                                      time.sec+=(tmp_4+0x0000L);                                                      
1195   6                                                      //set clock
1196   6                                                      // time.sec=0x0L;
1197   6                                                      // time.sec+=((u32)Rx_get_u8(7))<<24;
1198   6                                                      // time.sec+=((u32)Rx_get_u8(9))<<16;
1199   6                                                      // time.sec+=((u32)Rx_get_u8(11))<<8;
1200   6                                                      // time.sec+=((u32)Rx_get_u8(13));                                              
1201   6                                                      
1202   6                                                      //read clock
1203   6                                                      tmp_1=(u8)(time.sec>>24);
1204   6                                                      tmp_2=(u8)(time.sec>>16);
1205   6                                                      tmp_3=(u8)(time.sec>>8);
1206   6                                                      tmp_4=(u8)(time.sec>>0);
1207   6                                                      
1208   6                                                      Tx_init();      //resets tx_buffer[] and tx_idx 
1209   6                                                      
1210   6                                                      Tx_set(1,tmp_1);        //cc
1211   6                                                      Tx_set(3,tmp_2);        //dd
1212   6                                                      Tx_set(5,tmp_3);        //ee
1213   6                                                      Tx_set(7,tmp_4);        //ff
1214   6                                              
1215   6                                                      // Tx_set(1,*(&time.sec+3));    //cc
1216   6                                                      // Tx_set(3,*(&time.sec+2));    //dd
1217   6                                                      // Tx_set(5,*(&time.sec+1));    //ee
1218   6                                                      // Tx_set(7,*(&time.sec+0));    //ff
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 29  

1219   6                                                      
1220   6                                                      tx.buf[9]=TX_STOP_FRAME;
1221   6                                                      tx.buf[0]=TX_START_FRAME;
1222   6                                                      tx.size=10;
1223   6                                                      tx.idx=0;       //transmition will use tx.idx )in TI0 case
1224   6                                                      TI0=1;          //start transmition
1225   6                                                      
1226   6      
1227   6                                                      // *(&time.sec+3)=(u8)Rx_get_u8(7);
1228   6                                                      // *(&time.sec+2)=(u8)Rx_get_u8(9);
1229   6                                                      // *(&time.sec+1)=(u8)Rx_get_u8(11);
1230   6                                                      // *(&time.sec+0)=(u8)Rx_get_u8(13);
1231   6                                                      // Loopback();                          //copy rx to tx         
1232   6                                              }                       
1233   5                                      }break;                         
1234   4                                      case 0x21 :{    //get time.sec  <xxAA21>, tx={ccddeeff}
1235   5      
1236   5                                              // tmp_1=BYTE3(time.sec);       
1237   5                                              // tmp_2=BYTE4(time.sec);
1238   5                                              // "aabbccdd"
1239   5                                              
1240   5                                              //read clock
1241   5                                              tmp_1=(u8)(time.sec>>24);
1242   5                                              tmp_2=(u8)(time.sec>>16);
1243   5                                              tmp_3=(u8)(time.sec>>8);
1244   5                                              tmp_4=(u8)(time.sec>>0);
1245   5                                              
1246   5                                              Tx_init();      //resets tx_buffer[] and tx_idx 
1247   5                                              
1248   5                                              Tx_set(1,tmp_1);        //cc
1249   5                                              Tx_set(3,tmp_2);        //dd
1250   5                                              Tx_set(5,tmp_3);        //ee
1251   5                                              Tx_set(7,tmp_4);        //ff
1252   5                                              
1253   5                                              tx.buf[9]=TX_STOP_FRAME;
1254   5                                              tx.buf[0]=TX_START_FRAME;
1255   5                                              tx.size=10;
1256   5                                              tx.idx=0;       //transmition will use tx.idx )in TI0 case
1257   5                                              TI0=1;          //start transmition
1258   5                                              
1259   5                                      }break;
1260   4                                      case 0x22 :{    //set value in scratch, index range is [00..99]         <AA22aabb\n -> {AA22aabb}
1261   5                                              if(rx.size==10){        
1262   6                                                      tmp_1=Rx_get_u8(5);     //index (aa)
1263   6                                                      tmp_2=Rx_get_u8(7);     //u8 value (bb)
1264   6                                                      tmp_1+=28;
1265   6                                                      if(27<tmp_1 && tmp_1<128){
1266   7                                                              var128[tmp_1]=tmp_2;            
1267   7                                                              FLASH_Save();
1268   7                                                              Loopback();                             
1269   7                                                      }
1270   6                                              }
1271   5                                      }break;
1272   4                                      case 0x23 :{    //get value from scratch, index range is [00..99]               <AA22aa\n -> {AA22aabb}
1273   5                                              if(rx.size==8){ 
1274   6                                                      tmp_1=Rx_get_u8(5);     //index (aa)
1275   6                                                      
1276   6                                                      tmp_1+=28;
1277   6                                                      if(27<tmp_1 && tmp_1<128){
1278   7                                                              Tx_init();                                              //resets tx_buffer[] and tx_idx 
1279   7                                                              tx.buf[0]=TX_START_FRAME;
1280   7                                                              Tx_set(1,var128[tmp_1]);                //nn::DIG_PORT_3
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 30  

1281   7                                                              tx.buf[3]=TX_STOP_FRAME;
1282   7                                                              tx.size=4;
1283   7                                                              // tx.idx=0;    //transmition will use tx.idx )in TI0 case
1284   7                                                              TI0=1;          //start transmition     
1285   7                                                              
1286   7                                                      }
1287   6                                              }       
1288   5      
1289   5                                      }break; 
1290   4                              
1291   4                              }//switch(BB)
1292   3                      }//(rxmsg.addr==0xAA)   
1293   2              }//if(rx_finish)
1294   1              
1295   1              // set_dout(8,0);
1296   1              EA=1;
1297   1      }//uart0_int
1298          
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 31  

ASSEMBLY LISTING OF GENERATED OBJECT CODE


             ; FUNCTION _SendConstMsg (BEGIN)
                                           ; SOURCE LINE # 9
;---- Variable 'pmsg' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 11
0000 CF                XCH     A,R7
0001 E9                MOV     A,R1
0002 CF                XCH     A,R7
0003 900000      R     MOV     DPTR,#pmsg2
0006 EA                MOV     A,R2
0007 F0                MOVX    @DPTR,A
0008 A3                INC     DPTR
0009 EF                MOV     A,R7
000A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 14
000B 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 15
000E 900000      R     MOV     DPTR,#pmsg2
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 A3                INC     DPTR
0014 E0                MOVX    A,@DPTR
0015 4E                ORL     A,R6
0016 605A              JZ      ?C0004
0018         ?C0002:
                                           ; SOURCE LINE # 16
0018 900000      R     MOV     DPTR,#tx
001B E0                MOVX    A,@DPTR
001C FF                MOV     R7,A
001D 900000      R     MOV     DPTR,#pmsg2
0020 E0                MOVX    A,@DPTR
0021 FC                MOV     R4,A
0022 A3                INC     DPTR
0023 E0                MOVX    A,@DPTR
0024 2F                ADD     A,R7
0025 F582              MOV     DPL,A
0027 E4                CLR     A
0028 3C                ADDC    A,R4
0029 F583              MOV     DPH,A
002B E4                CLR     A
002C 93                MOVC    A,@A+DPTR
002D FE                MOV     R6,A
002E 601D              JZ      ?C0003
0030 EF                MOV     A,R7
0031 C3                CLR     C
0032 940F              SUBB    A,#0FH
0034 5017              JNC     ?C0003
                                           ; SOURCE LINE # 17
0036 900000      R     MOV     DPTR,#tx
0039 E0                MOVX    A,@DPTR
003A 2400        R     ADD     A,#LOW tx+04H
003C F582              MOV     DPL,A
003E E4                CLR     A
003F 3400        R     ADDC    A,#HIGH tx+04H
0041 F583              MOV     DPH,A
0043 EE                MOV     A,R6
0044 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 18
0045 900000      R     MOV     DPTR,#tx
0048 E0                MOVX    A,@DPTR
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 32  

0049 04                INC     A
004A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 19
004B 80CB              SJMP    ?C0002
004D         ?C0003:
                                           ; SOURCE LINE # 20
004D 900000      R     MOV     DPTR,#tx
0050 E0                MOVX    A,@DPTR
0051 04                INC     A
0052 F0                MOVX    @DPTR,A
0053 2400        R     ADD     A,#LOW tx+03H
0055 F582              MOV     DPL,A
0057 E4                CLR     A
0058 3400        R     ADDC    A,#HIGH tx+03H
005A F583              MOV     DPH,A
005C 740A              MOV     A,#0AH
005E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 21
005F 900000      R     MOV     DPTR,#tx+03H
0062 7423              MOV     A,#023H
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 22
0065 900000      R     MOV     DPTR,#tx
0068 E0                MOVX    A,@DPTR
0069 A3                INC     DPTR
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 23
006B E4                CLR     A
006C 900000      R     MOV     DPTR,#tx
006F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 24
0070 D299              SETB    TI0
                                           ; SOURCE LINE # 25
                                           ; SOURCE LINE # 26
0072         ?C0004:
0072 22                RET     
             ; FUNCTION _SendConstMsg (END)

             ; FUNCTION func101 (BEGIN)
                                           ; SOURCE LINE # 28
                                           ; SOURCE LINE # 29
0000 120000      R     LCALL   Tx_init
0003         ?C0005:
                                           ; SOURCE LINE # 30
0003 900000      R     MOV     DPTR,#tx
0006 E0                MOVX    A,@DPTR
0007 FF                MOV     R7,A
0008 2400        R     ADD     A,#LOW rx+03H
000A F582              MOV     DPL,A
000C E4                CLR     A
000D 3400        R     ADDC    A,#HIGH rx+03H
000F F583              MOV     DPH,A
0011 E0                MOVX    A,@DPTR
0012 FE                MOV     R6,A
0013 640A              XRL     A,#0AH
0015 601D              JZ      ?C0006
0017 EF                MOV     A,R7
0018 C3                CLR     C
0019 9410              SUBB    A,#010H
001B 5017              JNC     ?C0006
                                           ; SOURCE LINE # 31
001D 900000      R     MOV     DPTR,#tx
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 33  

0020 E0                MOVX    A,@DPTR
0021 2400        R     ADD     A,#LOW tx+03H
0023 F582              MOV     DPL,A
0025 E4                CLR     A
0026 3400        R     ADDC    A,#HIGH tx+03H
0028 F583              MOV     DPH,A
002A EE                MOV     A,R6
002B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 32
002C 900000      R     MOV     DPTR,#tx
002F E0                MOVX    A,@DPTR
0030 04                INC     A
0031 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 33
0032 80CF              SJMP    ?C0005
0034         ?C0006:
                                           ; SOURCE LINE # 34
0034 900000      R     MOV     DPTR,#tx
0037 E0                MOVX    A,@DPTR
0038 2400        R     ADD     A,#LOW tx+03H
003A F582              MOV     DPL,A
003C E4                CLR     A
003D 3400        R     ADDC    A,#HIGH tx+03H
003F F583              MOV     DPH,A
0041 740A              MOV     A,#0AH
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 35
0044 900000      R     MOV     DPTR,#tx+03H
0047 7423              MOV     A,#023H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 36
004A 900000      R     MOV     DPTR,#tx
004D E0                MOVX    A,@DPTR
004E 04                INC     A
004F A3                INC     DPTR
0050 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 37
0051 E4                CLR     A
0052 900000      R     MOV     DPTR,#tx
0055 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 38
0056 D299              SETB    TI0
                                           ; SOURCE LINE # 40
0058 22                RET     
             ; FUNCTION func101 (END)

             ; FUNCTION Loopback (BEGIN)
                                           ; SOURCE LINE # 42
                                           ; SOURCE LINE # 44
0000 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 45
;---- Variable 'i' assigned to Register 'R7' ----
0003 E4                CLR     A
0004 FF                MOV     R7,A
0005         ?C0008:
                                           ; SOURCE LINE # 46
0005 7400        R     MOV     A,#LOW rx+03H
0007 2F                ADD     A,R7
0008 F582              MOV     DPL,A
000A E4                CLR     A
000B 3400        R     ADDC    A,#HIGH rx+03H
000D F583              MOV     DPH,A
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 34  

000F E0                MOVX    A,@DPTR
0010 FE                MOV     R6,A
0011 7400        R     MOV     A,#LOW tx+03H
0013 2F                ADD     A,R7
0014 F582              MOV     DPL,A
0016 E4                CLR     A
0017 3400        R     ADDC    A,#HIGH tx+03H
0019 F583              MOV     DPH,A
001B EE                MOV     A,R6
001C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 47
001D 7400        R     MOV     A,#LOW tx+03H
001F 2F                ADD     A,R7
0020 F582              MOV     DPL,A
0022 E4                CLR     A
0023 3400        R     ADDC    A,#HIGH tx+03H
0025 F583              MOV     DPH,A
0027 E0                MOVX    A,@DPTR
0028 640A              XRL     A,#0AH
002A 6005              JZ      ?C0009
                                           ; SOURCE LINE # 48
                                           ; SOURCE LINE # 49
002C         ?C0011:
                                           ; SOURCE LINE # 50
002C         ?C0010:
002C 0F                INC     R7
002D EF                MOV     A,R7
002E B410D4            CJNE    A,#010H,?C0008
0031         ?C0009:
                                           ; SOURCE LINE # 51
0031 7400        R     MOV     A,#LOW tx+03H
0033 2F                ADD     A,R7
0034 F582              MOV     DPL,A
0036 E4                CLR     A
0037 3400        R     ADDC    A,#HIGH tx+03H
0039 F583              MOV     DPH,A
003B 740A              MOV     A,#0AH
003D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 52
003E 900000      R     MOV     DPTR,#tx+03H
0041 7423              MOV     A,#023H
0043 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 53
0044 EF                MOV     A,R7
0045 04                INC     A
0046 900000      R     MOV     DPTR,#tx+01H
0049 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 54
004A E4                CLR     A
004B 900000      R     MOV     DPTR,#tx
004E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 55
004F D299              SETB    TI0
                                           ; SOURCE LINE # 57
0051 22                RET     
             ; FUNCTION Loopback (END)

             ; FUNCTION Rxmsg_dout_wr (BEGIN)
                                           ; SOURCE LINE # 59
                                           ; SOURCE LINE # 61
0000 900000      R     MOV     DPTR,#rxmsg+04H
0003 E0                MOVX    A,@DPTR
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 35  

0004 FD                MOV     R5,A
0005 C3                CLR     C
0006 9430              SUBB    A,#030H
0008 5030              JNC     ?C0014
                                           ; SOURCE LINE # 62
000A 900000      R     MOV     DPTR,#rxmsg+06H
000D E0                MOVX    A,@DPTR
000E FE                MOV     R6,A
000F ED                MOV     A,R5
0010 25E0              ADD     A,ACC
0012 2400        R     ADD     A,#LOW dout_timeout_sec
0014 F582              MOV     DPL,A
0016 E4                CLR     A
0017 3400        R     ADDC    A,#HIGH dout_timeout_sec
0019 F583              MOV     DPH,A
001B EE                MOV     A,R6
001C F0                MOVX    @DPTR,A
001D A3                INC     DPTR
001E E4                CLR     A
001F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 63
0020 900000      R     MOV     DPTR,#rxmsg+07H
0023 E0                MOVX    A,@DPTR
0024 FF                MOV     R7,A
0025 ED                MOV     A,R5
0026 25E0              ADD     A,ACC
0028 2400        R     ADD     A,#LOW dout_timeout_sec
002A F582              MOV     DPL,A
002C E4                CLR     A
002D 3400        R     ADDC    A,#HIGH dout_timeout_sec
002F F583              MOV     DPH,A
0031 E4                CLR     A
0032 8FF0              MOV     B,R7
0034 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 64
0037 120000      R     LCALL   L?0321
                                           ; SOURCE LINE # 65
                                           ; SOURCE LINE # 66
003A         ?C0014:
003A 22                RET     
             ; FUNCTION Rxmsg_dout_wr (END)

             ; FUNCTION L?0318 (BEGIN)
0000         L?0319:
0000 900000      R     MOV     DPTR,#rxmsg+04H
0003         L?0320:
0003 EF                MOV     A,R7
0004 F0                MOVX    @DPTR,A
0005 7F07              MOV     R7,#07H
             ; FUNCTION _Rx_get_u8 (BEGIN)
                                           ; SOURCE LINE # 68
0007 900000      R     MOV     DPTR,#i
000A EF                MOV     A,R7
000B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 70
000C E0                MOVX    A,@DPTR
000D 2400        R     ADD     A,#LOW rx+03H
000F F582              MOV     DPL,A
0011 E4                CLR     A
0012 3400        R     ADDC    A,#HIGH rx+03H
0014 F583              MOV     DPH,A
0016 E0                MOVX    A,@DPTR
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 36  

0017 FF                MOV     R7,A
0018 120000      R     LCALL   _Conv_ascii_to_int
001B EF                MOV     A,R7
001C C4                SWAP    A
001D 54F0              ANL     A,#0F0H
001F FE                MOV     R6,A
0020 EE                MOV     A,R6
0021 C0E0              PUSH    ACC
0023 900000      R     MOV     DPTR,#i
0026 E0                MOVX    A,@DPTR
0027 2400        R     ADD     A,#LOW rx+04H
0029 F582              MOV     DPL,A
002B E4                CLR     A
002C 3400        R     ADDC    A,#HIGH rx+04H
002E F583              MOV     DPH,A
0030 E0                MOVX    A,@DPTR
0031 FF                MOV     R7,A
0032 120000      R     LCALL   _Conv_ascii_to_int
0035 D0E0              POP     ACC
0037 2F                ADD     A,R7
0038 FF                MOV     R7,A
                                           ; SOURCE LINE # 71
0039         ?C0015:
0039 22                RET     
             ; FUNCTION _Rx_get_u8 (END)

             ; FUNCTION L?0316 (BEGIN)
0000 900000      R     MOV     DPTR,#tmp_2
0003 F0                MOVX    @DPTR,A
0004 900000      R     MOV     DPTR,#time+04H
0007 E0                MOVX    A,@DPTR
0008 FC                MOV     R4,A
0009 A3                INC     DPTR
000A E0                MOVX    A,@DPTR
000B FD                MOV     R5,A
000C EC                MOV     A,R4
000D 900000      R     MOV     DPTR,#tmp_3
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 ED                MOV     A,R5
0013 F0                MOVX    @DPTR,A
0014 120000      R     LCALL   Tx_init
0017 900000      R     MOV     DPTR,#tmp_1
001A         L?0317:
001A E0                MOVX    A,@DPTR
001B FD                MOV     R5,A
001C 7F01              MOV     R7,#01H
             ; FUNCTION _Tx_set (BEGIN)
                                           ; SOURCE LINE # 73
001E 900000      R     MOV     DPTR,#i
0021 EF                MOV     A,R7
0022 F0                MOVX    @DPTR,A
;---- Variable 'var' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 74
0023 CF                XCH     A,R7
0024 ED                MOV     A,R5
0025 CF                XCH     A,R7
0026 120000      R     LCALL   _Conv_u8_to_str
0029 900000      R     MOV     DPTR,#prm
002C EE                MOV     A,R6
002D F0                MOVX    @DPTR,A
002E A3                INC     DPTR
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 37  

002F EF                MOV     A,R7
0030 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 75
0031 900000      R     MOV     DPTR,#prm
0034 E0                MOVX    A,@DPTR
0035 FF                MOV     R7,A
0036 900000      R     MOV     DPTR,#i
0039 E0                MOVX    A,@DPTR
003A FE                MOV     R6,A
003B 2400        R     ADD     A,#LOW tx+03H
003D F582              MOV     DPL,A
003F E4                CLR     A
0040 3400        R     ADDC    A,#HIGH tx+03H
0042 F583              MOV     DPH,A
0044 EF                MOV     A,R7
0045 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 76
0046 900000      R     MOV     DPTR,#prm+01H
0049 E0                MOVX    A,@DPTR
004A FF                MOV     R7,A
004B 7400        R     MOV     A,#LOW tx+04H
004D 2E                ADD     A,R6
004E F582              MOV     DPL,A
0050 E4                CLR     A
0051 3400        R     ADDC    A,#HIGH tx+04H
0053 F583              MOV     DPH,A
0055 EF                MOV     A,R7
0056 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 77
0057 22                RET     
             ; FUNCTION _Tx_set (END)

             ; FUNCTION _Conv_ascii_to_int (BEGIN)
                                           ; SOURCE LINE # 79
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 81
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9430              SUBB    A,#030H
0004 400C              JC      ?C0017
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9439              SUBB    A,#039H
000A 5006              JNC     ?C0017
                                           ; SOURCE LINE # 82
000C C3                CLR     C
000D EF                MOV     A,R7
000E 9430              SUBB    A,#030H
0010 FF                MOV     R7,A
0011 22                RET     
                                           ; SOURCE LINE # 83
0012         ?C0017:
0012 EF                MOV     A,R7
0013 C3                CLR     C
0014 9441              SUBB    A,#041H
0016 400B              JC      ?C0020
0018 EF                MOV     A,R7
0019 D3                SETB    C
001A 9446              SUBB    A,#046H
001C 5005              JNC     ?C0020
                                           ; SOURCE LINE # 84
001E EF                MOV     A,R7
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 38  

001F 24C9              ADD     A,#0C9H
0021 FF                MOV     R7,A
0022 22                RET     
                                           ; SOURCE LINE # 85
0023         ?C0020:
                                           ; SOURCE LINE # 86
0023 7FFF              MOV     R7,#0FFH
                                           ; SOURCE LINE # 87
0025         ?C0018:
0025 22                RET     
             ; FUNCTION _Conv_ascii_to_int (END)

             ; FUNCTION _Conv_int_to_ascii (BEGIN)
                                           ; SOURCE LINE # 89
;---- Variable 'prm' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 90
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 940A              SUBB    A,#0AH
0004 5006              JNC     ?C0022
                                           ; SOURCE LINE # 91
0006 7430              MOV     A,#030H
0008 2F                ADD     A,R7
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 92
000A 8004              SJMP    ?C0023
000C         ?C0022:
                                           ; SOURCE LINE # 93
000C 7437              MOV     A,#037H
000E 2F                ADD     A,R7
000F FF                MOV     R7,A
                                           ; SOURCE LINE # 94
0010         ?C0023:
                                           ; SOURCE LINE # 95
                                           ; SOURCE LINE # 96
0010         ?C0024:
0010 22                RET     
             ; FUNCTION _Conv_int_to_ascii (END)

             ; FUNCTION _Conv_str_to_u8 (BEGIN)
                                           ; SOURCE LINE # 98
;---- Variable 'str2' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 100
0000 900000      R     MOV     DPTR,#str
0003 EE                MOV     A,R6
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 EF                MOV     A,R7
0007 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 101
;---- Variable 'ret' assigned to Register 'R7' ----
0008 E4                CLR     A
0009 FF                MOV     R7,A
                                           ; SOURCE LINE # 102
000A 900000      R     MOV     DPTR,#str
000D E0                MOVX    A,@DPTR
;---- Variable 'prm1' assigned to Register 'R6' ----
000E FE                MOV     R6,A
                                           ; SOURCE LINE # 103
000F A3                INC     DPTR
0010 E0                MOVX    A,@DPTR
;---- Variable 'prm2' assigned to Register 'R5' ----
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 39  

0011 FD                MOV     R5,A
                                           ; SOURCE LINE # 105
0012 CF                XCH     A,R7
0013 EE                MOV     A,R6
0014 CF                XCH     A,R7
0015 120000      R     LCALL   _Conv_ascii_to_int
0018 CE                XCH     A,R6
0019 EF                MOV     A,R7
001A CE                XCH     A,R6
                                           ; SOURCE LINE # 106
001B CF                XCH     A,R7
001C ED                MOV     A,R5
001D CF                XCH     A,R7
001E 120000      R     LCALL   _Conv_ascii_to_int
0021 CD                XCH     A,R5
0022 EF                MOV     A,R7
0023 CD                XCH     A,R5
                                           ; SOURCE LINE # 108
0024 EF                MOV     A,R7
0025 2404              ADD     A,#04H
0027 FF                MOV     R7,A
0028 EE                MOV     A,R6
0029 C8                XCH     A,R0
002A EF                MOV     A,R7
002B C8                XCH     A,R0
002C 08                INC     R0
002D 8002              SJMP    ?C0253
002F         ?C0252:
002F C3                CLR     C
0030 33                RLC     A
0031         ?C0253:
0031 D8FC              DJNZ    R0,?C0252
0033 FF                MOV     R7,A
                                           ; SOURCE LINE # 109
                                           ; SOURCE LINE # 110
0034         ?C0025:
0034 22                RET     
             ; FUNCTION _Conv_str_to_u8 (END)

             ; FUNCTION _Conv_u8_to_str (BEGIN)
                                           ; SOURCE LINE # 112
;---- Variable 'val' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 113
0000 EF                MOV     A,R7
0001 540F              ANL     A,#0FH
0003 FE                MOV     R6,A
;---- Variable 'prm1' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 114
0004 EF                MOV     A,R7
0005 54F0              ANL     A,#0F0H
0007 FF                MOV     R7,A
0008 C4                SWAP    A
0009 540F              ANL     A,#0FH
;---- Variable 'prm2' assigned to Register 'R5' ----
000B FD                MOV     R5,A
                                           ; SOURCE LINE # 115
000C E4                CLR     A
000D 900000      R     MOV     DPTR,#ret
0010 F0                MOVX    @DPTR,A
0011 A3                INC     DPTR
0012 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 122
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 40  

0013 CF                XCH     A,R7
0014 EE                MOV     A,R6
0015 CF                XCH     A,R7
0016 120000      R     LCALL   _Conv_int_to_ascii
0019 CE                XCH     A,R6
001A EF                MOV     A,R7
001B CE                XCH     A,R6
                                           ; SOURCE LINE # 123
001C CF                XCH     A,R7
001D ED                MOV     A,R5
001E CF                XCH     A,R7
001F 120000      R     LCALL   _Conv_int_to_ascii
                                           ; SOURCE LINE # 131
0022 900000      R     MOV     DPTR,#ret
0025 EF                MOV     A,R7
0026 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 132
0027 CF                XCH     A,R7
0028 EE                MOV     A,R6
0029 CF                XCH     A,R7
002A A3                INC     DPTR
002B EF                MOV     A,R7
002C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 134
002D 900000      R     MOV     DPTR,#ret
0030 E0                MOVX    A,@DPTR
0031 FE                MOV     R6,A
0032 A3                INC     DPTR
0033 E0                MOVX    A,@DPTR
0034 FF                MOV     R7,A
                                           ; SOURCE LINE # 135
0035         ?C0026:
0035 22                RET     
             ; FUNCTION _Conv_u8_to_str (END)

             ; FUNCTION Rx_init (BEGIN)
                                           ; SOURCE LINE # 137
                                           ; SOURCE LINE # 139
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#rx
0004 F0                MOVX    @DPTR,A
0005         ?C0027:
0005 900000      R     MOV     DPTR,#rx
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9410              SUBB    A,#010H
000D 5014              JNC     ?C0028
                                           ; SOURCE LINE # 140
000F 7400        R     MOV     A,#LOW rx+03H
0011 2F                ADD     A,R7
0012 F582              MOV     DPL,A
0014 E4                CLR     A
0015 3400        R     ADDC    A,#HIGH rx+03H
0017 F583              MOV     DPH,A
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 141
001B 900000      R     MOV     DPTR,#rx
001E E0                MOVX    A,@DPTR
001F 04                INC     A
0020 F0                MOVX    @DPTR,A
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 41  

0021 80E2              SJMP    ?C0027
0023         ?C0028:
                                           ; SOURCE LINE # 142
0023 E4                CLR     A
0024 900000      R     MOV     DPTR,#rx
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 144
0028 22                RET     
             ; FUNCTION Rx_init (END)

             ; FUNCTION Tx_init (BEGIN)
                                           ; SOURCE LINE # 146
                                           ; SOURCE LINE # 148
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#tx
0004 F0                MOVX    @DPTR,A
0005         ?C0031:
0005 900000      R     MOV     DPTR,#tx
0008 E0                MOVX    A,@DPTR
0009 FF                MOV     R7,A
000A C3                CLR     C
000B 9410              SUBB    A,#010H
000D 5014              JNC     ?C0032
                                           ; SOURCE LINE # 149
000F 7400        R     MOV     A,#LOW tx+03H
0011 2F                ADD     A,R7
0012 F582              MOV     DPL,A
0014 E4                CLR     A
0015 3400        R     ADDC    A,#HIGH tx+03H
0017 F583              MOV     DPH,A
0019 E4                CLR     A
001A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 150
001B 900000      R     MOV     DPTR,#tx
001E E0                MOVX    A,@DPTR
001F 04                INC     A
0020 F0                MOVX    @DPTR,A
0021 80E2              SJMP    ?C0031
0023         ?C0032:
                                           ; SOURCE LINE # 151
0023 E4                CLR     A
0024 900000      R     MOV     DPTR,#tx
0027 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 152
0028 22                RET     
             ; FUNCTION Tx_init (END)

             ; FUNCTION _Buf_init (BEGIN)
                                           ; SOURCE LINE # 154
;---- Variable 'ptr' assigned to Register 'R1/R2/R3' ----
                                           ; SOURCE LINE # 156
0000 CE                XCH     A,R6
0001 EA                MOV     A,R2
0002 CE                XCH     A,R6
0003 CF                XCH     A,R7
0004 E9                MOV     A,R1
0005 CF                XCH     A,R7
;---- Variable 'bufp' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 158
0006 8F82              MOV     DPL,R7
0008 8E83              MOV     DPH,R6
000A E4                CLR     A
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 42  

000B F0                MOVX    @DPTR,A
000C         ?C0035:
000C 8F82              MOV     DPL,R7
000E 8E83              MOV     DPH,R6
0010 E0                MOVX    A,@DPTR
0011 FD                MOV     R5,A
0012 C3                CLR     C
0013 9410              SUBB    A,#010H
0015 5018              JNC     ?C0036
                                           ; SOURCE LINE # 159
0017 A3                INC     DPTR
0018 A3                INC     DPTR
0019 A3                INC     DPTR
001A E582              MOV     A,DPL
001C 2D                ADD     A,R5
001D F582              MOV     DPL,A
001F E4                CLR     A
0020 3583              ADDC    A,DPH
0022 F583              MOV     DPH,A
0024 E4                CLR     A
0025 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 160
0026 8F82              MOV     DPL,R7
0028 8E83              MOV     DPH,R6
002A E0                MOVX    A,@DPTR
002B 04                INC     A
002C F0                MOVX    @DPTR,A
002D 80DD              SJMP    ?C0035
002F         ?C0036:
                                           ; SOURCE LINE # 161
002F 8F82              MOV     DPL,R7
0031 8E83              MOV     DPH,R6
0033 E4                CLR     A
0034 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 162
0035 22                RET     
             ; FUNCTION _Buf_init (END)

             ; FUNCTION _FLASH_PageErase (BEGIN)
                                           ; SOURCE LINE # 165
;---- Variable 'addr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 173
0000 A2AF              MOV     C,EA
0002 9200        R     MOV     EA_SAVE,C
                                           ; SOURCE LINE # 176
0004 C2AF              CLR     EA
                                           ; SOURCE LINE # 178
0006 8E00        R     MOV     pwrite,R6
0008 8F00        R     MOV     pwrite+01H,R7
                                           ; SOURCE LINE # 180
000A 43B601            ORL     FLSCL,#01H
                                           ; SOURCE LINE # 181
000D 438F03            ORL     PSCTL,#03H
                                           ; SOURCE LINE # 183
0010 300003      R     JNB     SFLE,?C0039
                                           ; SOURCE LINE # 184
0013 438F04            ORL     PSCTL,#04H
                                           ; SOURCE LINE # 185
0016         ?C0039:
                                           ; SOURCE LINE # 187
0016 850082      R     MOV     DPL,pwrite+01H
0019 850083      R     MOV     DPH,pwrite
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 43  

001C E4                CLR     A
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 189
001E 300003      R     JNB     SFLE,?C0040
                                           ; SOURCE LINE # 190
0021 538FFB            ANL     PSCTL,#0FBH
                                           ; SOURCE LINE # 191
0024         ?C0040:
                                           ; SOURCE LINE # 193
0024 538FFC            ANL     PSCTL,#0FCH
                                           ; SOURCE LINE # 194
0027 53B6FE            ANL     FLSCL,#0FEH
                                           ; SOURCE LINE # 196
002A A200        R     MOV     C,EA_SAVE
002C 92AF              MOV     EA,C
                                           ; SOURCE LINE # 197
002E 22                RET     
             ; FUNCTION _FLASH_PageErase (END)

             ; FUNCTION _FLASH_ByteWrite (BEGIN)
                                           ; SOURCE LINE # 199
;---- Variable 'byte' assigned to Register 'R5' ----
;---- Variable 'addr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 210
0000 A2AF              MOV     C,EA
0002 9200        R     MOV     EA_SAVE,C
                                           ; SOURCE LINE # 213
0004 C2AF              CLR     EA
                                           ; SOURCE LINE # 215
0006 8E00        R     MOV     pwrite,R6
0008 8F00        R     MOV     pwrite+01H,R7
                                           ; SOURCE LINE # 217
000A 43B601            ORL     FLSCL,#01H
                                           ; SOURCE LINE # 218
000D 438F01            ORL     PSCTL,#01H
                                           ; SOURCE LINE # 220
0010 300003      R     JNB     SFLE,?C0042
                                           ; SOURCE LINE # 221
0013 438F04            ORL     PSCTL,#04H
                                           ; SOURCE LINE # 222
0016         ?C0042:
                                           ; SOURCE LINE # 224
0016 850082      R     MOV     DPL,pwrite+01H
0019 850083      R     MOV     DPH,pwrite
001C ED                MOV     A,R5
001D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 226
001E 300003      R     JNB     SFLE,?C0043
                                           ; SOURCE LINE # 227
0021 538FFB            ANL     PSCTL,#0FBH
                                           ; SOURCE LINE # 228
0024         ?C0043:
                                           ; SOURCE LINE # 230
0024 538FFE            ANL     PSCTL,#0FEH
                                           ; SOURCE LINE # 231
0027 53B6FE            ANL     FLSCL,#0FEH
                                           ; SOURCE LINE # 233
002A A200        R     MOV     C,EA_SAVE
002C 92AF              MOV     EA,C
                                           ; SOURCE LINE # 234
002E 22                RET     
             ; FUNCTION _FLASH_ByteWrite (END)
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 44  


             ; FUNCTION _FLASH_ByteRead (BEGIN)
                                           ; SOURCE LINE # 236
;---- Variable 'addr' assigned to Register 'R6/R7' ----
                                           ; SOURCE LINE # 243
0000 A2AF              MOV     C,EA
0002 9200        R     MOV     EA_SAVE,C
                                           ; SOURCE LINE # 247
0004 C2AF              CLR     EA
                                           ; SOURCE LINE # 249
0006 8E00        R     MOV     pread,R6
0008 8F00        R     MOV     pread+01H,R7
                                           ; SOURCE LINE # 251
000A 300003      R     JNB     SFLE,?C0045
                                           ; SOURCE LINE # 252
000D 438F04            ORL     PSCTL,#04H
                                           ; SOURCE LINE # 253
0010         ?C0045:
                                           ; SOURCE LINE # 255
0010 850082      R     MOV     DPL,pread+01H
0013 850083      R     MOV     DPH,pread
0016 E4                CLR     A
0017 93                MOVC    A,@A+DPTR
0018 FF                MOV     R7,A
;---- Variable 'byte' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 257
0019 300003      R     JNB     SFLE,?C0046
                                           ; SOURCE LINE # 258
001C 538FFB            ANL     PSCTL,#0FBH
                                           ; SOURCE LINE # 259
001F         ?C0046:
                                           ; SOURCE LINE # 261
001F A200        R     MOV     C,EA_SAVE
0021 92AF              MOV     EA,C
                                           ; SOURCE LINE # 263
                                           ; SOURCE LINE # 264
0023         ?C0047:
0023 22                RET     
             ; FUNCTION _FLASH_ByteRead (END)

             ; FUNCTION FLASH_Save (BEGIN)
                                           ; SOURCE LINE # 266
                                           ; SOURCE LINE # 270
0000 D200        R     SETB    ?_FLASH_PageErase?BIT
0002 E4                CLR     A
0003 FF                MOV     R7,A
0004 FE                MOV     R6,A
0005 120000      R     LCALL   _FLASH_PageErase
                                           ; SOURCE LINE # 271
;---- Variable 'i' assigned to Register 'R4' ----
0008 E4                CLR     A
0009 FC                MOV     R4,A
000A         ?C0048:
                                           ; SOURCE LINE # 272
000A EC                MOV     A,R4
000B FF                MOV     R7,A
000C 7E00              MOV     R6,#00H
000E 2400        R     ADD     A,#LOW var128
0010 F582              MOV     DPL,A
0012 E4                CLR     A
0013 3400        R     ADDC    A,#HIGH var128
0015 F583              MOV     DPH,A
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 45  

0017 E0                MOVX    A,@DPTR
0018 FD                MOV     R5,A
0019 D200        R     SETB    ?_FLASH_ByteWrite?BIT
001B 120000      R     LCALL   _FLASH_ByteWrite
                                           ; SOURCE LINE # 273
001E 0C                INC     R4
001F EC                MOV     A,R4
0020 B480E7            CJNE    A,#080H,?C0048
                                           ; SOURCE LINE # 276
0023         ?C0051:
0023 22                RET     
             ; FUNCTION FLASH_Save (END)

             ; FUNCTION FLASH_Load (BEGIN)
                                           ; SOURCE LINE # 278
                                           ; SOURCE LINE # 281
;---- Variable 'i' assigned to Register 'R5' ----
0000 E4                CLR     A
0001 FD                MOV     R5,A
0002         ?C0052:
                                           ; SOURCE LINE # 282
0002 ED                MOV     A,R5
0003 FF                MOV     R7,A
0004 7E00              MOV     R6,#00H
0006 D200        R     SETB    ?_FLASH_ByteRead?BIT
0008 120000      R     LCALL   _FLASH_ByteRead
000B 7400        R     MOV     A,#LOW var128
000D 2D                ADD     A,R5
000E F582              MOV     DPL,A
0010 E4                CLR     A
0011 3400        R     ADDC    A,#HIGH var128
0013 F583              MOV     DPH,A
0015 EF                MOV     A,R7
0016 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 283
0017 0D                INC     R5
0018 ED                MOV     A,R5
0019 B480E6            CJNE    A,#080H,?C0052
                                           ; SOURCE LINE # 284
001C         ?C0055:
001C 22                RET     
             ; FUNCTION FLASH_Load (END)

             ; FUNCTION _ADC0_set_diff (BEGIN)
                                           ; SOURCE LINE # 287
;---- Variable 'mode' assigned to Register 'R5' ----
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 290
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9400              SUBB    A,#00H
0004 405D              JC      ?C0056
0006 EF                MOV     A,R7
0007 D3                SETB    C
0008 9407              SUBB    A,#07H
000A 5057              JNC     ?C0056
                                           ; SOURCE LINE # 291
000C EF                MOV     A,R7
000D B40800            CJNE    A,#08H,?C0254
0010         ?C0254:
0010 5051              JNC     ?C0056
0012 900000      R     MOV     DPTR,#?C0255
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 46  

0015 F8                MOV     R0,A
0016 28                ADD     A,R0
0017 28                ADD     A,R0
0018 73                JMP     @A+DPTR
0019         ?C0255:
0019 020000      R     LJMP    ?C0059
001C 020000      R     LJMP    ?C0059
001F 020000      R     LJMP    ?C0063
0022 020000      R     LJMP    ?C0063
0025 020000      R     LJMP    ?C0067
0028 020000      R     LJMP    ?C0067
002B 020000      R     LJMP    ?C0071
002E 020000      R     LJMP    ?C0071
                                           ; SOURCE LINE # 292
                                           ; SOURCE LINE # 293
0031         ?C0059:
                                           ; SOURCE LINE # 294
0031 ED                MOV     A,R5
0032 7005              JNZ     ?C0060
0034 53BAFE            ANL     AMX0CF,#0FEH
0037 802A              SJMP    ?C0056
0039         ?C0060:
                                           ; SOURCE LINE # 295
0039 43BA01            ORL     AMX0CF,#01H
                                           ; SOURCE LINE # 296
003C 8025              SJMP    ?C0056
                                           ; SOURCE LINE # 297
                                           ; SOURCE LINE # 298
003E         ?C0063:
                                           ; SOURCE LINE # 299
003E ED                MOV     A,R5
003F 7005              JNZ     ?C0064
0041 53BAFD            ANL     AMX0CF,#0FDH
0044 801D              SJMP    ?C0056
0046         ?C0064:
                                           ; SOURCE LINE # 300
0046 43BA02            ORL     AMX0CF,#02H
                                           ; SOURCE LINE # 301
0049 8018              SJMP    ?C0056
                                           ; SOURCE LINE # 302
                                           ; SOURCE LINE # 303
004B         ?C0067:
                                           ; SOURCE LINE # 304
004B ED                MOV     A,R5
004C 7005              JNZ     ?C0068
004E 53BAFB            ANL     AMX0CF,#0FBH
0051 8010              SJMP    ?C0056
0053         ?C0068:
                                           ; SOURCE LINE # 305
0053 43BA04            ORL     AMX0CF,#04H
                                           ; SOURCE LINE # 306
0056 800B              SJMP    ?C0056
                                           ; SOURCE LINE # 307
                                           ; SOURCE LINE # 308
0058         ?C0071:
                                           ; SOURCE LINE # 309
0058 ED                MOV     A,R5
0059 7005              JNZ     ?C0072
005B 53BAF7            ANL     AMX0CF,#0F7H
005E 8003              SJMP    ?C0056
0060         ?C0072:
                                           ; SOURCE LINE # 310
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 47  

0060 43BA08            ORL     AMX0CF,#08H
                                           ; SOURCE LINE # 311
                                           ; SOURCE LINE # 312
                                           ; SOURCE LINE # 313
0063         ?C0056:
                                           ; SOURCE LINE # 316
;---- Variable 'cnt' assigned to Register 'R7' ----
0063 7F05              MOV     R7,#05H
0065         ?C0074:
0065 DFFE              DJNZ    R7,?C0074
                                           ; SOURCE LINE # 318
0067         ?C0077:
0067 22                RET     
             ; FUNCTION _ADC0_set_diff (END)

             ; FUNCTION L?0321 (BEGIN)
0000 CF                XCH     A,R7
0001 ED                MOV     A,R5
0002 CF                XCH     A,R7
0003 900000      R     MOV     DPTR,#rxmsg+05H
0006 E0                MOVX    A,@DPTR
0007 FD                MOV     R5,A
             ; FUNCTION _set_dout (BEGIN)
                                           ; SOURCE LINE # 320
;---- Variable 'bitmask' assigned to Register 'R6' ----
;---- Variable 'idx' assigned to Register 'R7' ----
;---- Variable 'val' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 322
0008 EF                MOV     A,R7
0009 C3                CLR     C
000A 9430              SUBB    A,#030H
000C 4003              JC      $ + 5H
000E 020000      R     LJMP    ?C0102
                                           ; SOURCE LINE # 323
0011 EF                MOV     A,R7
0012 C3                CLR     C
0013 9400              SUBB    A,#00H
0015 401F              JC      ?C0079
0017 EF                MOV     A,R7
0018 D3                SETB    C
0019 9407              SUBB    A,#07H
001B 5019              JNC     ?C0079
                                           ; SOURCE LINE # 325
001D 7401              MOV     A,#01H
001F C8                XCH     A,R0
0020 EF                MOV     A,R7
0021 C8                XCH     A,R0
0022 08                INC     R0
0023 8002              SJMP    ?C0257
0025         ?C0256:
0025 C3                CLR     C
0026 33                RLC     A
0027         ?C0257:
0027 D8FC              DJNZ    R0,?C0256
0029 FE                MOV     R6,A
                                           ; SOURCE LINE # 326
002A ED                MOV     A,R5
002B 6005              JZ      ?C0080
002D EE                MOV     A,R6
002E F4                CPL     A
002F 5284              ANL     P4,A
0031 22                RET     
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 48  

0032         ?C0080:
                                           ; SOURCE LINE # 327
0032 EE                MOV     A,R6
0033 4284              ORL     P4,A
                                           ; SOURCE LINE # 328
0035 22                RET     
0036         ?C0079:
                                           ; SOURCE LINE # 329
0036 EF                MOV     A,R7
0037 C3                CLR     C
0038 9408              SUBB    A,#08H
003A 4023              JC      ?C0083
003C EF                MOV     A,R7
003D D3                SETB    C
003E 940F              SUBB    A,#0FH
0040 501D              JNC     ?C0083
                                           ; SOURCE LINE # 331
0042 EF                MOV     A,R7
0043 24F8              ADD     A,#0F8H
0045 FE                MOV     R6,A
0046 7401              MOV     A,#01H
0048 C8                XCH     A,R0
0049 EE                MOV     A,R6
004A C8                XCH     A,R0
004B 08                INC     R0
004C 8002              SJMP    ?C0259
004E         ?C0258:
004E C3                CLR     C
004F 33                RLC     A
0050         ?C0259:
0050 D8FC              DJNZ    R0,?C0258
0052 FE                MOV     R6,A
                                           ; SOURCE LINE # 332
0053 ED                MOV     A,R5
0054 6005              JZ      ?C0084
0056 EE                MOV     A,R6
0057 F4                CPL     A
0058 5285              ANL     P5,A
005A 22                RET     
005B         ?C0084:
                                           ; SOURCE LINE # 333
005B EE                MOV     A,R6
005C 4285              ORL     P5,A
                                           ; SOURCE LINE # 334
005E 22                RET     
005F         ?C0083:
                                           ; SOURCE LINE # 335
005F EF                MOV     A,R7
0060 C3                CLR     C
0061 9410              SUBB    A,#010H
0063 4023              JC      ?C0087
0065 EF                MOV     A,R7
0066 D3                SETB    C
0067 9417              SUBB    A,#017H
0069 501D              JNC     ?C0087
                                           ; SOURCE LINE # 337
006B EF                MOV     A,R7
006C 24F0              ADD     A,#0F0H
006E FE                MOV     R6,A
006F 7401              MOV     A,#01H
0071 C8                XCH     A,R0
0072 EE                MOV     A,R6
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 49  

0073 C8                XCH     A,R0
0074 08                INC     R0
0075 8002              SJMP    ?C0261
0077         ?C0260:
0077 C3                CLR     C
0078 33                RLC     A
0079         ?C0261:
0079 D8FC              DJNZ    R0,?C0260
007B FE                MOV     R6,A
                                           ; SOURCE LINE # 338
007C ED                MOV     A,R5
007D 6005              JZ      ?C0088
007F EE                MOV     A,R6
0080 F4                CPL     A
0081 52B0              ANL     P3,A
0083 22                RET     
0084         ?C0088:
                                           ; SOURCE LINE # 339
0084 EE                MOV     A,R6
0085 42B0              ORL     P3,A
                                           ; SOURCE LINE # 340
0087 22                RET     
0088         ?C0087:
                                           ; SOURCE LINE # 341
0088 EF                MOV     A,R7
0089 C3                CLR     C
008A 9418              SUBB    A,#018H
008C 4023              JC      ?C0091
008E EF                MOV     A,R7
008F D3                SETB    C
0090 941F              SUBB    A,#01FH
0092 501D              JNC     ?C0091
                                           ; SOURCE LINE # 343
0094 EF                MOV     A,R7
0095 24E8              ADD     A,#0E8H
0097 FE                MOV     R6,A
0098 7401              MOV     A,#01H
009A C8                XCH     A,R0
009B EE                MOV     A,R6
009C C8                XCH     A,R0
009D 08                INC     R0
009E 8002              SJMP    ?C0263
00A0         ?C0262:
00A0 C3                CLR     C
00A1 33                RLC     A
00A2         ?C0263:
00A2 D8FC              DJNZ    R0,?C0262
00A4 FE                MOV     R6,A
                                           ; SOURCE LINE # 344
00A5 ED                MOV     A,R5
00A6 6005              JZ      ?C0092
00A8 EE                MOV     A,R6
00A9 F4                CPL     A
00AA 52A0              ANL     P2,A
00AC 22                RET     
00AD         ?C0092:
                                           ; SOURCE LINE # 345
00AD EE                MOV     A,R6
00AE 42A0              ORL     P2,A
                                           ; SOURCE LINE # 346
00B0 22                RET     
00B1         ?C0091:
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 50  

                                           ; SOURCE LINE # 347
00B1 EF                MOV     A,R7
00B2 C3                CLR     C
00B3 9420              SUBB    A,#020H
00B5 4023              JC      ?C0095
00B7 EF                MOV     A,R7
00B8 D3                SETB    C
00B9 9427              SUBB    A,#027H
00BB 501D              JNC     ?C0095
                                           ; SOURCE LINE # 349
00BD EF                MOV     A,R7
00BE 24E0              ADD     A,#0E0H
00C0 FE                MOV     R6,A
00C1 7401              MOV     A,#01H
00C3 C8                XCH     A,R0
00C4 EE                MOV     A,R6
00C5 C8                XCH     A,R0
00C6 08                INC     R0
00C7 8002              SJMP    ?C0265
00C9         ?C0264:
00C9 C3                CLR     C
00CA 33                RLC     A
00CB         ?C0265:
00CB D8FC              DJNZ    R0,?C0264
00CD FE                MOV     R6,A
                                           ; SOURCE LINE # 350
00CE ED                MOV     A,R5
00CF 6005              JZ      ?C0096
00D1 EE                MOV     A,R6
00D2 F4                CPL     A
00D3 5286              ANL     P6,A
00D5 22                RET     
00D6         ?C0096:
                                           ; SOURCE LINE # 351
00D6 EE                MOV     A,R6
00D7 4286              ORL     P6,A
                                           ; SOURCE LINE # 352
00D9 22                RET     
00DA         ?C0095:
                                           ; SOURCE LINE # 353
00DA EF                MOV     A,R7
00DB C3                CLR     C
00DC 9428              SUBB    A,#028H
00DE 4022              JC      ?C0102
00E0 EF                MOV     A,R7
00E1 D3                SETB    C
00E2 942F              SUBB    A,#02FH
00E4 501C              JNC     ?C0102
                                           ; SOURCE LINE # 355
00E6 EF                MOV     A,R7
00E7 24D8              ADD     A,#0D8H
00E9 FF                MOV     R7,A
00EA 7401              MOV     A,#01H
00EC C8                XCH     A,R0
00ED EF                MOV     A,R7
00EE C8                XCH     A,R0
00EF 08                INC     R0
00F0 8002              SJMP    ?C0267
00F2         ?C0266:
00F2 C3                CLR     C
00F3 33                RLC     A
00F4         ?C0267:
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 51  

00F4 D8FC              DJNZ    R0,?C0266
00F6 FE                MOV     R6,A
                                           ; SOURCE LINE # 356
00F7 ED                MOV     A,R5
00F8 6005              JZ      ?C0100
00FA EE                MOV     A,R6
00FB F4                CPL     A
00FC 5296              ANL     P7,A
00FE 22                RET     
00FF         ?C0100:
                                           ; SOURCE LINE # 357
00FF EE                MOV     A,R6
0100 4296              ORL     P7,A
                                           ; SOURCE LINE # 358
                                           ; SOURCE LINE # 361
                                           ; SOURCE LINE # 362
0102         ?C0102:
0102 22                RET     
             ; FUNCTION _set_dout (END)

             ; FUNCTION _set_aout (BEGIN)
                                           ; SOURCE LINE # 364
0000 900000      R     MOV     DPTR,#val
0003 EC                MOV     A,R4
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 ED                MOV     A,R5
0007 F0                MOVX    @DPTR,A
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 366
0008 E0                MOVX    A,@DPTR
0009 FE                MOV     R6,A
;---- Variable 'low' assigned to Register 'R6' ----
                                           ; SOURCE LINE # 367
000A 900000      R     MOV     DPTR,#val
000D E0                MOVX    A,@DPTR
000E 540F              ANL     A,#0FH
0010 FD                MOV     R5,A
;---- Variable 'high' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 369
0011 EF                MOV     A,R7
0012 14                DEC     A
0013 6008              JZ      ?C0105
0015 04                INC     A
0016 700F              JNZ     ?C0106
                                           ; SOURCE LINE # 370
0018         ?C0104:
                                           ; SOURCE LINE # 371
0018 8ED2              MOV     DAC0L,R6
                                           ; SOURCE LINE # 372
001A 8DD3              MOV     DAC0H,R5
                                           ; SOURCE LINE # 373
001C 22                RET     
                                           ; SOURCE LINE # 374
001D         ?C0105:
                                           ; SOURCE LINE # 375
001D CF                XCH     A,R7
001E EE                MOV     A,R6
001F CF                XCH     A,R7
0020 8FD5              MOV     DAC1L,R7
                                           ; SOURCE LINE # 376
0022 CF                XCH     A,R7
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 52  

0023 ED                MOV     A,R5
0024 CF                XCH     A,R7
0025 8FD6              MOV     DAC1H,R7
                                           ; SOURCE LINE # 377
                                           ; SOURCE LINE # 378
                                           ; SOURCE LINE # 380
0027         ?C0106:
0027 22                RET     
             ; FUNCTION _set_aout (END)

             ; FUNCTION _get_din (BEGIN)
                                           ; SOURCE LINE # 382
;---- Variable 'bitmask' assigned to Register 'R6' ----
;---- Variable 'idx' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 384
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9430              SUBB    A,#030H
0004 4003              JC      $ + 5H
0006 020000      R     LJMP    ?C0107
                                           ; SOURCE LINE # 385
0009 EF                MOV     A,R7
000A C3                CLR     C
000B 9400              SUBB    A,#00H
000D 4022              JC      ?C0108
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9407              SUBB    A,#07H
0013 501C              JNC     ?C0108
                                           ; SOURCE LINE # 387
0015 7401              MOV     A,#01H
0017 C8                XCH     A,R0
0018 EF                MOV     A,R7
0019 C8                XCH     A,R0
001A 08                INC     R0
001B 8002              SJMP    ?C0269
001D         ?C0268:
001D C3                CLR     C
001E 33                RLC     A
001F         ?C0269:
001F D8FC              DJNZ    R0,?C0268
0021 FE                MOV     R6,A
                                           ; SOURCE LINE # 388
0022 E4                CLR     A
0023 F584              MOV     P4,A
                                           ; SOURCE LINE # 389
0025 7584FF            MOV     P4,#0FFH
                                           ; SOURCE LINE # 390
0028 E584              MOV     A,P4
002A 5E                ANL     A,R6
002B 6002              JZ      ?C0109
002D D3                SETB    C
002E 22                RET     
002F         ?C0109:
                                           ; SOURCE LINE # 391
002F C3                CLR     C
0030 22                RET     
                                           ; SOURCE LINE # 392
0031         ?C0108:
                                           ; SOURCE LINE # 393
0031 EF                MOV     A,R7
0032 C3                CLR     C
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 53  

0033 9408              SUBB    A,#08H
0035 4026              JC      ?C0113
0037 EF                MOV     A,R7
0038 D3                SETB    C
0039 940F              SUBB    A,#0FH
003B 5020              JNC     ?C0113
                                           ; SOURCE LINE # 395
003D EF                MOV     A,R7
003E 24F8              ADD     A,#0F8H
0040 FE                MOV     R6,A
0041 7401              MOV     A,#01H
0043 C8                XCH     A,R0
0044 EE                MOV     A,R6
0045 C8                XCH     A,R0
0046 08                INC     R0
0047 8002              SJMP    ?C0271
0049         ?C0270:
0049 C3                CLR     C
004A 33                RLC     A
004B         ?C0271:
004B D8FC              DJNZ    R0,?C0270
004D FE                MOV     R6,A
                                           ; SOURCE LINE # 396
004E E4                CLR     A
004F F585              MOV     P5,A
                                           ; SOURCE LINE # 397
0051 7585FF            MOV     P5,#0FFH
                                           ; SOURCE LINE # 398
0054 E585              MOV     A,P5
0056 5E                ANL     A,R6
0057 6002              JZ      ?C0114
0059 D3                SETB    C
005A 22                RET     
005B         ?C0114:
                                           ; SOURCE LINE # 399
005B C3                CLR     C
005C 22                RET     
                                           ; SOURCE LINE # 400
005D         ?C0113:
                                           ; SOURCE LINE # 401
005D EF                MOV     A,R7
005E C3                CLR     C
005F 9410              SUBB    A,#010H
0061 4026              JC      ?C0117
0063 EF                MOV     A,R7
0064 D3                SETB    C
0065 9417              SUBB    A,#017H
0067 5020              JNC     ?C0117
                                           ; SOURCE LINE # 403
0069 EF                MOV     A,R7
006A 24F0              ADD     A,#0F0H
006C FE                MOV     R6,A
006D 7401              MOV     A,#01H
006F C8                XCH     A,R0
0070 EE                MOV     A,R6
0071 C8                XCH     A,R0
0072 08                INC     R0
0073 8002              SJMP    ?C0273
0075         ?C0272:
0075 C3                CLR     C
0076 33                RLC     A
0077         ?C0273:
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 54  

0077 D8FC              DJNZ    R0,?C0272
0079 FE                MOV     R6,A
                                           ; SOURCE LINE # 404
007A E4                CLR     A
007B F5B0              MOV     P3,A
                                           ; SOURCE LINE # 405
007D 75B0FF            MOV     P3,#0FFH
                                           ; SOURCE LINE # 406
0080 E5B0              MOV     A,P3
0082 5E                ANL     A,R6
0083 6002              JZ      ?C0118
0085 D3                SETB    C
0086 22                RET     
0087         ?C0118:
                                           ; SOURCE LINE # 407
0087 C3                CLR     C
0088 22                RET     
                                           ; SOURCE LINE # 408
0089         ?C0117:
                                           ; SOURCE LINE # 409
0089 EF                MOV     A,R7
008A C3                CLR     C
008B 9418              SUBB    A,#018H
008D 4026              JC      ?C0121
008F EF                MOV     A,R7
0090 D3                SETB    C
0091 941F              SUBB    A,#01FH
0093 5020              JNC     ?C0121
                                           ; SOURCE LINE # 411
0095 EF                MOV     A,R7
0096 24E8              ADD     A,#0E8H
0098 FE                MOV     R6,A
0099 7401              MOV     A,#01H
009B C8                XCH     A,R0
009C EE                MOV     A,R6
009D C8                XCH     A,R0
009E 08                INC     R0
009F 8002              SJMP    ?C0275
00A1         ?C0274:
00A1 C3                CLR     C
00A2 33                RLC     A
00A3         ?C0275:
00A3 D8FC              DJNZ    R0,?C0274
00A5 FE                MOV     R6,A
                                           ; SOURCE LINE # 412
00A6 E4                CLR     A
00A7 F5A0              MOV     P2,A
                                           ; SOURCE LINE # 413
00A9 75A0FF            MOV     P2,#0FFH
                                           ; SOURCE LINE # 414
00AC E5A0              MOV     A,P2
00AE 5E                ANL     A,R6
00AF 6002              JZ      ?C0122
00B1 D3                SETB    C
00B2 22                RET     
00B3         ?C0122:
                                           ; SOURCE LINE # 415
00B3 C3                CLR     C
00B4 22                RET     
                                           ; SOURCE LINE # 416
00B5         ?C0121:
                                           ; SOURCE LINE # 417
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 55  

00B5 EF                MOV     A,R7
00B6 C3                CLR     C
00B7 9420              SUBB    A,#020H
00B9 4026              JC      ?C0125
00BB EF                MOV     A,R7
00BC D3                SETB    C
00BD 9427              SUBB    A,#027H
00BF 5020              JNC     ?C0125
                                           ; SOURCE LINE # 419
00C1 EF                MOV     A,R7
00C2 24E0              ADD     A,#0E0H
00C4 FE                MOV     R6,A
00C5 7401              MOV     A,#01H
00C7 C8                XCH     A,R0
00C8 EE                MOV     A,R6
00C9 C8                XCH     A,R0
00CA 08                INC     R0
00CB 8002              SJMP    ?C0277
00CD         ?C0276:
00CD C3                CLR     C
00CE 33                RLC     A
00CF         ?C0277:
00CF D8FC              DJNZ    R0,?C0276
00D1 FE                MOV     R6,A
                                           ; SOURCE LINE # 420
00D2 E4                CLR     A
00D3 F586              MOV     P6,A
                                           ; SOURCE LINE # 421
00D5 7586FF            MOV     P6,#0FFH
                                           ; SOURCE LINE # 422
00D8 E586              MOV     A,P6
00DA 5E                ANL     A,R6
00DB 6002              JZ      ?C0126
00DD D3                SETB    C
00DE 22                RET     
00DF         ?C0126:
                                           ; SOURCE LINE # 423
00DF C3                CLR     C
00E0 22                RET     
                                           ; SOURCE LINE # 424
00E1         ?C0125:
                                           ; SOURCE LINE # 425
00E1 EF                MOV     A,R7
00E2 C3                CLR     C
00E3 9428              SUBB    A,#028H
00E5 4026              JC      ?C0107
00E7 EF                MOV     A,R7
00E8 D3                SETB    C
00E9 942F              SUBB    A,#02FH
00EB 5020              JNC     ?C0107
                                           ; SOURCE LINE # 427
00ED EF                MOV     A,R7
00EE 24D8              ADD     A,#0D8H
00F0 FF                MOV     R7,A
00F1 7401              MOV     A,#01H
00F3 C8                XCH     A,R0
00F4 EF                MOV     A,R7
00F5 C8                XCH     A,R0
00F6 08                INC     R0
00F7 8002              SJMP    ?C0279
00F9         ?C0278:
00F9 C3                CLR     C
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 56  

00FA 33                RLC     A
00FB         ?C0279:
00FB D8FC              DJNZ    R0,?C0278
00FD FE                MOV     R6,A
                                           ; SOURCE LINE # 428
00FE E4                CLR     A
00FF F596              MOV     P7,A
                                           ; SOURCE LINE # 429
0101 7596FF            MOV     P7,#0FFH
                                           ; SOURCE LINE # 430
0104 E596              MOV     A,P7
0106 5E                ANL     A,R6
0107 6002              JZ      ?C0130
0109 D3                SETB    C
010A 22                RET     
010B         ?C0130:
                                           ; SOURCE LINE # 431
010B C3                CLR     C
010C 22                RET     
                                           ; SOURCE LINE # 432
                                           ; SOURCE LINE # 433
010D         ?C0107:
                                           ; SOURCE LINE # 434
010D C3                CLR     C
                                           ; SOURCE LINE # 436
010E         ?C0110:
010E 22                RET     
             ; FUNCTION _get_din (END)

             ; FUNCTION _get_dout (BEGIN)
                                           ; SOURCE LINE # 438
;---- Variable 'bitmask' assigned to Register 'R6' ----
;---- Variable 'idx' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 440
0000 EF                MOV     A,R7
0001 C3                CLR     C
0002 9430              SUBB    A,#030H
0004 4003              JC      $ + 5H
0006 020000      R     LJMP    ?C0132
                                           ; SOURCE LINE # 441
0009 EF                MOV     A,R7
000A C3                CLR     C
000B 9400              SUBB    A,#00H
000D 401A              JC      ?C0133
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9407              SUBB    A,#07H
0013 5014              JNC     ?C0133
                                           ; SOURCE LINE # 443
0015 7401              MOV     A,#01H
0017 C8                XCH     A,R0
0018 EF                MOV     A,R7
0019 C8                XCH     A,R0
001A 08                INC     R0
001B 8002              SJMP    ?C0281
001D         ?C0280:
001D C3                CLR     C
001E 33                RLC     A
001F         ?C0281:
001F D8FC              DJNZ    R0,?C0280
                                           ; SOURCE LINE # 446
0021 5584              ANL     A,P4
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 57  

0023 6002              JZ      ?C0134
0025 D3                SETB    C
0026 22                RET     
0027         ?C0134:
                                           ; SOURCE LINE # 447
0027 C3                CLR     C
0028 22                RET     
                                           ; SOURCE LINE # 448
0029         ?C0133:
                                           ; SOURCE LINE # 449
0029 EF                MOV     A,R7
002A C3                CLR     C
002B 9408              SUBB    A,#08H
002D 401E              JC      ?C0138
002F EF                MOV     A,R7
0030 D3                SETB    C
0031 940F              SUBB    A,#0FH
0033 5018              JNC     ?C0138
                                           ; SOURCE LINE # 451
0035 EF                MOV     A,R7
0036 24F8              ADD     A,#0F8H
0038 FE                MOV     R6,A
0039 7401              MOV     A,#01H
003B C8                XCH     A,R0
003C EE                MOV     A,R6
003D C8                XCH     A,R0
003E 08                INC     R0
003F 8002              SJMP    ?C0283
0041         ?C0282:
0041 C3                CLR     C
0042 33                RLC     A
0043         ?C0283:
0043 D8FC              DJNZ    R0,?C0282
                                           ; SOURCE LINE # 454
0045 5585              ANL     A,P5
0047 6002              JZ      ?C0139
0049 D3                SETB    C
004A 22                RET     
004B         ?C0139:
                                           ; SOURCE LINE # 455
004B C3                CLR     C
004C 22                RET     
                                           ; SOURCE LINE # 456
004D         ?C0138:
                                           ; SOURCE LINE # 457
004D EF                MOV     A,R7
004E C3                CLR     C
004F 9410              SUBB    A,#010H
0051 401E              JC      ?C0142
0053 EF                MOV     A,R7
0054 D3                SETB    C
0055 9417              SUBB    A,#017H
0057 5018              JNC     ?C0142
                                           ; SOURCE LINE # 459
0059 EF                MOV     A,R7
005A 24F0              ADD     A,#0F0H
005C FE                MOV     R6,A
005D 7401              MOV     A,#01H
005F C8                XCH     A,R0
0060 EE                MOV     A,R6
0061 C8                XCH     A,R0
0062 08                INC     R0
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 58  

0063 8002              SJMP    ?C0285
0065         ?C0284:
0065 C3                CLR     C
0066 33                RLC     A
0067         ?C0285:
0067 D8FC              DJNZ    R0,?C0284
                                           ; SOURCE LINE # 462
0069 55B0              ANL     A,P3
006B 6002              JZ      ?C0143
006D D3                SETB    C
006E 22                RET     
006F         ?C0143:
                                           ; SOURCE LINE # 463
006F C3                CLR     C
0070 22                RET     
                                           ; SOURCE LINE # 464
0071         ?C0142:
                                           ; SOURCE LINE # 465
0071 EF                MOV     A,R7
0072 C3                CLR     C
0073 9418              SUBB    A,#018H
0075 401E              JC      ?C0146
0077 EF                MOV     A,R7
0078 D3                SETB    C
0079 941F              SUBB    A,#01FH
007B 5018              JNC     ?C0146
                                           ; SOURCE LINE # 467
007D EF                MOV     A,R7
007E 24E8              ADD     A,#0E8H
0080 FE                MOV     R6,A
0081 7401              MOV     A,#01H
0083 C8                XCH     A,R0
0084 EE                MOV     A,R6
0085 C8                XCH     A,R0
0086 08                INC     R0
0087 8002              SJMP    ?C0287
0089         ?C0286:
0089 C3                CLR     C
008A 33                RLC     A
008B         ?C0287:
008B D8FC              DJNZ    R0,?C0286
                                           ; SOURCE LINE # 470
008D 55A0              ANL     A,P2
008F 6002              JZ      ?C0147
0091 D3                SETB    C
0092 22                RET     
0093         ?C0147:
                                           ; SOURCE LINE # 471
0093 C3                CLR     C
0094 22                RET     
                                           ; SOURCE LINE # 472
0095         ?C0146:
                                           ; SOURCE LINE # 473
0095 EF                MOV     A,R7
0096 C3                CLR     C
0097 9420              SUBB    A,#020H
0099 401E              JC      ?C0150
009B EF                MOV     A,R7
009C D3                SETB    C
009D 9427              SUBB    A,#027H
009F 5018              JNC     ?C0150
                                           ; SOURCE LINE # 475
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 59  

00A1 EF                MOV     A,R7
00A2 24E0              ADD     A,#0E0H
00A4 FE                MOV     R6,A
00A5 7401              MOV     A,#01H
00A7 C8                XCH     A,R0
00A8 EE                MOV     A,R6
00A9 C8                XCH     A,R0
00AA 08                INC     R0
00AB 8002              SJMP    ?C0289
00AD         ?C0288:
00AD C3                CLR     C
00AE 33                RLC     A
00AF         ?C0289:
00AF D8FC              DJNZ    R0,?C0288
                                           ; SOURCE LINE # 478
00B1 5586              ANL     A,P6
00B3 6002              JZ      ?C0151
00B5 D3                SETB    C
00B6 22                RET     
00B7         ?C0151:
                                           ; SOURCE LINE # 479
00B7 C3                CLR     C
00B8 22                RET     
                                           ; SOURCE LINE # 480
00B9         ?C0150:
                                           ; SOURCE LINE # 481
00B9 EF                MOV     A,R7
00BA C3                CLR     C
00BB 9428              SUBB    A,#028H
00BD 401E              JC      ?C0132
00BF EF                MOV     A,R7
00C0 D3                SETB    C
00C1 942F              SUBB    A,#02FH
00C3 5018              JNC     ?C0132
                                           ; SOURCE LINE # 483
00C5 EF                MOV     A,R7
00C6 24D8              ADD     A,#0D8H
00C8 FF                MOV     R7,A
00C9 7401              MOV     A,#01H
00CB C8                XCH     A,R0
00CC EF                MOV     A,R7
00CD C8                XCH     A,R0
00CE 08                INC     R0
00CF 8002              SJMP    ?C0291
00D1         ?C0290:
00D1 C3                CLR     C
00D2 33                RLC     A
00D3         ?C0291:
00D3 D8FC              DJNZ    R0,?C0290
                                           ; SOURCE LINE # 486
00D5 5596              ANL     A,P7
00D7 6002              JZ      ?C0155
00D9 D3                SETB    C
00DA 22                RET     
00DB         ?C0155:
                                           ; SOURCE LINE # 487
00DB C3                CLR     C
00DC 22                RET     
                                           ; SOURCE LINE # 488
                                           ; SOURCE LINE # 489
00DD         ?C0132:
                                           ; SOURCE LINE # 490
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 60  

00DD C3                CLR     C
                                           ; SOURCE LINE # 492
00DE         ?C0135:
00DE 22                RET     
             ; FUNCTION _get_dout (END)

             ; FUNCTION _get_ain_adc0 (BEGIN)
                                           ; SOURCE LINE # 494
;---- Variable 'ch0' assigned to Register 'R7' ----
;---- Variable 'gain' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 495
;---- Variable 'reg16' assigned to Register 'R2/R3' ----
0000 E4                CLR     A
0001 FB                MOV     R3,A
0002 FA                MOV     R2,A
                                           ; SOURCE LINE # 500
0003 75BC40            MOV     ADC0CF,#040H
                                           ; SOURCE LINE # 501
0006 ED                MOV     A,R5
0007 42BC              ORL     ADC0CF,A
                                           ; SOURCE LINE # 502
0009 EF                MOV     A,R7
000A C3                CLR     C
000B 9400              SUBB    A,#00H
000D 4017              JC      ?C0157
000F EF                MOV     A,R7
0010 D3                SETB    C
0011 9408              SUBB    A,#08H
0013 5011              JNC     ?C0157
                                           ; SOURCE LINE # 504
0015 8FBB              MOV     AMX0SL,R7
                                           ; SOURCE LINE # 505
0017 C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 506
0019 C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 508
001B D2EC              SETB    AD0BUSY
001D         ?C0158:
                                           ; SOURCE LINE # 510
001D 30EDFD            JNB     AD0INT,?C0158
0020         ?C0159:
                                           ; SOURCE LINE # 511
0020 C2ED              CLR     AD0INT
                                           ; SOURCE LINE # 512
0022 AABF              MOV     R2,ADC0+01H
0024 ABBE              MOV     R3,ADC0
                                           ; SOURCE LINE # 515
0026         ?C0157:
                                           ; SOURCE LINE # 516
0026 CE                XCH     A,R6
0027 EA                MOV     A,R2
0028 CE                XCH     A,R6
0029 CF                XCH     A,R7
002A EB                MOV     A,R3
002B CF                XCH     A,R7
                                           ; SOURCE LINE # 517
002C         ?C0160:
002C 22                RET     
             ; FUNCTION _get_ain_adc0 (END)

             ; FUNCTION _get_ain_adc1 (BEGIN)
                                           ; SOURCE LINE # 519
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 61  

;---- Variable 'ch1' assigned to Register 'R7' ----
;---- Variable 'gain' assigned to Register 'R5' ----
                                           ; SOURCE LINE # 520
0000 E4                CLR     A
0001 900000      R     MOV     DPTR,#reg16
0004 F0                MOVX    @DPTR,A
0005 A3                INC     DPTR
0006 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 524
0007 75AB40            MOV     ADC1CF,#040H
                                           ; SOURCE LINE # 525
000A ED                MOV     A,R5
000B 42AB              ORL     ADC1CF,A
                                           ; SOURCE LINE # 537
000D EF                MOV     A,R7
000E C3                CLR     C
000F 9400              SUBB    A,#00H
0011 4020              JC      ?C0161
0013 EF                MOV     A,R7
0014 D3                SETB    C
0015 9407              SUBB    A,#07H
0017 501A              JNC     ?C0161
                                           ; SOURCE LINE # 540
0019 8FAC              MOV     AMX1SL,R7
                                           ; SOURCE LINE # 541
001B 53AACF            ANL     ADC1CN,#0CFH
                                           ; SOURCE LINE # 542
001E 53AACF            ANL     ADC1CN,#0CFH
                                           ; SOURCE LINE # 543
0021 43AA10            ORL     ADC1CN,#010H
0024         ?C0162:
                                           ; SOURCE LINE # 548
0024 E5AA              MOV     A,ADC1CN
0026 5430              ANL     A,#030H
0028 60FA              JZ      ?C0162
002A         ?C0163:
                                           ; SOURCE LINE # 550
002A 53AACF            ANL     ADC1CN,#0CFH
                                           ; SOURCE LINE # 553
002D 900000      R     MOV     DPTR,#reg16+01H
0030 E59C              MOV     A,ADC1
0032 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 565
0033         ?C0161:
                                           ; SOURCE LINE # 566
0033 900000      R     MOV     DPTR,#reg16
0036 A3                INC     DPTR
0037 E0                MOVX    A,@DPTR
0038 FF                MOV     R7,A
                                           ; SOURCE LINE # 567
0039         ?C0164:
0039 22                RET     
             ; FUNCTION _get_ain_adc1 (END)

             ; FUNCTION _get_ain (BEGIN)
                                           ; SOURCE LINE # 569
;---- Variable 'ch' assigned to Register 'R6' ----
0000 CE                XCH     A,R6
0001 EF                MOV     A,R7
0002 CE                XCH     A,R6
;---- Variable 'gain' assigned to Register 'R1' ----
0003 C9                XCH     A,R1
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 62  

0004 ED                MOV     A,R5
0005 C9                XCH     A,R1
                                           ; SOURCE LINE # 570
;---- Variable 'reg16' assigned to Register 'R4/R5' ----
0006 E4                CLR     A
0007 FD                MOV     R5,A
0008 FC                MOV     R4,A
                                           ; SOURCE LINE # 572
0009 EE                MOV     A,R6
000A C3                CLR     C
000B 9400              SUBB    A,#00H
000D 400E              JC      ?C0165
000F EE                MOV     A,R6
0010 D3                SETB    C
0011 9408              SUBB    A,#08H
0013 5008              JNC     ?C0165
                                           ; SOURCE LINE # 573
0015 120000      R     LCALL   _ADC0_set_diff
                                           ; SOURCE LINE # 574
0018 CF                XCH     A,R7
0019 EE                MOV     A,R6
001A CF                XCH     A,R7
                                           ; SOURCE LINE # 575
001B 8041              SJMP    ?C0303
001D         ?C0165:
                                           ; SOURCE LINE # 576
001D EE                MOV     A,R6
001E B4090C            CJNE    A,#09H,?C0167
                                           ; SOURCE LINE # 577
0021 E4                CLR     A
0022 FE                MOV     R6,A
                                           ; SOURCE LINE # 578
0023 FF                MOV     R7,A
0024 7D01              MOV     R5,#01H
0026 120000      R     LCALL   _ADC0_set_diff
                                           ; SOURCE LINE # 579
0029 7F00              MOV     R7,#00H
002B         ?C0300:
                                           ; SOURCE LINE # 580
002B 8031              SJMP    ?C0303
002D         ?C0167:
                                           ; SOURCE LINE # 581
002D EE                MOV     A,R6
002E B40A0D            CJNE    A,#0AH,?C0169
                                           ; SOURCE LINE # 582
0031 7E02              MOV     R6,#02H
                                           ; SOURCE LINE # 583
0033 7F02              MOV     R7,#02H
0035 7D01              MOV     R5,#01H
0037 120000      R     LCALL   _ADC0_set_diff
                                           ; SOURCE LINE # 584
003A 7F02              MOV     R7,#02H
003C         ?C0301:
                                           ; SOURCE LINE # 585
003C 8020              SJMP    ?C0303
003E         ?C0169:
                                           ; SOURCE LINE # 586
003E EE                MOV     A,R6
003F B40B0D            CJNE    A,#0BH,?C0171
                                           ; SOURCE LINE # 587
0042 7E04              MOV     R6,#04H
                                           ; SOURCE LINE # 588
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 63  

0044 7D01              MOV     R5,#01H
0046 7F04              MOV     R7,#04H
0048 120000      R     LCALL   _ADC0_set_diff
                                           ; SOURCE LINE # 589
004B 7F04              MOV     R7,#04H
004D         ?C0302:
                                           ; SOURCE LINE # 590
004D 800F              SJMP    ?C0303
004F         ?C0171:
                                           ; SOURCE LINE # 591
004F EE                MOV     A,R6
0050 B40C16            CJNE    A,#0CH,?C0173
                                           ; SOURCE LINE # 592
0053 7E06              MOV     R6,#06H
                                           ; SOURCE LINE # 593
0055 7D01              MOV     R5,#01H
0057 7F06              MOV     R7,#06H
0059 120000      R     LCALL   _ADC0_set_diff
                                           ; SOURCE LINE # 594
005C 7F06              MOV     R7,#06H
005E         ?C0303:
005E CD                XCH     A,R5
005F E9                MOV     A,R1
0060 CD                XCH     A,R5
0061 120000      R     LCALL   _get_ain_adc0
0064 CC                XCH     A,R4
0065 EE                MOV     A,R6
0066 CC                XCH     A,R4
                                           ; SOURCE LINE # 595
0067 801C              SJMP    ?C0304
0069         ?C0173:
                                           ; SOURCE LINE # 596
0069 EE                MOV     A,R6
006A C3                CLR     C
006B 940D              SUBB    A,#0DH
006D 401B              JC      ?C0175
006F EE                MOV     A,R6
0070 D3                SETB    C
0071 9414              SUBB    A,#014H
0073 5015              JNC     ?C0175
                                           ; SOURCE LINE # 597
0075 74F3              MOV     A,#0F3H
0077 2E                ADD     A,R6
0078 FE                MOV     R6,A
                                           ; SOURCE LINE # 598
0079 FF                MOV     R7,A
007A CE                XCH     A,R6
007B E9                MOV     A,R1
007C CE                XCH     A,R6
007D CD                XCH     A,R5
007E EE                MOV     A,R6
007F CD                XCH     A,R5
0080 120000      R     LCALL   _get_ain_adc1
0083 7C00              MOV     R4,#00H
0085         ?C0304:
0085 CD                XCH     A,R5
0086 EF                MOV     A,R7
0087 CD                XCH     A,R5
                                           ; SOURCE LINE # 600
0088 8005              SJMP    ?C0166
008A         ?C0175:
                                           ; SOURCE LINE # 601
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 64  

                                           ; SOURCE LINE # 602
008A 7EFF              MOV     R6,#0FFH
008C 7FFF              MOV     R7,#0FFH
008E 22                RET     
                                           ; SOURCE LINE # 603
008F         ?C0166:
                                           ; SOURCE LINE # 605
008F CE                XCH     A,R6
0090 EC                MOV     A,R4
0091 CE                XCH     A,R6
0092 CF                XCH     A,R7
0093 ED                MOV     A,R5
0094 CF                XCH     A,R7
                                           ; SOURCE LINE # 606
0095         ?C0177:
0095 22                RET     
             ; FUNCTION _get_ain (END)

             ; FUNCTION _set_pwm (BEGIN)
                                           ; SOURCE LINE # 608
;---- Variable 'dc' assigned to Register 'R4/R5' ----
;---- Variable 'ch' assigned to Register 'R7' ----
                                           ; SOURCE LINE # 610
0000 EF                MOV     A,R7
0001 14                DEC     A
0002 600D              JZ      ?C0180
0004 14                DEC     A
0005 6010              JZ      ?C0181
0007 2402              ADD     A,#02H
0009 7014              JNZ     ?C0182
                                           ; SOURCE LINE # 611
000B         ?C0179:
                                           ; SOURCE LINE # 615
000B E4                CLR     A
000C F5EA              MOV     PCA0CPL0,A
                                           ; SOURCE LINE # 617
000E F5FA              MOV     PCA0CPH0,A
                                           ; SOURCE LINE # 618
0010 22                RET     
                                           ; SOURCE LINE # 619
0011         ?C0180:
                                           ; SOURCE LINE # 623
0011 E4                CLR     A
0012 F5EB              MOV     PCA0CPL1,A
                                           ; SOURCE LINE # 625
0014 F5FB              MOV     PCA0CPH1,A
                                           ; SOURCE LINE # 626
0016 22                RET     
                                           ; SOURCE LINE # 627
0017         ?C0181:
                                           ; SOURCE LINE # 628
0017 D2DE              SETB    CR
                                           ; SOURCE LINE # 630
0019 ED                MOV     A,R5
001A F5EC              MOV     PCA0CPL2,A
                                           ; SOURCE LINE # 631
001C EC                MOV     A,R4
001D F5FC              MOV     PCA0CPH2,A
                                           ; SOURCE LINE # 632
                                           ; SOURCE LINE # 634
                                           ; SOURCE LINE # 637
001F         ?C0182:
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 65  

001F 22                RET     
             ; FUNCTION _set_pwm (END)

             ; FUNCTION Main (BEGIN)
                                           ; SOURCE LINE # 644
                                           ; SOURCE LINE # 645
                                           ; SOURCE LINE # 652
                                           ; SOURCE LINE # 653
0000 C2AF              CLR     EA
                                           ; SOURCE LINE # 654
0002 75FFDE            MOV     WDTCN,#0DEH
                                           ; SOURCE LINE # 655
0005 75FFAD            MOV     WDTCN,#0ADH
                                           ; SOURCE LINE # 656
                                           ; SOURCE LINE # 658
                                           ; SOURCE LINE # 659
0008 75B167            MOV     OSCXCN,#067H
                                           ; SOURCE LINE # 661
;---- Variable 'i' assigned to Register 'R4/R5' ----
000B 7DD0              MOV     R5,#0D0H
000D 7C07              MOV     R4,#07H
000F         ?C0183:
000F ED                MOV     A,R5
0010 1D                DEC     R5
0011 7001              JNZ     ?C0292
0013 1C                DEC     R4
0014         ?C0292:
0014 ED                MOV     A,R5
0015 4C                ORL     A,R4
0016 70F7              JNZ     ?C0183
0018         ?C0186:
                                           ; SOURCE LINE # 663
0018 E5B1              MOV     A,OSCXCN
001A 30E7FB            JNB     ACC.7,?C0186
001D         ?C0187:
                                           ; SOURCE LINE # 664
001D 75B208            MOV     OSCICN,#08H
                                           ; SOURCE LINE # 665
                                           ; SOURCE LINE # 667
                                           ; SOURCE LINE # 676
0020 75E5A9            MOV     RCAP4+01H,#0A9H
0023 75E49A            MOV     RCAP4,#09AH
0026 75F5A9            MOV     TMR4+01H,#0A9H
0029 75F49A            MOV     TMR4,#09AH
                                           ; SOURCE LINE # 678
002C 438E40            ORL     CKCON,#040H
                                           ; SOURCE LINE # 680
002F 43C904            ORL     T4CON,#04H
                                           ; SOURCE LINE # 684
0032 438E10            ORL     CKCON,#010H
                                           ; SOURCE LINE # 685
0035 438920            ORL     TMOD,#020H
                                           ; SOURCE LINE # 686
0038 758DFA            MOV     TH1,#0FAH
                                           ; SOURCE LINE # 687
003B 858D8B            MOV     TL1,TH1
                                           ; SOURCE LINE # 688
003E D28E              SETB    TR1
                                           ; SOURCE LINE # 689
                                           ; SOURCE LINE # 691
                                           ; SOURCE LINE # 695
0040 438780            ORL     PCON,#080H
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 66  

                                           ; SOURCE LINE # 696
0043 759850            MOV     SCON0,#050H
                                           ; SOURCE LINE # 698
0046 120000      R     LCALL   Rx_init
                                           ; SOURCE LINE # 699
0049 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 701
                                           ; SOURCE LINE # 703
                                           ; SOURCE LINE # 716
004C 43A401            ORL     P0MDOUT,#01H
                                           ; SOURCE LINE # 720
004F E4                CLR     A
0050 F5A5              MOV     P1MDOUT,A
                                           ; SOURCE LINE # 721
0052 F5BD              MOV     P1MDIN,A
                                           ; SOURCE LINE # 728
0054 F5A7              MOV     P3MDOUT,A
                                           ; SOURCE LINE # 729
0056 F5B5              MOV     P74OUT,A
                                           ; SOURCE LINE # 731
0058 75A0FF            MOV     P2,#0FFH
                                           ; SOURCE LINE # 732
005B 75B0FF            MOV     P3,#0FFH
                                           ; SOURCE LINE # 733
005E 7584FF            MOV     P4,#0FFH
                                           ; SOURCE LINE # 734
0061 7585FF            MOV     P5,#0FFH
                                           ; SOURCE LINE # 735
0064 7586FF            MOV     P6,#0FFH
                                           ; SOURCE LINE # 736
0067 7596FF            MOV     P7,#0FFH
                                           ; SOURCE LINE # 738
                                           ; SOURCE LINE # 740
                                           ; SOURCE LINE # 767
                                           ; SOURCE LINE # 769
                                           ; SOURCE LINE # 773
                                           ; SOURCE LINE # 775
                                           ; SOURCE LINE # 776
006A 75E104            MOV     XBR0,#04H
                                           ; SOURCE LINE # 784
006D 75E3C0            MOV     XBR2,#0C0H
                                           ; SOURCE LINE # 790
                                           ; SOURCE LINE # 792
                                           ; SOURCE LINE # 793
0070 75E880            MOV     ADC0CN,#080H
                                           ; SOURCE LINE # 794
0073 75AA80            MOV     ADC1CN,#080H
                                           ; SOURCE LINE # 796
0076 75D107            MOV     REF0CN,#07H
                                           ; SOURCE LINE # 797
0079 75BC40            MOV     ADC0CF,#040H
                                           ; SOURCE LINE # 798
                                           ; SOURCE LINE # 799
007C 75ABFA            MOV     ADC1CF,#0FAH
                                           ; SOURCE LINE # 807
                                           ; SOURCE LINE # 809
                                           ; SOURCE LINE # 813
007F F5D2              MOV     DAC0L,A
                                           ; SOURCE LINE # 814
0081 F5D3              MOV     DAC0H,A
                                           ; SOURCE LINE # 815
0083 75D480            MOV     DAC0CN,#080H
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 67  

                                           ; SOURCE LINE # 817
0086 F5D5              MOV     DAC1L,A
                                           ; SOURCE LINE # 818
0088 F5D6              MOV     DAC1H,A
                                           ; SOURCE LINE # 819
008A 75D780            MOV     DAC1CN,#080H
                                           ; SOURCE LINE # 822
                                           ; SOURCE LINE # 824
                                           ; SOURCE LINE # 825
008D 900000      R     MOV     DPTR,#time
0090 F0                MOVX    @DPTR,A
0091 A3                INC     DPTR
0092 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 826
0093 A3                INC     DPTR
0094 F0                MOVX    @DPTR,A
0095 A3                INC     DPTR
0096 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 827
0097 A3                INC     DPTR
0098 F0                MOVX    @DPTR,A
0099 A3                INC     DPTR
009A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 829
009B FC                MOV     R4,A
009C FD                MOV     R5,A
009D         ?C0188:
                                           ; SOURCE LINE # 830
009D ED                MOV     A,R5
009E 25E0              ADD     A,ACC
00A0 FF                MOV     R7,A
00A1 EC                MOV     A,R4
00A2 33                RLC     A
00A3 FE                MOV     R6,A
00A4 7400        R     MOV     A,#LOW dout_timeout_sec
00A6 2F                ADD     A,R7
00A7 F582              MOV     DPL,A
00A9 7400        R     MOV     A,#HIGH dout_timeout_sec
00AB 3E                ADDC    A,R6
00AC F583              MOV     DPH,A
00AE E4                CLR     A
00AF F0                MOVX    @DPTR,A
00B0 A3                INC     DPTR
00B1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 831
00B2 0D                INC     R5
00B3 BD0001            CJNE    R5,#00H,?C0293
00B6 0C                INC     R4
00B7         ?C0293:
00B7 ED                MOV     A,R5
00B8 6430              XRL     A,#030H
00BA 4C                ORL     A,R4
00BB 70E0              JNZ     ?C0188
00BD         ?C0189:
                                           ; SOURCE LINE # 832
                                           ; SOURCE LINE # 834
                                           ; SOURCE LINE # 835
00BD 758130            MOV     SP,#030H
                                           ; SOURCE LINE # 837
00C0 D2BC              SETB    PS0
                                           ; SOURCE LINE # 838
00C2 D2AC              SETB    ES0
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 68  

                                           ; SOURCE LINE # 839
00C4 43E704            ORL     EIE2,#04H
                                           ; SOURCE LINE # 840
00C7 D2AF              SETB    EA
                                           ; SOURCE LINE # 841
                                           ; SOURCE LINE # 843
                                           ; SOURCE LINE # 844
00C9 120000      R     LCALL   FLASH_Load
                                           ; SOURCE LINE # 845
                                           ; SOURCE LINE # 849
00CC         ?C0191:
                                           ; SOURCE LINE # 861
                                           ; SOURCE LINE # 862
00CC 75FFAD            MOV     WDTCN,#0ADH
                                           ; SOURCE LINE # 863
00CF 3000FA      R     JNB     flag_1sec,?C0191
                                           ; SOURCE LINE # 864
00D2 C200        R     CLR     flag_1sec
                                           ; SOURCE LINE # 865
                                           ; SOURCE LINE # 867
00D4 80F6              SJMP    ?C0191
             ; FUNCTION Main (END)

             ; FUNCTION Timer4 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D018            MOV     PSW,#018H
                                           ; SOURCE LINE # 878
                                           ; SOURCE LINE # 881
000D 53C97F            ANL     T4CON,#07FH
                                           ; SOURCE LINE # 883
0010 75FFAD            MOV     WDTCN,#0ADH
                                           ; SOURCE LINE # 884
0013 75FFFF            MOV     WDTCN,#0FFH
                                           ; SOURCE LINE # 886
                                           ; SOURCE LINE # 887
0016 900000      R     MOV     DPTR,#time+03H
0019 E0                MOVX    A,@DPTR
001A 04                INC     A
001B F0                MOVX    @DPTR,A
001C 7006              JNZ     ?C0294
001E 900000      R     MOV     DPTR,#time+02H
0021 E0                MOVX    A,@DPTR
0022 04                INC     A
0023 F0                MOVX    @DPTR,A
0024         ?C0294:
                                           ; SOURCE LINE # 888
;---- Variable 'i' assigned to Register 'R4' ----
0024 E4                CLR     A
0025 FC                MOV     R4,A
0026         ?C0195:
                                           ; SOURCE LINE # 889
0026 EC                MOV     A,R4
0027 25E0              ADD     A,ACC
0029 2400        R     ADD     A,#LOW dout_timeout_sec
002B F582              MOV     DPL,A
002D E4                CLR     A
002E 3400        R     ADDC    A,#HIGH dout_timeout_sec
0030 F583              MOV     DPH,A
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 69  

0032 E0                MOVX    A,@DPTR
0033 FE                MOV     R6,A
0034 A3                INC     DPTR
0035 E0                MOVX    A,@DPTR
0036 D3                SETB    C
0037 9400              SUBB    A,#00H
0039 EE                MOV     A,R6
003A 9400              SUBB    A,#00H
003C 4068              JC      ?C0197
                                           ; SOURCE LINE # 890
003E EC                MOV     A,R4
003F 25E0              ADD     A,ACC
0041 2400        R     ADD     A,#LOW dout_timeout_ms
0043 F582              MOV     DPL,A
0045 E4                CLR     A
0046 3400        R     ADDC    A,#HIGH dout_timeout_ms
0048 F583              MOV     DPH,A
004A E4                CLR     A
004B 75F001            MOV     B,#01H
004E 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 891
0051 EC                MOV     A,R4
0052 25E0              ADD     A,ACC
0054 2400        R     ADD     A,#LOW dout_timeout_ms
0056 F582              MOV     DPL,A
0058 E4                CLR     A
0059 3400        R     ADDC    A,#HIGH dout_timeout_ms
005B F583              MOV     DPH,A
005D E0                MOVX    A,@DPTR
005E FE                MOV     R6,A
005F A3                INC     DPTR
0060 E0                MOVX    A,@DPTR
0061 D3                SETB    C
0062 94E7              SUBB    A,#0E7H
0064 EE                MOV     A,R6
0065 9403              SUBB    A,#03H
0067 403D              JC      ?C0197
                                           ; SOURCE LINE # 892
0069 EC                MOV     A,R4
006A 25E0              ADD     A,ACC
006C 2400        R     ADD     A,#LOW dout_timeout_ms
006E F582              MOV     DPL,A
0070 E4                CLR     A
0071 3400        R     ADDC    A,#HIGH dout_timeout_ms
0073 F583              MOV     DPH,A
0075 E4                CLR     A
0076 F0                MOVX    @DPTR,A
0077 A3                INC     DPTR
0078 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 893
0079 EC                MOV     A,R4
007A 25E0              ADD     A,ACC
007C 2400        R     ADD     A,#LOW dout_timeout_sec
007E F582              MOV     DPL,A
0080 E4                CLR     A
0081 3400        R     ADDC    A,#HIGH dout_timeout_sec
0083 F583              MOV     DPH,A
0085 74FF              MOV     A,#0FFH
0087 F5F0              MOV     B,A
0089 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 894
008C EC                MOV     A,R4
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 70  

008D 25E0              ADD     A,ACC
008F 2400        R     ADD     A,#LOW dout_timeout_sec
0091 F582              MOV     DPL,A
0093 E4                CLR     A
0094 3400        R     ADDC    A,#HIGH dout_timeout_sec
0096 F583              MOV     DPH,A
0098 E0                MOVX    A,@DPTR
0099 FE                MOV     R6,A
009A A3                INC     DPTR
009B E0                MOVX    A,@DPTR
009C 4E                ORL     A,R6
009D 7007              JNZ     ?C0197
                                           ; SOURCE LINE # 895
009F CF                XCH     A,R7
00A0 EC                MOV     A,R4
00A1 CF                XCH     A,R7
00A2 FD                MOV     R5,A
00A3 120000      R     LCALL   _set_dout
                                           ; SOURCE LINE # 896
                                           ; SOURCE LINE # 897
                                           ; SOURCE LINE # 898
                                           ; SOURCE LINE # 899
00A6         ?C0197:
00A6 0C                INC     R4
00A7 EC                MOV     A,R4
00A8 6430              XRL     A,#030H
00AA 6003              JZ      $ + 5H
00AC 020000      R     LJMP    ?C0195
00AF         ?C0196:
                                           ; SOURCE LINE # 900
00AF D3                SETB    C
00B0 900000      R     MOV     DPTR,#time+03H
00B3 E0                MOVX    A,@DPTR
00B4 94E7              SUBB    A,#0E7H
00B6 900000      R     MOV     DPTR,#time+02H
00B9 E0                MOVX    A,@DPTR
00BA 9403              SUBB    A,#03H
00BC 4014              JC      ?C0202
                                           ; SOURCE LINE # 901
00BE E4                CLR     A
00BF F0                MOVX    @DPTR,A
00C0 A3                INC     DPTR
00C1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 902
00C2 900000      R     MOV     DPTR,#time+05H
00C5 E0                MOVX    A,@DPTR
00C6 04                INC     A
00C7 F0                MOVX    @DPTR,A
00C8 7006              JNZ     ?C0295
00CA 900000      R     MOV     DPTR,#time+04H
00CD E0                MOVX    A,@DPTR
00CE 04                INC     A
00CF F0                MOVX    @DPTR,A
00D0         ?C0295:
                                           ; SOURCE LINE # 903
00D0 D200        R     SETB    flag_1sec
                                           ; SOURCE LINE # 904
                                           ; SOURCE LINE # 905
                                           ; SOURCE LINE # 910
00D2         ?C0202:
00D2 D0D0              POP     PSW
00D4 D082              POP     DPL
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 71  

00D6 D083              POP     DPH
00D8 D0F0              POP     B
00DA D0E0              POP     ACC
00DC 32                RETI    
             ; FUNCTION Timer4 (END)

             ; FUNCTION Uart0 (BEGIN)
0000 C0E0              PUSH    ACC
0002 C0F0              PUSH    B
0004 C083              PUSH    DPH
0006 C082              PUSH    DPL
0008 C0D0              PUSH    PSW
000A 75D010            MOV     PSW,#010H
                                           ; SOURCE LINE # 913
                                           ; SOURCE LINE # 919
000D C200        R     CLR     rx_finish
                                           ; SOURCE LINE # 926
000F C2AF              CLR     EA
                                           ; SOURCE LINE # 928
0011 209803            JB      RI0,$ + 6H
0014 020000      R     LJMP    ?C0203
                                           ; SOURCE LINE # 929
0017 C298              CLR     RI0
                                           ; SOURCE LINE # 930
;---- Variable 'ch' assigned to Register 'R7' ----
0019 AF99              MOV     R7,SBUF0
                                           ; SOURCE LINE # 931
001B 900000      R     MOV     DPTR,#rx
001E E0                MOVX    A,@DPTR
001F FE                MOV     R6,A
0020 D3                SETB    C
0021 9400              SUBB    A,#00H
0023 4033              JC      ?C0204
0025 EE                MOV     A,R6
0026 9410              SUBB    A,#010H
0028 502E              JNC     ?C0204
002A EF                MOV     A,R7
002B C3                CLR     C
002C 9430              SUBB    A,#030H
002E 4006              JC      ?C0206
0030 EF                MOV     A,R7
0031 D3                SETB    C
0032 9439              SUBB    A,#039H
0034 400C              JC      ?C0205
0036         ?C0206:
0036 EF                MOV     A,R7
0037 C3                CLR     C
0038 9441              SUBB    A,#041H
003A 401C              JC      ?C0204
003C EF                MOV     A,R7
003D D3                SETB    C
003E 9446              SUBB    A,#046H
0040 5016              JNC     ?C0204
0042         ?C0205:
                                           ; SOURCE LINE # 932
0042 900000      R     MOV     DPTR,#rx
0045 E0                MOVX    A,@DPTR
0046 FE                MOV     R6,A
0047 04                INC     A
0048 F0                MOVX    @DPTR,A
0049 7400        R     MOV     A,#LOW rx+03H
004B 2E                ADD     A,R6
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 72  

004C F582              MOV     DPL,A
004E E4                CLR     A
004F 3400        R     ADDC    A,#HIGH rx+03H
0051 F583              MOV     DPH,A
0053 EF                MOV     A,R7
0054 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 933
0055 020000      R     LJMP    ?C0203
0058         ?C0204:
                                           ; SOURCE LINE # 934
0058 EF                MOV     A,R7
0059 B43E11            CJNE    A,#03EH,?C0208
                                           ; SOURCE LINE # 935
005C 120000      R     LCALL   Rx_init
                                           ; SOURCE LINE # 936
005F 900000      R     MOV     DPTR,#rx+03H
0062 743E              MOV     A,#03EH
0064 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 937
0065 900000      R     MOV     DPTR,#rx
0068 7401              MOV     A,#01H
006A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 938
006B 806B              SJMP    ?C0203
006D         ?C0208:
                                           ; SOURCE LINE # 939
006D EF                MOV     A,R7
006E 640A              XRL     A,#0AH
0070 7063              JNZ     ?C0210
0072 900000      R     MOV     DPTR,#rx
0075 E0                MOVX    A,@DPTR
0076 FF                MOV     R7,A
0077 7404              MOV     A,#04H
0079 C3                CLR     C
007A 9F                SUBB    A,R7
007B 5058              JNC     ?C0210
007D EF                MOV     A,R7
007E C3                CLR     C
007F 9410              SUBB    A,#010H
0081 5052              JNC     ?C0210
                                           ; SOURCE LINE # 951
0083 EF                MOV     A,R7
0084 24FE              ADD     A,#0FEH
0086 FF                MOV     R7,A
0087 120000      R     LCALL   _Rx_get_u8
008A 900000      R     MOV     DPTR,#rx+02H
008D EF                MOV     A,R7
008E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 952
008F 900000      R     MOV     DPTR,#rx
0092 E0                MOVX    A,@DPTR
0093 FF                MOV     R7,A
0094 04                INC     A
0095 F0                MOVX    @DPTR,A
0096 7400        R     MOV     A,#LOW rx+03H
0098 2F                ADD     A,R7
0099 F582              MOV     DPL,A
009B E4                CLR     A
009C 3400        R     ADDC    A,#HIGH rx+03H
009E F583              MOV     DPH,A
00A0 740A              MOV     A,#0AH
00A2 F0                MOVX    @DPTR,A
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 73  

                                           ; SOURCE LINE # 953
00A3 900000      R     MOV     DPTR,#rx
00A6 E0                MOVX    A,@DPTR
00A7 A3                INC     DPTR
00A8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 954
00A9 900000      R     MOV     DPTR,#val
00AC E4                CLR     A
00AD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 956
;---- Variable 'i' assigned to Register 'R7' ----
00AE 7F01              MOV     R7,#01H
00B0         ?C0211:
00B0 900000      R     MOV     DPTR,#rx+01H
00B3 E0                MOVX    A,@DPTR
00B4 24FD              ADD     A,#0FDH
00B6 FE                MOV     R6,A
00B7 EF                MOV     A,R7
00B8 C3                CLR     C
00B9 9E                SUBB    A,R6
00BA 5015              JNC     ?C0212
                                           ; SOURCE LINE # 957
00BC 7400        R     MOV     A,#LOW rx+03H
00BE 2F                ADD     A,R7
00BF F582              MOV     DPL,A
00C1 E4                CLR     A
00C2 3400        R     ADDC    A,#HIGH rx+03H
00C4 F583              MOV     DPH,A
00C6 E0                MOVX    A,@DPTR
00C7 FE                MOV     R6,A
00C8 900000      R     MOV     DPTR,#val
00CB E0                MOVX    A,@DPTR
00CC 2E                ADD     A,R6
00CD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 958
00CE 0F                INC     R7
00CF 80DF              SJMP    ?C0211
00D1         ?C0212:
                                           ; SOURCE LINE # 960
00D1 D200        R     SETB    rx_finish
                                           ; SOURCE LINE # 961
00D3 8003              SJMP    ?C0203
00D5         ?C0210:
                                           ; SOURCE LINE # 962
                                           ; SOURCE LINE # 963
00D5 120000      R     LCALL   Rx_init
                                           ; SOURCE LINE # 964
                                           ; SOURCE LINE # 966
00D8         ?C0203:
                                           ; SOURCE LINE # 968
00D8 30992C            JNB     TI0,?C0215
                                           ; SOURCE LINE # 969
00DB C299              CLR     TI0
                                           ; SOURCE LINE # 970
00DD 900000      R     MOV     DPTR,#tx
00E0 E0                MOVX    A,@DPTR
00E1 FF                MOV     R7,A
00E2 C3                CLR     C
00E3 9410              SUBB    A,#010H
00E5 5020              JNC     ?C0215
00E7 7400        R     MOV     A,#LOW tx+03H
00E9 2F                ADD     A,R7
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 74  

00EA F582              MOV     DPL,A
00EC E4                CLR     A
00ED 3400        R     ADDC    A,#HIGH tx+03H
00EF F583              MOV     DPH,A
00F1 E0                MOVX    A,@DPTR
00F2 6013              JZ      ?C0215
                                           ; SOURCE LINE # 972
00F4 900000      R     MOV     DPTR,#tx
00F7 E0                MOVX    A,@DPTR
00F8 04                INC     A
00F9 F0                MOVX    @DPTR,A
00FA 7400        R     MOV     A,#LOW tx+03H
00FC 2F                ADD     A,R7
00FD F582              MOV     DPL,A
00FF E4                CLR     A
0100 3400        R     ADDC    A,#HIGH tx+03H
0102 F583              MOV     DPH,A
0104 E0                MOVX    A,@DPTR
0105 F599              MOV     SBUF0,A
                                           ; SOURCE LINE # 973
                                           ; SOURCE LINE # 974
                                           ; SOURCE LINE # 977
                                           ; SOURCE LINE # 978
0107         ?C0215:
                                           ; SOURCE LINE # 980
0107 200003      R     JB      rx_finish,$ + 6H
010A 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 981
010D C200        R     CLR     rx_finish
                                           ; SOURCE LINE # 982
010F 7F01              MOV     R7,#01H
0111 120000      R     LCALL   _Rx_get_u8
0114 900000      R     MOV     DPTR,#rxmsg+02H
0117 EF                MOV     A,R7
0118 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 983
0119 7F03              MOV     R7,#03H
011B 120000      R     LCALL   _Rx_get_u8
011E 900000      R     MOV     DPTR,#rxmsg+03H
0121 EF                MOV     A,R7
0122 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 997
0123 900000      R     MOV     DPTR,#var128
0126 E0                MOVX    A,@DPTR
0127 FF                MOV     R7,A
0128 900000      R     MOV     DPTR,#rxmsg+02H
012B E0                MOVX    A,@DPTR
012C 6F                XRL     A,R7
012D 6007              JZ      ?C0220
012F EF                MOV     A,R7
0130 F4                CPL     A
0131 6003              JZ      $ + 5H
0133 020000      R     LJMP    ?C0218
0136         ?C0220:
                                           ; SOURCE LINE # 998
0136 900000      R     MOV     DPTR,#rxmsg+03H
0139 E0                MOVX    A,@DPTR
013A 120000      E     LCALL   ?C?CCASE
013D 0000        R     DW      ?C0223
013F 11                DB      011H
0140 0000        R     DW      ?C0226
0142 13                DB      013H
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 75  

0143 0000        R     DW      ?C0228
0145 14                DB      014H
0146 0000        R     DW      ?C0232
0148 15                DB      015H
0149 0000        R     DW      ?C0234
014B 16                DB      016H
014C 0000        R     DW      ?C0236
014E 17                DB      017H
014F 0000        R     DW      ?C0238
0151 18                DB      018H
0152 0000        R     DW      ?C0240
0154 19                DB      019H
0155 0000        R     DW      ?C0242
0157 20                DB      020H
0158 0000        R     DW      ?C0244
015A 21                DB      021H
015B 0000        R     DW      ?C0245
015D 22                DB      022H
015E 0000        R     DW      ?C0248
0160 23                DB      023H
0161 0000        R     DW      ?C0222
0163 BB                DB      0BBH
0164 0000              DW      00H
0166 0000        R     DW      ?C0218
                                           ; SOURCE LINE # 999
0168         ?C0222:
                                           ; SOURCE LINE # 1000
                                           ; SOURCE LINE # 1001
0168 020000      R     LJMP    ?C0312
                                           ; SOURCE LINE # 1002
016B         ?C0223:
                                           ; SOURCE LINE # 1003
016B 900000      R     MOV     DPTR,#rx+01H
016E E0                MOVX    A,@DPTR
016F 640E              XRL     A,#0EH
0171 6003              JZ      $ + 5H
0173 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1004
0176 7F05              MOV     R7,#05H
0178 120000      R     LCALL   _Rx_get_u8
                                           ; SOURCE LINE # 1005
017B 120000      R     LCALL   L?0318
017E 900000      R     MOV     DPTR,#rxmsg+05H
0181 EF                MOV     A,R7
0182 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1006
0183 7F09              MOV     R7,#09H
0185 120000      R     LCALL   _Rx_get_u8
0188 900000      R     MOV     DPTR,#rxmsg+06H
018B EF                MOV     A,R7
018C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1007
018D 7F0B              MOV     R7,#0BH
018F 120000      R     LCALL   _Rx_get_u8
0192 900000      R     MOV     DPTR,#rxmsg+07H
0195 EF                MOV     A,R7
0196 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1009
0197 900000      R     MOV     DPTR,#rxmsg+04H
019A E0                MOVX    A,@DPTR
019B FD                MOV     R5,A
019C C3                CLR     C
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 76  

019D 9430              SUBB    A,#030H
019F 5040              JNC     ?C0225
                                           ; SOURCE LINE # 1010
01A1 900000      R     MOV     DPTR,#rxmsg+06H
01A4 E0                MOVX    A,@DPTR
01A5 FE                MOV     R6,A
01A6 ED                MOV     A,R5
01A7 25E0              ADD     A,ACC
01A9 2400        R     ADD     A,#LOW dout_timeout_sec
01AB F582              MOV     DPL,A
01AD E4                CLR     A
01AE 3400        R     ADDC    A,#HIGH dout_timeout_sec
01B0 F583              MOV     DPH,A
01B2 EE                MOV     A,R6
01B3 F0                MOVX    @DPTR,A
01B4 A3                INC     DPTR
01B5 E4                CLR     A
01B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1011
01B7 900000      R     MOV     DPTR,#rxmsg+07H
01BA E0                MOVX    A,@DPTR
01BB FF                MOV     R7,A
01BC ED                MOV     A,R5
01BD 25E0              ADD     A,ACC
01BF 2400        R     ADD     A,#LOW dout_timeout_sec
01C1 F582              MOV     DPL,A
01C3 E4                CLR     A
01C4 3400        R     ADDC    A,#HIGH dout_timeout_sec
01C6 F583              MOV     DPH,A
01C8 E4                CLR     A
01C9 8FF0              MOV     B,R7
01CB 120000      E     LCALL   ?C?IILDX
                                           ; SOURCE LINE # 1012
01CE ED                MOV     A,R5
01CF 25E0              ADD     A,ACC
01D1 2400        R     ADD     A,#LOW dout_timeout_ms
01D3 F582              MOV     DPL,A
01D5 E4                CLR     A
01D6 3400        R     ADDC    A,#HIGH dout_timeout_ms
01D8 F583              MOV     DPH,A
01DA E4                CLR     A
01DB F0                MOVX    @DPTR,A
01DC A3                INC     DPTR
01DD F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1013
01DE 120000      R     LCALL   L?0321
                                           ; SOURCE LINE # 1014
01E1         ?C0225:
                                           ; SOURCE LINE # 1017
01E1         ?C0305:
                                           ; SOURCE LINE # 1018
                                           ; SOURCE LINE # 1020
01E1 020000      R     LJMP    ?C0312
                                           ; SOURCE LINE # 1021
01E4         ?C0226:
                                           ; SOURCE LINE # 1022
01E4 900000      R     MOV     DPTR,#rx+01H
01E7 E0                MOVX    A,@DPTR
01E8 640A              XRL     A,#0AH
01EA 6003              JZ      $ + 5H
01EC 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1023
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 77  

01EF 7F05              MOV     R7,#05H
01F1 120000      R     LCALL   _Rx_get_u8
                                           ; SOURCE LINE # 1024
01F4 120000      R     LCALL   L?0318
01F7 900000      R     MOV     DPTR,#rxmsg+06H
01FA EF                MOV     A,R7
01FB F0                MOVX    @DPTR,A
01FC FD                MOV     R5,A
                                           ; SOURCE LINE # 1025
01FD 900000      R     MOV     DPTR,#rxmsg+04H
0200 E0                MOVX    A,@DPTR
0201 FF                MOV     R7,A
0202 120000      R     LCALL   _get_ain
0205 900000      R     MOV     DPTR,#val_16
0208 EE                MOV     A,R6
0209 F0                MOVX    @DPTR,A
020A A3                INC     DPTR
020B EF                MOV     A,R7
020C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1026
020D 900000      R     MOV     DPTR,#rxmsg+04H
0210 E0                MOVX    A,@DPTR
0211 FF                MOV     R7,A
0212 900000      R     MOV     DPTR,#rxmsg+06H
0215 E0                MOVX    A,@DPTR
0216 FD                MOV     R5,A
0217 120000      R     LCALL   _get_ain
021A 900000      R     MOV     DPTR,#val_16
021D EE                MOV     A,R6
021E F0                MOVX    @DPTR,A
021F A3                INC     DPTR
0220 EF                MOV     A,R7
0221 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1028
0222 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 1029
0225 120000      R     LCALL   Rx_init
                                           ; SOURCE LINE # 1030
                                           ; SOURCE LINE # 1031
                                           ; SOURCE LINE # 1032
                                           ; SOURCE LINE # 1033
                                           ; SOURCE LINE # 1034
                                           ; SOURCE LINE # 1035
                                           ; SOURCE LINE # 1036
                                           ; SOURCE LINE # 1037
                                           ; SOURCE LINE # 1039
0228 020000      R     LJMP    ?C0307
                                           ; SOURCE LINE # 1040
022B         ?C0228:
                                           ; SOURCE LINE # 1044
022B 900000      R     MOV     DPTR,#rx+01H
022E E0                MOVX    A,@DPTR
022F 6408              XRL     A,#08H
0231 6003              JZ      $ + 5H
0233 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1045
0236 7F05              MOV     R7,#05H
0238 120000      R     LCALL   _Rx_get_u8
023B 900000      R     MOV     DPTR,#rxmsg+04H
023E EF                MOV     A,R7
023F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1047
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 78  

0240 120000      R     LCALL   _get_din
0243 900000      R     MOV     DPTR,#val
0246 5005              JNC     ?C0230
                                           ; SOURCE LINE # 1048
0248 7401              MOV     A,#01H
024A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1049
024B 8002              SJMP    ?C0231
024D         ?C0230:
                                           ; SOURCE LINE # 1050
                                           ; SOURCE LINE # 1051
024D E4                CLR     A
024E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1052
024F         ?C0231:
                                           ; SOURCE LINE # 1054
024F 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 1055
0252 900000      R     MOV     DPTR,#tx+03H
0255 7423              MOV     A,#023H
0257 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1056
0258 900000      R     MOV     DPTR,#val
025B 120000      R     LCALL   L?0317
                                           ; SOURCE LINE # 1057
025E 900000      R     MOV     DPTR,#tx+06H
0261 740A              MOV     A,#0AH
0263 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1058
0264 900000      R     MOV     DPTR,#tx+01H
0267 7404              MOV     A,#04H
                                           ; SOURCE LINE # 1059
                                           ; SOURCE LINE # 1060
                                           ; SOURCE LINE # 1061
                                           ; SOURCE LINE # 1062
0269 020000      R     LJMP    ?C0314
                                           ; SOURCE LINE # 1063
026C         ?C0232:
                                           ; SOURCE LINE # 1064
026C 900000      R     MOV     DPTR,#rx+01H
026F E0                MOVX    A,@DPTR
0270 640C              XRL     A,#0CH
0272 6003              JZ      $ + 5H
0274 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1065
0277 7F05              MOV     R7,#05H
0279 120000      R     LCALL   _Rx_get_u8
                                           ; SOURCE LINE # 1066
027C 120000      R     LCALL   L?0319
027F 900000      R     MOV     DPTR,#val_16
0282 EF                MOV     A,R7
0283 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1067
0284 7F09              MOV     R7,#09H
0286 120000      R     LCALL   _Rx_get_u8
0289 900000      R     MOV     DPTR,#val_16+01H
028C EF                MOV     A,R7
028D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1069
028E 900000      R     MOV     DPTR,#rxmsg+04H
0291 E0                MOVX    A,@DPTR
0292 FF                MOV     R7,A
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 79  

0293 900000      R     MOV     DPTR,#val_16
0296 E0                MOVX    A,@DPTR
0297 FC                MOV     R4,A
0298 A3                INC     DPTR
0299 E0                MOVX    A,@DPTR
029A FD                MOV     R5,A
029B 120000      R     LCALL   _set_aout
                                           ; SOURCE LINE # 1071
029E 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 1072
02A1         ?C0307:
02A1 900000      R     MOV     DPTR,#val_16
02A4 120000      R     LCALL   L?0317
                                           ; SOURCE LINE # 1073
02A7 900000      R     MOV     DPTR,#val_16+01H
02AA E0                MOVX    A,@DPTR
02AB FD                MOV     R5,A
02AC 7F03              MOV     R7,#03H
02AE 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1074
02B1 900000      R     MOV     DPTR,#tx+08H
02B4 740A              MOV     A,#0AH
02B6 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1075
02B7 900000      R     MOV     DPTR,#tx+03H
02BA 7423              MOV     A,#023H
02BC F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1076
02BD 900000      R     MOV     DPTR,#tx+01H
02C0 7406              MOV     A,#06H
02C2         ?C0308:
                                           ; SOURCE LINE # 1077
                                           ; SOURCE LINE # 1078
                                           ; SOURCE LINE # 1079
                                           ; SOURCE LINE # 1081
02C2 020000      R     LJMP    ?C0314
                                           ; SOURCE LINE # 1082
02C5         ?C0234:
                                           ; SOURCE LINE # 1083
02C5 900000      R     MOV     DPTR,#rx+01H
02C8 E0                MOVX    A,@DPTR
02C9 6406              XRL     A,#06H
02CB 6003              JZ      $ + 5H
02CD 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1084
02D0 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 1085
02D3 900000      R     MOV     DPTR,#tx+03H
02D6 7423              MOV     A,#023H
02D8 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1089
02D9 AD84              MOV     R5,P4
02DB 7F01              MOV     R7,#01H
02DD 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1092
02E0 AD85              MOV     R5,P5
02E2 7F03              MOV     R7,#03H
02E4 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1095
02E7 ADB0              MOV     R5,P3
02E9 7F05              MOV     R7,#05H
02EB 120000      R     LCALL   _Tx_set
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 80  

                                           ; SOURCE LINE # 1098
02EE ADA0              MOV     R5,P2
02F0 7F07              MOV     R7,#07H
02F2 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1101
02F5 AD86              MOV     R5,P6
02F7 7F09              MOV     R7,#09H
02F9 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1104
02FC AD96              MOV     R5,P7
02FE 7F0B              MOV     R7,#0BH
0300 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1108
0303 900000      R     MOV     DPTR,#tx+010H
0306 740A              MOV     A,#0AH
0308 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1109
0309 900000      R     MOV     DPTR,#tx+01H
030C 740E              MOV     A,#0EH
030E         ?C0309:
                                           ; SOURCE LINE # 1110
                                           ; SOURCE LINE # 1111
                                           ; SOURCE LINE # 1112
                                           ; SOURCE LINE # 1113
030E 020000      R     LJMP    ?C0314
                                           ; SOURCE LINE # 1114
0311         ?C0236:
                                           ; SOURCE LINE # 1115
0311 900000      R     MOV     DPTR,#rx+01H
0314 E0                MOVX    A,@DPTR
0315 6408              XRL     A,#08H
0317 6003              JZ      $ + 5H
0319 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1116
031C 7F05              MOV     R7,#05H
031E 120000      R     LCALL   _Rx_get_u8
0321 900000      R     MOV     DPTR,#var128
0324 EF                MOV     A,R7
0325 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1117
0326 120000      R     LCALL   FLASH_Save
                                           ; SOURCE LINE # 1118
0329         ?C0306:
                                           ; SOURCE LINE # 1129
                                           ; SOURCE LINE # 1130
0329 020000      R     LJMP    ?C0312
                                           ; SOURCE LINE # 1131
032C         ?C0238:
                                           ; SOURCE LINE # 1132
032C 900000      R     MOV     DPTR,#rx+01H
032F E0                MOVX    A,@DPTR
0330 640E              XRL     A,#0EH
0332 6003              JZ      $ + 5H
0334 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1133
0337 7F05              MOV     R7,#05H
0339 120000      R     LCALL   _Rx_get_u8
033C 900000      R     MOV     DPTR,#var128+01H
                                           ; SOURCE LINE # 1134
033F 120000      R     LCALL   L?0320
0342 900000      R     MOV     DPTR,#var128+02H
0345 EF                MOV     A,R7
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 81  

0346 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1135
0347 7F09              MOV     R7,#09H
0349 120000      R     LCALL   _Rx_get_u8
034C 900000      R     MOV     DPTR,#var128+03H
034F EF                MOV     A,R7
0350 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1136
0351 7F0B              MOV     R7,#0BH
0353 120000      R     LCALL   _Rx_get_u8
0356 900000      R     MOV     DPTR,#var128+04H
0359 EF                MOV     A,R7
035A F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1137
035B 120000      R     LCALL   FLASH_Save
                                           ; SOURCE LINE # 1138
035E         ?C0311:
                                           ; SOURCE LINE # 1149
                                           ; SOURCE LINE # 1150
035E 020000      R     LJMP    ?C0312
                                           ; SOURCE LINE # 1151
0361         ?C0240:
                                           ; SOURCE LINE # 1152
0361 900000      R     MOV     DPTR,#rx+01H
0364 E0                MOVX    A,@DPTR
0365 6406              XRL     A,#06H
0367 6003              JZ      $ + 5H
0369 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1153
036C 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 1154
036F 900000      R     MOV     DPTR,#tx+03H
0372 7423              MOV     A,#023H
0374 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1155
0375 900000      R     MOV     DPTR,#var128+01H
0378 120000      R     LCALL   L?0317
                                           ; SOURCE LINE # 1156
037B 900000      R     MOV     DPTR,#var128+02H
037E E0                MOVX    A,@DPTR
037F FD                MOV     R5,A
0380 7F03              MOV     R7,#03H
0382 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1157
0385 900000      R     MOV     DPTR,#var128+03H
0388 E0                MOVX    A,@DPTR
0389 FD                MOV     R5,A
038A 7F05              MOV     R7,#05H
038C 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1158
038F 900000      R     MOV     DPTR,#var128+04H
0392 E0                MOVX    A,@DPTR
0393 FD                MOV     R5,A
0394 7F07              MOV     R7,#07H
0396 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1160
0399 900000      R     MOV     DPTR,#tx+0CH
039C 740A              MOV     A,#0AH
039E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1161
039F 900000      R     MOV     DPTR,#tx+01H
03A2         ?C0310:
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 82  

                                           ; SOURCE LINE # 1162
                                           ; SOURCE LINE # 1163
                                           ; SOURCE LINE # 1176
                                           ; SOURCE LINE # 1177
03A2 020000      R     LJMP    ?C0314
                                           ; SOURCE LINE # 1178
03A5         ?C0242:
                                           ; SOURCE LINE # 1179
03A5 900000      R     MOV     DPTR,#rx+01H
03A8 E0                MOVX    A,@DPTR
03A9 640E              XRL     A,#0EH
03AB 6003              JZ      $ + 5H
03AD 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1181
03B0 900000      R     MOV     DPTR,#time+04H
03B3 F0                MOVX    @DPTR,A
03B4 A3                INC     DPTR
03B5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1184
03B6 7F05              MOV     R7,#05H
03B8 120000      R     LCALL   _Rx_get_u8
03BB 900000      R     MOV     DPTR,#tmp_1
                                           ; SOURCE LINE # 1185
03BE 120000      R     LCALL   L?0320
03C1 900000      R     MOV     DPTR,#tmp_2
03C4 EF                MOV     A,R7
03C5 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1186
03C6 7F09              MOV     R7,#09H
03C8 120000      R     LCALL   _Rx_get_u8
03CB 900000      R     MOV     DPTR,#tmp_3
03CE EF                MOV     A,R7
03CF F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1187
03D0 7F0B              MOV     R7,#0BH
03D2 120000      R     LCALL   _Rx_get_u8
03D5 900000      R     MOV     DPTR,#tmp_4
03D8 EF                MOV     A,R7
03D9 F0                MOVX    @DPTR,A
03DA FB                MOV     R3,A
                                           ; SOURCE LINE # 1190
03DB 900000      R     MOV     DPTR,#time+04H
03DE E4                CLR     A
03DF F0                MOVX    @DPTR,A
03E0 A3                INC     DPTR
03E1 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1191
03E2 900000      R     MOV     DPTR,#tmp_1
03E5 E0                MOVX    A,@DPTR
03E6 FF                MOV     R7,A
03E7 E4                CLR     A
03E8 FC                MOV     R4,A
03E9 FD                MOV     R5,A
03EA FE                MOV     R6,A
03EB 7818              MOV     R0,#018H
03ED 120000      E     LCALL   ?C?LSHL
03F0 900000      R     MOV     DPTR,#time+05H
03F3 E0                MOVX    A,@DPTR
03F4 2F                ADD     A,R7
03F5 F0                MOVX    @DPTR,A
03F6 900000      R     MOV     DPTR,#time+04H
03F9 E0                MOVX    A,@DPTR
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 83  

03FA 3E                ADDC    A,R6
03FB F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1192
03FC 900000      R     MOV     DPTR,#tmp_2
03FF E0                MOVX    A,@DPTR
0400 FF                MOV     R7,A
0401 E4                CLR     A
0402 FC                MOV     R4,A
0403 FD                MOV     R5,A
0404 FE                MOV     R6,A
0405 7810              MOV     R0,#010H
0407 120000      E     LCALL   ?C?LSHL
040A 900000      R     MOV     DPTR,#time+05H
040D E0                MOVX    A,@DPTR
040E 2F                ADD     A,R7
040F F0                MOVX    @DPTR,A
0410 900000      R     MOV     DPTR,#time+04H
0413 E0                MOVX    A,@DPTR
0414 3E                ADDC    A,R6
0415 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1193
0416 900000      R     MOV     DPTR,#tmp_3
0419 E0                MOVX    A,@DPTR
041A FF                MOV     R7,A
041B E4                CLR     A
041C FC                MOV     R4,A
041D FD                MOV     R5,A
041E FE                MOV     R6,A
041F 7808              MOV     R0,#08H
0421 120000      E     LCALL   ?C?LSHL
0424 900000      R     MOV     DPTR,#time+05H
0427 E0                MOVX    A,@DPTR
0428 2F                ADD     A,R7
0429 F0                MOVX    @DPTR,A
042A 900000      R     MOV     DPTR,#time+04H
042D E0                MOVX    A,@DPTR
042E 3E                ADDC    A,R6
042F F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1194
0430 EB                MOV     A,R3
0431 FF                MOV     R7,A
0432 A3                INC     DPTR
0433 E0                MOVX    A,@DPTR
0434 2F                ADD     A,R7
0435 F0                MOVX    @DPTR,A
0436 900000      R     MOV     DPTR,#time+04H
0439 E0                MOVX    A,@DPTR
043A 3400              ADDC    A,#00H
043C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1203
043D E0                MOVX    A,@DPTR
043E FC                MOV     R4,A
043F A3                INC     DPTR
0440 E0                MOVX    A,@DPTR
0441 FD                MOV     R5,A
0442 CE                XCH     A,R6
0443 EC                MOV     A,R4
0444 CE                XCH     A,R6
0445 7818              MOV     R0,#018H
0447         ?C0296:
0447 CE                XCH     A,R6
0448 C3                CLR     C
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 84  

0449 13                RRC     A
044A CE                XCH     A,R6
044B 13                RRC     A
044C D8F9              DJNZ    R0,?C0296
044E 900000      R     MOV     DPTR,#tmp_1
0451 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1204
0452 ED                MOV     A,R5
0453 CE                XCH     A,R6
0454 EC                MOV     A,R4
0455 CE                XCH     A,R6
0456 7810              MOV     R0,#010H
0458         ?C0297:
0458 CE                XCH     A,R6
0459 C3                CLR     C
045A 13                RRC     A
045B CE                XCH     A,R6
045C 13                RRC     A
045D D8F9              DJNZ    R0,?C0297
                                           ; SOURCE LINE # 1205
                                           ; SOURCE LINE # 1206
                                           ; SOURCE LINE # 1208
                                           ; SOURCE LINE # 1210
045F 120000      R     LCALL   L?0316
                                           ; SOURCE LINE # 1211
0462 900000      R     MOV     DPTR,#tmp_2
0465 E0                MOVX    A,@DPTR
0466 FD                MOV     R5,A
0467 7F03              MOV     R7,#03H
0469 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1212
046C 900000      R     MOV     DPTR,#tmp_3
046F E0                MOVX    A,@DPTR
0470 FD                MOV     R5,A
0471 7F05              MOV     R7,#05H
0473 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1213
0476 900000      R     MOV     DPTR,#tmp_4
0479 E0                MOVX    A,@DPTR
047A FD                MOV     R5,A
047B 7F07              MOV     R7,#07H
047D 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1220
0480 900000      R     MOV     DPTR,#tx+0CH
0483 740A              MOV     A,#0AH
0485 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1221
0486 900000      R     MOV     DPTR,#tx+03H
0489 7423              MOV     A,#023H
048B F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1222
048C 900000      R     MOV     DPTR,#tx+01H
048F 740A              MOV     A,#0AH
0491         ?C0313:
                                           ; SOURCE LINE # 1223
                                           ; SOURCE LINE # 1224
                                           ; SOURCE LINE # 1232
                                           ; SOURCE LINE # 1233
0491 8057              SJMP    ?C0314
                                           ; SOURCE LINE # 1234
0493         ?C0244:
                                           ; SOURCE LINE # 1241
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 85  

0493 900000      R     MOV     DPTR,#time+04H
0496 E0                MOVX    A,@DPTR
0497 FC                MOV     R4,A
0498 A3                INC     DPTR
0499 E0                MOVX    A,@DPTR
049A FD                MOV     R5,A
049B CE                XCH     A,R6
049C EC                MOV     A,R4
049D CE                XCH     A,R6
049E 7818              MOV     R0,#018H
04A0         ?C0298:
04A0 CE                XCH     A,R6
04A1 C3                CLR     C
04A2 13                RRC     A
04A3 CE                XCH     A,R6
04A4 13                RRC     A
04A5 D8F9              DJNZ    R0,?C0298
04A7 900000      R     MOV     DPTR,#tmp_1
04AA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1242
04AB ED                MOV     A,R5
04AC CE                XCH     A,R6
04AD EC                MOV     A,R4
04AE CE                XCH     A,R6
04AF 7810              MOV     R0,#010H
04B1         ?C0299:
04B1 CE                XCH     A,R6
04B2 C3                CLR     C
04B3 13                RRC     A
04B4 CE                XCH     A,R6
04B5 13                RRC     A
04B6 D8F9              DJNZ    R0,?C0299
                                           ; SOURCE LINE # 1243
                                           ; SOURCE LINE # 1244
                                           ; SOURCE LINE # 1246
                                           ; SOURCE LINE # 1248
04B8 120000      R     LCALL   L?0316
                                           ; SOURCE LINE # 1249
04BB 900000      R     MOV     DPTR,#tmp_2
04BE E0                MOVX    A,@DPTR
04BF FD                MOV     R5,A
04C0 7F03              MOV     R7,#03H
04C2 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1250
04C5 900000      R     MOV     DPTR,#tmp_3
04C8 E0                MOVX    A,@DPTR
04C9 FD                MOV     R5,A
04CA 7F05              MOV     R7,#05H
04CC 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1251
04CF 900000      R     MOV     DPTR,#tmp_4
04D2 E0                MOVX    A,@DPTR
04D3 FD                MOV     R5,A
04D4 7F07              MOV     R7,#07H
04D6 120000      R     LCALL   _Tx_set
                                           ; SOURCE LINE # 1253
04D9 900000      R     MOV     DPTR,#tx+0CH
04DC 740A              MOV     A,#0AH
04DE F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1254
04DF 900000      R     MOV     DPTR,#tx+03H
04E2 7423              MOV     A,#023H
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 86  

04E4 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1255
04E5 900000      R     MOV     DPTR,#tx+01H
04E8 740A              MOV     A,#0AH
04EA         ?C0314:
04EA F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1256
04EB 900000      R     MOV     DPTR,#tx
04EE E4                CLR     A
                                           ; SOURCE LINE # 1257
                                           ; SOURCE LINE # 1259
04EF 020000      R     LJMP    ?C0315
                                           ; SOURCE LINE # 1260
04F2         ?C0245:
                                           ; SOURCE LINE # 1261
04F2 900000      R     MOV     DPTR,#rx+01H
04F5 E0                MOVX    A,@DPTR
04F6 640A              XRL     A,#0AH
04F8 6003              JZ      $ + 5H
04FA 020000      R     LJMP    ?C0218
                                           ; SOURCE LINE # 1262
04FD 7F05              MOV     R7,#05H
04FF 120000      R     LCALL   _Rx_get_u8
0502 900000      R     MOV     DPTR,#tmp_1
                                           ; SOURCE LINE # 1263
0505 120000      R     LCALL   L?0320
0508 900000      R     MOV     DPTR,#tmp_2
050B EF                MOV     A,R7
050C F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1264
050D 900000      R     MOV     DPTR,#tmp_1
0510 E0                MOVX    A,@DPTR
0511 241C              ADD     A,#01CH
0513 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1265
0514 E0                MOVX    A,@DPTR
0515 FF                MOV     R7,A
0516 741B              MOV     A,#01BH
0518 C3                CLR     C
0519 9F                SUBB    A,R7
051A 506B              JNC     ?C0218
051C EF                MOV     A,R7
051D C3                CLR     C
051E 9480              SUBB    A,#080H
0520 5065              JNC     ?C0218
                                           ; SOURCE LINE # 1266
0522 A3                INC     DPTR
0523 E0                MOVX    A,@DPTR
0524 FF                MOV     R7,A
0525 900000      R     MOV     DPTR,#tmp_1
0528 E0                MOVX    A,@DPTR
0529 2400        R     ADD     A,#LOW var128
052B F582              MOV     DPL,A
052D E4                CLR     A
052E 3400        R     ADDC    A,#HIGH var128
0530 F583              MOV     DPH,A
0532 EF                MOV     A,R7
0533 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1267
0534 120000      R     LCALL   FLASH_Save
                                           ; SOURCE LINE # 1268
0537         ?C0312:
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 87  

0537 120000      R     LCALL   Loopback
                                           ; SOURCE LINE # 1269
                                           ; SOURCE LINE # 1270
                                           ; SOURCE LINE # 1271
053A 804B              SJMP    ?C0218
                                           ; SOURCE LINE # 1272
053C         ?C0248:
                                           ; SOURCE LINE # 1273
053C 900000      R     MOV     DPTR,#rx+01H
053F E0                MOVX    A,@DPTR
0540 6408              XRL     A,#08H
0542 7043              JNZ     ?C0218
                                           ; SOURCE LINE # 1274
0544 7F05              MOV     R7,#05H
0546 120000      R     LCALL   _Rx_get_u8
0549 900000      R     MOV     DPTR,#tmp_1
054C EF                MOV     A,R7
054D F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1276
054E E0                MOVX    A,@DPTR
054F 241C              ADD     A,#01CH
0551 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1277
0552 E0                MOVX    A,@DPTR
0553 FF                MOV     R7,A
0554 741B              MOV     A,#01BH
0556 C3                CLR     C
0557 9F                SUBB    A,R7
0558 502D              JNC     ?C0218
055A EF                MOV     A,R7
055B C3                CLR     C
055C 9480              SUBB    A,#080H
055E 5027              JNC     ?C0218
                                           ; SOURCE LINE # 1278
0560 120000      R     LCALL   Tx_init
                                           ; SOURCE LINE # 1279
0563 900000      R     MOV     DPTR,#tx+03H
0566 7423              MOV     A,#023H
0568 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1280
0569 900000      R     MOV     DPTR,#tmp_1
056C E0                MOVX    A,@DPTR
056D 2400        R     ADD     A,#LOW var128
056F F582              MOV     DPL,A
0571 E4                CLR     A
0572 3400        R     ADDC    A,#HIGH var128
0574 F583              MOV     DPH,A
0576 120000      R     LCALL   L?0317
                                           ; SOURCE LINE # 1281
0579 900000      R     MOV     DPTR,#tx+06H
057C 740A              MOV     A,#0AH
057E F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1282
057F 900000      R     MOV     DPTR,#tx+01H
0582 7404              MOV     A,#04H
0584         ?C0315:
0584 F0                MOVX    @DPTR,A
                                           ; SOURCE LINE # 1284
0585 D299              SETB    TI0
                                           ; SOURCE LINE # 1286
                                           ; SOURCE LINE # 1287
                                           ; SOURCE LINE # 1289
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 88  

                                           ; SOURCE LINE # 1291
                                           ; SOURCE LINE # 1292
                                           ; SOURCE LINE # 1293
0587         ?C0218:
                                           ; SOURCE LINE # 1296
0587 D2AF              SETB    EA
                                           ; SOURCE LINE # 1297
0589 D0D0              POP     PSW
058B D082              POP     DPL
058D D083              POP     DPH
058F D0F0              POP     B
0591 D0E0              POP     ACC
0593 32                RETI    
             ; FUNCTION Uart0 (END)

C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 89  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


SP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0081H  1
P4 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0084H  1
P5 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0085H  1
P6 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0086H  1
PCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0087H  1
TCON . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0088H  1
TMOD . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0089H  1
TL1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008BH  1
TH1. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008DH  1
CKCON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008EH  1
PSCTL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   008FH  1
P7 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0096H  1
SCON0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0098H  1
SBUF0. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   0099H  1
ADC1 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   009CH  1
P2 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A0H  1
P0MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A4H  1
P1MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A5H  1
P3MDOUT. . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A7H  1
IE . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00A8H  1
ADC1CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00AAH  1
ADC1CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ABH  1
AMX1SL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ACH  1
P3 . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B0H  1
OSCXCN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B1H  1
OSCICN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B2H  1
P74OUT . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B5H  1
FLSCL. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B6H  1
IP . . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00B8H  1
AMX0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BAH  1
AMX0SL . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BBH  1
ADC0CF . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BCH  1
P1MDIN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00BDH  1
SMB0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C0H  1
T2CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C8H  1
T4CON. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00C9H  1
PSW. . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D0H  1
REF0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D1H  1
DAC0L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D2H  1
DAC0H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D3H  1
DAC0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D4H  1
DAC1L. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D5H  1
DAC1H. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D6H  1
DAC1CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D7H  1
PCA0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00D8H  1
XBR0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E1H  1
XBR2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E3H  1
EIE2 . . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E7H  1
ADC0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00E8H  1
PCA0CPL0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EAH  1
PCA0CPL1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00EBH  1
PCA0CPL2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00ECH  1
SPI0CN . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00F8H  1
PCA0CPH0 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FAH  1
PCA0CPH1 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FBH  1
PCA0CPH2 . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FCH  1
WDTCN. . . . . . . . . . . . . . . . .  SFR      DATA   U_CHAR   00FFH  1
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 90  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


TR1. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      008EH  1
TI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0099H  1
RI0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      0098H  1
EA . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00AFH  1
ES0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ACH  1
PS0. . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00BCH  1
CR . . . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00DEH  1
AD0INT . . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00EDH  1
AD0BUSY. . . . . . . . . . . . . . . .  ABSBIT   -----  BIT      00ECH  1
ADC0 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00BEH  2
TMR4 . . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00F4H  2
RCAP4. . . . . . . . . . . . . . . . .  SFR      DATA   U_INT    00E4H  2
u8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_CHAR   -----  1
s8 . . . . . . . . . . . . . . . . . .  TYPEDEF  -----  CHAR     -----  1
u16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_INT    -----  2
s16. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  INT      -----  2
u32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  U_LONG   -----  4
s32. . . . . . . . . . . . . . . . . .  TYPEDEF  -----  LONG     -----  4
bufType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  35
  idx. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  sum. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  buf. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0003H  32
bufType. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  35
  idx. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  sum. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  buf. . . . . . . . . . . . . . . . .  MEMBER   -----  ARRAY    0003H  32
msgType. . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  8
  xor. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  idx. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  val. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  t1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  t2 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
msgType. . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  8
  xor. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0000H  1
  size . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0001H  1
  addr . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0002H  1
  type . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0003H  1
  idx. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0004H  1
  val. . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0005H  1
  t1 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0006H  1
  t2 . . . . . . . . . . . . . . . . .  MEMBER   -----  U_CHAR   0007H  1
timeType . . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  6
  us . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  ms . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  sec. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
timeType . . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  6
  us . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  ms . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
  sec. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0004H  2
timerType. . . . . . . . . . . . . . .  * TAG *  -----  STRUCT   -----  4
  ms . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  sec. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 91  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


timerType. . . . . . . . . . . . . . .  TYPEDEF  -----  STRUCT   -----  4
  ms . . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0000H  2
  sec. . . . . . . . . . . . . . . . .  MEMBER   -----  U_INT    0002H  2
rx . . . . . . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   0000H  35
rxmsg. . . . . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   0023H  8
tx . . . . . . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   002BH  35
txmsg. . . . . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   004EH  8
time . . . . . . . . . . . . . . . . .  STATIC   XDATA  STRUCT   0056H  6
dout_timeout_sec . . . . . . . . . . .  STATIC   XDATA  ARRAY    005CH  96
dout_timeout_ms. . . . . . . . . . . .  STATIC   XDATA  ARRAY    00BCH  96
var128 . . . . . . . . . . . . . . . .  STATIC   XDATA  ARRAY    011CH  128
flag_1sec. . . . . . . . . . . . . . .  STATIC   DATA   BIT      0000H  1
Tx_init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Tx_set. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     001EH  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
  var. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  prm. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0001H  2
Rx_init. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
Loopback . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_SendConstMsg. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  pmsg . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  pmsg2. . . . . . . . . . . . . . . .  AUTO     XDATA  PTR      0000H  2
Rxmsg_dout_wr. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Conv_u8_to_str. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  prm1 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  prm2 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  ret. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
_Conv_str_to_u8. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  str2 . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  str. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  ret. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  prm1 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  prm2 . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_Conv_ascii_to_int . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_Conv_int_to_ascii . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  prm. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_Rx_get_u8 . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0007H  -----
  i. . . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0000H  1
_get_din . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  idx. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  bitmask. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_get_ain . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  gain . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0001H  1
  reg16. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
_set_aout. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  low. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
  high . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
_set_dout. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0008H  -----
  idx. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  val. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  bitmask. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 92  

NAME                                    CLASS   MSPACE  TYPE    OFFSET  SIZE
====                                    =====   ======  ====    ======  ====


_FLASH_ByteWrite . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  byte . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  SFLE . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  EA_SAVE. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
  pwrite . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
_FLASH_ByteRead. . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  SFLE . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  EA_SAVE. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
  pread. . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
  byte . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_FLASH_PageErase . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  addr . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0006H  2
  SFLE . . . . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  EA_SAVE. . . . . . . . . . . . . . .  AUTO     DATA   BIT      0001H  1
  pwrite . . . . . . . . . . . . . . .  AUTO     DATA   PTR      0000H  2
FLASH_Save . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0004H  1
FLASH_Load . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
func101. . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
_Buf_init. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ptr. . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0001H  3
  bufp . . . . . . . . . . . . . . . .  * REG *  DATA   PTR      0006H  2
_ADC0_set_diff . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  mode . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  cnt. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
_get_dout. . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  idx. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  bitmask. . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0006H  1
_get_ain_adc0. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch0. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  gain . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  reg16. . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0002H  2
_get_ain_adc1. . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch1. . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  gain . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0005H  1
  reg16. . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
_set_pwm . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0007H  1
  dc . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
Main . . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_INT    0004H  2
Timer4 . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   001CH  1
Uart0. . . . . . . . . . . . . . . . .  PUBLIC   CODE   PROC     0000H  -----
  ch . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0017H  1
  val_16 . . . . . . . . . . . . . . .  AUTO     XDATA  U_INT    0000H  2
  i. . . . . . . . . . . . . . . . . .  * REG *  DATA   U_CHAR   0017H  1
  val. . . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0002H  1
  rx_finish. . . . . . . . . . . . . .  AUTO     DATA   BIT      0000H  1
  tmp_1. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0003H  1
  tmp_2. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0004H  1
  tmp_3. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0005H  1
  tmp_4. . . . . . . . . . . . . . . .  AUTO     XDATA  U_CHAR   0006H  1

C51 COMPILER V9.55   PROJECT                                                               01/09/2019 21:33:00 PAGE 93  


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   4029    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =    412      21
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       6
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       7
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
